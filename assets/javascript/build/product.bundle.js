!function(){var e={732:function(e){e.exports=function(){"use strict";function e(){return e=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var i=arguments[t];for(var n in i)Object.prototype.hasOwnProperty.call(i,n)&&(e[n]=i[n])}return e},e.apply(this,arguments)}var t="undefined"!=typeof window,i=t&&!("onscroll"in window)||"undefined"!=typeof navigator&&/(gle|ing|ro)bot|crawl|spider/i.test(navigator.userAgent),n=t&&"IntersectionObserver"in window,s=t&&"classList"in document.createElement("p"),r=t&&window.devicePixelRatio>1,o={elements_selector:".lazy",container:i||t?document:null,threshold:300,thresholds:null,data_src:"src",data_srcset:"srcset",data_sizes:"sizes",data_bg:"bg",data_bg_hidpi:"bg-hidpi",data_bg_multi:"bg-multi",data_bg_multi_hidpi:"bg-multi-hidpi",data_bg_set:"bg-set",data_poster:"poster",class_applied:"applied",class_loading:"loading",class_loaded:"loaded",class_error:"error",class_entered:"entered",class_exited:"exited",unobserve_completed:!0,unobserve_entered:!1,cancel_on_exit:!0,callback_enter:null,callback_exit:null,callback_applied:null,callback_loading:null,callback_loaded:null,callback_error:null,callback_finish:null,callback_cancel:null,use_native:!1,restore_on_error:!1},a=function(t){return e({},o,t)},l=function(e,t){var i,n="LazyLoad::Initialized",s=new e(t);try{i=new CustomEvent(n,{detail:{instance:s}})}catch(e){(i=document.createEvent("CustomEvent")).initCustomEvent(n,!1,!1,{instance:s})}window.dispatchEvent(i)},c="src",d="srcset",u="sizes",p="poster",h="llOriginalAttrs",f="data",m="loading",g="loaded",v="applied",b="error",_="native",w="data-",y="ll-status",C=function(e,t){return e.getAttribute(w+t)},E=function(e){return C(e,y)},T=function(e,t){return function(e,t,i){var n="data-ll-status";null!==i?e.setAttribute(n,i):e.removeAttribute(n)}(e,0,t)},x=function(e){return T(e,null)},S=function(e){return null===E(e)},k=function(e){return E(e)===_},A=[m,g,v,b],O=function(e,t,i,n){e&&(void 0===n?void 0===i?e(t):e(t,i):e(t,i,n))},L=function(e,t){s?e.classList.add(t):e.className+=(e.className?" ":"")+t},M=function(e,t){s?e.classList.remove(t):e.className=e.className.replace(new RegExp("(^|\\s+)"+t+"(\\s+|$)")," ").replace(/^\s+/,"").replace(/\s+$/,"")},P=function(e){return e.llTempImage},I=function(e,t){if(t){var i=t._observer;i&&i.unobserve(e)}},$=function(e,t){e&&(e.loadingCount+=t)},D=function(e,t){e&&(e.toLoadCount=t)},N=function(e){for(var t,i=[],n=0;t=e.children[n];n+=1)"SOURCE"===t.tagName&&i.push(t);return i},j=function(e,t){var i=e.parentNode;i&&"PICTURE"===i.tagName&&N(i).forEach(t)},z=function(e,t){N(e).forEach(t)},B=[c],H=[c,p],F=[c,d,u],G=[f],q=function(e){return!!e[h]},W=function(e){return e[h]},R=function(e){return delete e[h]},V=function(e,t){if(!q(e)){var i={};t.forEach((function(t){i[t]=e.getAttribute(t)})),e[h]=i}},Y=function(e,t){if(q(e)){var i=W(e);t.forEach((function(t){!function(e,t,i){i?e.setAttribute(t,i):e.removeAttribute(t)}(e,t,i[t])}))}},X=function(e,t,i){L(e,t.class_applied),T(e,v),i&&(t.unobserve_completed&&I(e,t),O(t.callback_applied,e,i))},K=function(e,t,i){L(e,t.class_loading),T(e,m),i&&($(i,1),O(t.callback_loading,e,i))},U=function(e,t,i){i&&e.setAttribute(t,i)},Q=function(e,t){U(e,u,C(e,t.data_sizes)),U(e,d,C(e,t.data_srcset)),U(e,c,C(e,t.data_src))},J={IMG:function(e,t){j(e,(function(e){V(e,F),Q(e,t)})),V(e,F),Q(e,t)},IFRAME:function(e,t){V(e,B),U(e,c,C(e,t.data_src))},VIDEO:function(e,t){z(e,(function(e){V(e,B),U(e,c,C(e,t.data_src))})),V(e,H),U(e,p,C(e,t.data_poster)),U(e,c,C(e,t.data_src)),e.load()},OBJECT:function(e,t){V(e,G),U(e,f,C(e,t.data_src))}},Z=["IMG","IFRAME","VIDEO","OBJECT"],ee=function(e,t){!t||function(e){return e.loadingCount>0}(t)||function(e){return e.toLoadCount>0}(t)||O(e.callback_finish,t)},te=function(e,t,i){e.addEventListener(t,i),e.llEvLisnrs[t]=i},ie=function(e,t,i){e.removeEventListener(t,i)},ne=function(e){return!!e.llEvLisnrs},se=function(e){if(ne(e)){var t=e.llEvLisnrs;for(var i in t){var n=t[i];ie(e,i,n)}delete e.llEvLisnrs}},re=function(e,t,i){!function(e){delete e.llTempImage}(e),$(i,-1),function(e){e&&(e.toLoadCount-=1)}(i),M(e,t.class_loading),t.unobserve_completed&&I(e,i)},oe=function(e,t,i){var n=P(e)||e;ne(n)||function(e,t,i){ne(e)||(e.llEvLisnrs={});var n="VIDEO"===e.tagName?"loadeddata":"load";te(e,n,t),te(e,"error",i)}(n,(function(s){!function(e,t,i,n){var s=k(t);re(t,i,n),L(t,i.class_loaded),T(t,g),O(i.callback_loaded,t,n),s||ee(i,n)}(0,e,t,i),se(n)}),(function(s){!function(e,t,i,n){var s=k(t);re(t,i,n),L(t,i.class_error),T(t,b),O(i.callback_error,t,n),i.restore_on_error&&Y(t,F),s||ee(i,n)}(0,e,t,i),se(n)}))},ae=function(e,t,i){!function(e){return Z.indexOf(e.tagName)>-1}(e)?function(e,t,i){!function(e){e.llTempImage=document.createElement("IMG")}(e),oe(e,t,i),function(e){q(e)||(e[h]={backgroundImage:e.style.backgroundImage})}(e),function(e,t,i){var n=C(e,t.data_bg),s=C(e,t.data_bg_hidpi),o=r&&s?s:n;o&&(e.style.backgroundImage='url("'.concat(o,'")'),P(e).setAttribute(c,o),K(e,t,i))}(e,t,i),function(e,t,i){var n=C(e,t.data_bg_multi),s=C(e,t.data_bg_multi_hidpi),o=r&&s?s:n;o&&(e.style.backgroundImage=o,X(e,t,i))}(e,t,i),function(e,t,i){var n=C(e,t.data_bg_set);if(n){var s=n.split("|"),r=s.map((function(e){return"image-set(".concat(e,")")}));e.style.backgroundImage=r.join(),""===e.style.backgroundImage&&(r=s.map((function(e){return"-webkit-image-set(".concat(e,")")})),e.style.backgroundImage=r.join()),X(e,t,i)}}(e,t,i)}(e,t,i):function(e,t,i){oe(e,t,i),function(e,t,i){var n=J[e.tagName];n&&(n(e,t),K(e,t,i))}(e,t,i)}(e,t,i)},le=function(e){e.removeAttribute(c),e.removeAttribute(d),e.removeAttribute(u)},ce=function(e){j(e,(function(e){Y(e,F)})),Y(e,F)},de={IMG:ce,IFRAME:function(e){Y(e,B)},VIDEO:function(e){z(e,(function(e){Y(e,B)})),Y(e,H),e.load()},OBJECT:function(e){Y(e,G)}},ue=function(e,t){(function(e){var t=de[e.tagName];t?t(e):function(e){if(q(e)){var t=W(e);e.style.backgroundImage=t.backgroundImage}}(e)})(e),function(e,t){S(e)||k(e)||(M(e,t.class_entered),M(e,t.class_exited),M(e,t.class_applied),M(e,t.class_loading),M(e,t.class_loaded),M(e,t.class_error))}(e,t),x(e),R(e)},pe=["IMG","IFRAME","VIDEO"],he=function(e){return e.use_native&&"loading"in HTMLImageElement.prototype},fe=function(e,t,i){e.forEach((function(e){return function(e){return e.isIntersecting||e.intersectionRatio>0}(e)?function(e,t,i,n){var s=function(e){return A.indexOf(E(e))>=0}(e);T(e,"entered"),L(e,i.class_entered),M(e,i.class_exited),function(e,t,i){t.unobserve_entered&&I(e,i)}(e,i,n),O(i.callback_enter,e,t,n),s||ae(e,i,n)}(e.target,e,t,i):function(e,t,i,n){S(e)||(L(e,i.class_exited),function(e,t,i,n){i.cancel_on_exit&&function(e){return E(e)===m}(e)&&"IMG"===e.tagName&&(se(e),function(e){j(e,(function(e){le(e)})),le(e)}(e),ce(e),M(e,i.class_loading),$(n,-1),x(e),O(i.callback_cancel,e,t,n))}(e,t,i,n),O(i.callback_exit,e,t,n))}(e.target,e,t,i)}))},me=function(e){return Array.prototype.slice.call(e)},ge=function(e){return e.container.querySelectorAll(e.elements_selector)},ve=function(e){return function(e){return E(e)===b}(e)},be=function(e,t){return function(e){return me(e).filter(S)}(e||ge(t))},_e=function(e,i){var s=a(e);this._settings=s,this.loadingCount=0,function(e,t){n&&!he(e)&&(t._observer=new IntersectionObserver((function(i){fe(i,e,t)}),function(e){return{root:e.container===document?null:e.container,rootMargin:e.thresholds||e.threshold+"px"}}(e)))}(s,this),function(e,i){t&&(i._onlineHandler=function(){!function(e,t){var i;(i=ge(e),me(i).filter(ve)).forEach((function(t){M(t,e.class_error),x(t)})),t.update()}(e,i)},window.addEventListener("online",i._onlineHandler))}(s,this),this.update(i)};return _e.prototype={update:function(e){var t,s,r=this._settings,o=be(e,r);D(this,o.length),!i&&n?he(r)?function(e,t,i){e.forEach((function(e){-1!==pe.indexOf(e.tagName)&&function(e,t,i){e.setAttribute("loading","lazy"),oe(e,t,i),function(e,t){var i=J[e.tagName];i&&i(e,t)}(e,t),T(e,_)}(e,t,i)})),D(i,0)}(o,r,this):(s=o,function(e){e.disconnect()}(t=this._observer),function(e,t){t.forEach((function(t){e.observe(t)}))}(t,s)):this.loadAll(o)},destroy:function(){this._observer&&this._observer.disconnect(),t&&window.removeEventListener("online",this._onlineHandler),ge(this._settings).forEach((function(e){R(e)})),delete this._observer,delete this._settings,delete this._onlineHandler,delete this.loadingCount,delete this.toLoadCount},loadAll:function(e){var t=this,i=this._settings;be(e,i).forEach((function(e){I(e,t),ae(e,i,t)}))},restoreAll:function(){var e=this._settings;ge(e).forEach((function(t){ue(t,e)}))}},_e.load=function(e,t){var i=a(t);ae(e,i)},_e.resetStatus=function(e){x(e)},t&&function(e,t){if(t)if(t.length)for(var i,n=0;i=t[n];n+=1)l(e,i);else l(e,t)}(_e,window.lazyLoadOptions),_e}()}},t={};function i(n){var s=t[n];if(void 0!==s)return s.exports;var r=t[n]={exports:{}};return e[n].call(r.exports,r,r.exports,i),r.exports}i.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return i.d(t,{a:t}),t},i.d=function(e,t){for(var n in t)i.o(t,n)&&!i.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},i.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},i.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},function(){"use strict";var e={};function t(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function n(e,t){for(var i=0;i<t.length;i++){var n=t[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function s(e,t,i){return t&&n(e.prototype,t),i&&n(e,i),Object.defineProperty(e,"prototype",{writable:!1}),e}i.r(e),i.d(e,{afterMain:function(){return T},afterRead:function(){return y},afterWrite:function(){return k},applyStyles:function(){return D},arrow:function(){return Z},auto:function(){return c},basePlacements:function(){return d},beforeMain:function(){return C},beforeRead:function(){return _},beforeWrite:function(){return x},bottom:function(){return o},clippingParents:function(){return h},computeStyles:function(){return ne},createPopper:function(){return Ie},createPopperBase:function(){return Pe},createPopperLite:function(){return $e},detectOverflow:function(){return _e},end:function(){return p},eventListeners:function(){return re},flip:function(){return we},hide:function(){return Ee},left:function(){return l},main:function(){return E},modifierPhases:function(){return A},offset:function(){return Te},placements:function(){return b},popper:function(){return m},popperGenerator:function(){return Me},popperOffsets:function(){return xe},preventOverflow:function(){return Se},read:function(){return w},reference:function(){return g},right:function(){return a},start:function(){return u},top:function(){return r},variationPlacements:function(){return v},viewport:function(){return f},write:function(){return S}});var r="top",o="bottom",a="right",l="left",c="auto",d=[r,o,a,l],u="start",p="end",h="clippingParents",f="viewport",m="popper",g="reference",v=d.reduce((function(e,t){return e.concat([t+"-"+u,t+"-"+p])}),[]),b=[].concat(d,[c]).reduce((function(e,t){return e.concat([t,t+"-"+u,t+"-"+p])}),[]),_="beforeRead",w="read",y="afterRead",C="beforeMain",E="main",T="afterMain",x="beforeWrite",S="write",k="afterWrite",A=[_,w,y,C,E,T,x,S,k];function O(e){return e?(e.nodeName||"").toLowerCase():null}function L(e){if(null==e)return window;if("[object Window]"!==e.toString()){var t=e.ownerDocument;return t&&t.defaultView||window}return e}function M(e){return e instanceof L(e).Element||e instanceof Element}function P(e){return e instanceof L(e).HTMLElement||e instanceof HTMLElement}function I(e){return"undefined"!=typeof ShadowRoot&&(e instanceof L(e).ShadowRoot||e instanceof ShadowRoot)}var D={name:"applyStyles",enabled:!0,phase:"write",fn:function(e){var t=e.state;Object.keys(t.elements).forEach((function(e){var i=t.styles[e]||{},n=t.attributes[e]||{},s=t.elements[e];P(s)&&O(s)&&(Object.assign(s.style,i),Object.keys(n).forEach((function(e){var t=n[e];!1===t?s.removeAttribute(e):s.setAttribute(e,!0===t?"":t)})))}))},effect:function(e){var t=e.state,i={popper:{position:t.options.strategy,left:"0",top:"0",margin:"0"},arrow:{position:"absolute"},reference:{}};return Object.assign(t.elements.popper.style,i.popper),t.styles=i,t.elements.arrow&&Object.assign(t.elements.arrow.style,i.arrow),function(){Object.keys(t.elements).forEach((function(e){var n=t.elements[e],s=t.attributes[e]||{},r=Object.keys(t.styles.hasOwnProperty(e)?t.styles[e]:i[e]).reduce((function(e,t){return e[t]="",e}),{});P(n)&&O(n)&&(Object.assign(n.style,r),Object.keys(s).forEach((function(e){n.removeAttribute(e)})))}))}},requires:["computeStyles"]};function N(e){return e.split("-")[0]}var j=Math.max,z=Math.min,B=Math.round;function H(e,t){void 0===t&&(t=!1);var i=e.getBoundingClientRect(),n=1,s=1;if(P(e)&&t){var r=e.offsetHeight,o=e.offsetWidth;o>0&&(n=B(i.width)/o||1),r>0&&(s=B(i.height)/r||1)}return{width:i.width/n,height:i.height/s,top:i.top/s,right:i.right/n,bottom:i.bottom/s,left:i.left/n,x:i.left/n,y:i.top/s}}function F(e){var t=H(e),i=e.offsetWidth,n=e.offsetHeight;return Math.abs(t.width-i)<=1&&(i=t.width),Math.abs(t.height-n)<=1&&(n=t.height),{x:e.offsetLeft,y:e.offsetTop,width:i,height:n}}function G(e,t){var i=t.getRootNode&&t.getRootNode();if(e.contains(t))return!0;if(i&&I(i)){var n=t;do{if(n&&e.isSameNode(n))return!0;n=n.parentNode||n.host}while(n)}return!1}function q(e){return L(e).getComputedStyle(e)}function W(e){return["table","td","th"].indexOf(O(e))>=0}function R(e){return((M(e)?e.ownerDocument:e.document)||window.document).documentElement}function V(e){return"html"===O(e)?e:e.assignedSlot||e.parentNode||(I(e)?e.host:null)||R(e)}function Y(e){return P(e)&&"fixed"!==q(e).position?e.offsetParent:null}function X(e){for(var t=L(e),i=Y(e);i&&W(i)&&"static"===q(i).position;)i=Y(i);return i&&("html"===O(i)||"body"===O(i)&&"static"===q(i).position)?t:i||function(e){var t=-1!==navigator.userAgent.toLowerCase().indexOf("firefox");if(-1!==navigator.userAgent.indexOf("Trident")&&P(e)&&"fixed"===q(e).position)return null;var i=V(e);for(I(i)&&(i=i.host);P(i)&&["html","body"].indexOf(O(i))<0;){var n=q(i);if("none"!==n.transform||"none"!==n.perspective||"paint"===n.contain||-1!==["transform","perspective"].indexOf(n.willChange)||t&&"filter"===n.willChange||t&&n.filter&&"none"!==n.filter)return i;i=i.parentNode}return null}(e)||t}function K(e){return["top","bottom"].indexOf(e)>=0?"x":"y"}function U(e,t,i){return j(e,z(t,i))}function Q(e){return Object.assign({},{top:0,right:0,bottom:0,left:0},e)}function J(e,t){return t.reduce((function(t,i){return t[i]=e,t}),{})}var Z={name:"arrow",enabled:!0,phase:"main",fn:function(e){var t,i=e.state,n=e.name,s=e.options,c=i.elements.arrow,u=i.modifiersData.popperOffsets,p=N(i.placement),h=K(p),f=[l,a].indexOf(p)>=0?"height":"width";if(c&&u){var m=function(e,t){return Q("number"!=typeof(e="function"==typeof e?e(Object.assign({},t.rects,{placement:t.placement})):e)?e:J(e,d))}(s.padding,i),g=F(c),v="y"===h?r:l,b="y"===h?o:a,_=i.rects.reference[f]+i.rects.reference[h]-u[h]-i.rects.popper[f],w=u[h]-i.rects.reference[h],y=X(c),C=y?"y"===h?y.clientHeight||0:y.clientWidth||0:0,E=_/2-w/2,T=m[v],x=C-g[f]-m[b],S=C/2-g[f]/2+E,k=U(T,S,x),A=h;i.modifiersData[n]=((t={})[A]=k,t.centerOffset=k-S,t)}},effect:function(e){var t=e.state,i=e.options.element,n=void 0===i?"[data-popper-arrow]":i;null!=n&&("string"!=typeof n||(n=t.elements.popper.querySelector(n)))&&G(t.elements.popper,n)&&(t.elements.arrow=n)},requires:["popperOffsets"],requiresIfExists:["preventOverflow"]};function ee(e){return e.split("-")[1]}var te={top:"auto",right:"auto",bottom:"auto",left:"auto"};function ie(e){var t,i=e.popper,n=e.popperRect,s=e.placement,c=e.variation,d=e.offsets,u=e.position,h=e.gpuAcceleration,f=e.adaptive,m=e.roundOffsets,g=e.isFixed,v=d.x,b=void 0===v?0:v,_=d.y,w=void 0===_?0:_,y="function"==typeof m?m({x:b,y:w}):{x:b,y:w};b=y.x,w=y.y;var C=d.hasOwnProperty("x"),E=d.hasOwnProperty("y"),T=l,x=r,S=window;if(f){var k=X(i),A="clientHeight",O="clientWidth";if(k===L(i)&&"static"!==q(k=R(i)).position&&"absolute"===u&&(A="scrollHeight",O="scrollWidth"),s===r||(s===l||s===a)&&c===p)x=o,w-=(g&&k===S&&S.visualViewport?S.visualViewport.height:k[A])-n.height,w*=h?1:-1;if(s===l||(s===r||s===o)&&c===p)T=a,b-=(g&&k===S&&S.visualViewport?S.visualViewport.width:k[O])-n.width,b*=h?1:-1}var M,P=Object.assign({position:u},f&&te),I=!0===m?function(e){var t=e.x,i=e.y,n=window.devicePixelRatio||1;return{x:B(t*n)/n||0,y:B(i*n)/n||0}}({x:b,y:w}):{x:b,y:w};return b=I.x,w=I.y,h?Object.assign({},P,((M={})[x]=E?"0":"",M[T]=C?"0":"",M.transform=(S.devicePixelRatio||1)<=1?"translate("+b+"px, "+w+"px)":"translate3d("+b+"px, "+w+"px, 0)",M)):Object.assign({},P,((t={})[x]=E?w+"px":"",t[T]=C?b+"px":"",t.transform="",t))}var ne={name:"computeStyles",enabled:!0,phase:"beforeWrite",fn:function(e){var t=e.state,i=e.options,n=i.gpuAcceleration,s=void 0===n||n,r=i.adaptive,o=void 0===r||r,a=i.roundOffsets,l=void 0===a||a,c={placement:N(t.placement),variation:ee(t.placement),popper:t.elements.popper,popperRect:t.rects.popper,gpuAcceleration:s,isFixed:"fixed"===t.options.strategy};null!=t.modifiersData.popperOffsets&&(t.styles.popper=Object.assign({},t.styles.popper,ie(Object.assign({},c,{offsets:t.modifiersData.popperOffsets,position:t.options.strategy,adaptive:o,roundOffsets:l})))),null!=t.modifiersData.arrow&&(t.styles.arrow=Object.assign({},t.styles.arrow,ie(Object.assign({},c,{offsets:t.modifiersData.arrow,position:"absolute",adaptive:!1,roundOffsets:l})))),t.attributes.popper=Object.assign({},t.attributes.popper,{"data-popper-placement":t.placement})},data:{}},se={passive:!0};var re={name:"eventListeners",enabled:!0,phase:"write",fn:function(){},effect:function(e){var t=e.state,i=e.instance,n=e.options,s=n.scroll,r=void 0===s||s,o=n.resize,a=void 0===o||o,l=L(t.elements.popper),c=[].concat(t.scrollParents.reference,t.scrollParents.popper);return r&&c.forEach((function(e){e.addEventListener("scroll",i.update,se)})),a&&l.addEventListener("resize",i.update,se),function(){r&&c.forEach((function(e){e.removeEventListener("scroll",i.update,se)})),a&&l.removeEventListener("resize",i.update,se)}},data:{}},oe={left:"right",right:"left",bottom:"top",top:"bottom"};function ae(e){return e.replace(/left|right|bottom|top/g,(function(e){return oe[e]}))}var le={start:"end",end:"start"};function ce(e){return e.replace(/start|end/g,(function(e){return le[e]}))}function de(e){var t=L(e);return{scrollLeft:t.pageXOffset,scrollTop:t.pageYOffset}}function ue(e){return H(R(e)).left+de(e).scrollLeft}function pe(e){var t=q(e),i=t.overflow,n=t.overflowX,s=t.overflowY;return/auto|scroll|overlay|hidden/.test(i+s+n)}function he(e){return["html","body","#document"].indexOf(O(e))>=0?e.ownerDocument.body:P(e)&&pe(e)?e:he(V(e))}function fe(e,t){var i;void 0===t&&(t=[]);var n=he(e),s=n===(null==(i=e.ownerDocument)?void 0:i.body),r=L(n),o=s?[r].concat(r.visualViewport||[],pe(n)?n:[]):n,a=t.concat(o);return s?a:a.concat(fe(V(o)))}function me(e){return Object.assign({},e,{left:e.x,top:e.y,right:e.x+e.width,bottom:e.y+e.height})}function ge(e,t){return t===f?me(function(e){var t=L(e),i=R(e),n=t.visualViewport,s=i.clientWidth,r=i.clientHeight,o=0,a=0;return n&&(s=n.width,r=n.height,/^((?!chrome|android).)*safari/i.test(navigator.userAgent)||(o=n.offsetLeft,a=n.offsetTop)),{width:s,height:r,x:o+ue(e),y:a}}(e)):M(t)?function(e){var t=H(e);return t.top=t.top+e.clientTop,t.left=t.left+e.clientLeft,t.bottom=t.top+e.clientHeight,t.right=t.left+e.clientWidth,t.width=e.clientWidth,t.height=e.clientHeight,t.x=t.left,t.y=t.top,t}(t):me(function(e){var t,i=R(e),n=de(e),s=null==(t=e.ownerDocument)?void 0:t.body,r=j(i.scrollWidth,i.clientWidth,s?s.scrollWidth:0,s?s.clientWidth:0),o=j(i.scrollHeight,i.clientHeight,s?s.scrollHeight:0,s?s.clientHeight:0),a=-n.scrollLeft+ue(e),l=-n.scrollTop;return"rtl"===q(s||i).direction&&(a+=j(i.clientWidth,s?s.clientWidth:0)-r),{width:r,height:o,x:a,y:l}}(R(e)))}function ve(e,t,i){var n="clippingParents"===t?function(e){var t=fe(V(e)),i=["absolute","fixed"].indexOf(q(e).position)>=0&&P(e)?X(e):e;return M(i)?t.filter((function(e){return M(e)&&G(e,i)&&"body"!==O(e)})):[]}(e):[].concat(t),s=[].concat(n,[i]),r=s[0],o=s.reduce((function(t,i){var n=ge(e,i);return t.top=j(n.top,t.top),t.right=z(n.right,t.right),t.bottom=z(n.bottom,t.bottom),t.left=j(n.left,t.left),t}),ge(e,r));return o.width=o.right-o.left,o.height=o.bottom-o.top,o.x=o.left,o.y=o.top,o}function be(e){var t,i=e.reference,n=e.element,s=e.placement,c=s?N(s):null,d=s?ee(s):null,h=i.x+i.width/2-n.width/2,f=i.y+i.height/2-n.height/2;switch(c){case r:t={x:h,y:i.y-n.height};break;case o:t={x:h,y:i.y+i.height};break;case a:t={x:i.x+i.width,y:f};break;case l:t={x:i.x-n.width,y:f};break;default:t={x:i.x,y:i.y}}var m=c?K(c):null;if(null!=m){var g="y"===m?"height":"width";switch(d){case u:t[m]=t[m]-(i[g]/2-n[g]/2);break;case p:t[m]=t[m]+(i[g]/2-n[g]/2)}}return t}function _e(e,t){void 0===t&&(t={});var i=t,n=i.placement,s=void 0===n?e.placement:n,l=i.boundary,c=void 0===l?h:l,u=i.rootBoundary,p=void 0===u?f:u,v=i.elementContext,b=void 0===v?m:v,_=i.altBoundary,w=void 0!==_&&_,y=i.padding,C=void 0===y?0:y,E=Q("number"!=typeof C?C:J(C,d)),T=b===m?g:m,x=e.rects.popper,S=e.elements[w?T:b],k=ve(M(S)?S:S.contextElement||R(e.elements.popper),c,p),A=H(e.elements.reference),O=be({reference:A,element:x,strategy:"absolute",placement:s}),L=me(Object.assign({},x,O)),P=b===m?L:A,I={top:k.top-P.top+E.top,bottom:P.bottom-k.bottom+E.bottom,left:k.left-P.left+E.left,right:P.right-k.right+E.right},$=e.modifiersData.offset;if(b===m&&$){var D=$[s];Object.keys(I).forEach((function(e){var t=[a,o].indexOf(e)>=0?1:-1,i=[r,o].indexOf(e)>=0?"y":"x";I[e]+=D[i]*t}))}return I}var we={name:"flip",enabled:!0,phase:"main",fn:function(e){var t=e.state,i=e.options,n=e.name;if(!t.modifiersData[n]._skip){for(var s=i.mainAxis,p=void 0===s||s,h=i.altAxis,f=void 0===h||h,m=i.fallbackPlacements,g=i.padding,_=i.boundary,w=i.rootBoundary,y=i.altBoundary,C=i.flipVariations,E=void 0===C||C,T=i.allowedAutoPlacements,x=t.options.placement,S=N(x),k=m||(S===x||!E?[ae(x)]:function(e){if(N(e)===c)return[];var t=ae(e);return[ce(e),t,ce(t)]}(x)),A=[x].concat(k).reduce((function(e,i){return e.concat(N(i)===c?function(e,t){void 0===t&&(t={});var i=t,n=i.placement,s=i.boundary,r=i.rootBoundary,o=i.padding,a=i.flipVariations,l=i.allowedAutoPlacements,c=void 0===l?b:l,u=ee(n),p=u?a?v:v.filter((function(e){return ee(e)===u})):d,h=p.filter((function(e){return c.indexOf(e)>=0}));0===h.length&&(h=p);var f=h.reduce((function(t,i){return t[i]=_e(e,{placement:i,boundary:s,rootBoundary:r,padding:o})[N(i)],t}),{});return Object.keys(f).sort((function(e,t){return f[e]-f[t]}))}(t,{placement:i,boundary:_,rootBoundary:w,padding:g,flipVariations:E,allowedAutoPlacements:T}):i)}),[]),O=t.rects.reference,L=t.rects.popper,M=new Map,P=!0,I=A[0],$=0;$<A.length;$++){var D=A[$],j=N(D),z=ee(D)===u,B=[r,o].indexOf(j)>=0,H=B?"width":"height",F=_e(t,{placement:D,boundary:_,rootBoundary:w,altBoundary:y,padding:g}),G=B?z?a:l:z?o:r;O[H]>L[H]&&(G=ae(G));var q=ae(G),W=[];if(p&&W.push(F[j]<=0),f&&W.push(F[G]<=0,F[q]<=0),W.every((function(e){return e}))){I=D,P=!1;break}M.set(D,W)}if(P)for(var R=function(e){var t=A.find((function(t){var i=M.get(t);if(i)return i.slice(0,e).every((function(e){return e}))}));if(t)return I=t,"break"},V=E?3:1;V>0;V--){if("break"===R(V))break}t.placement!==I&&(t.modifiersData[n]._skip=!0,t.placement=I,t.reset=!0)}},requiresIfExists:["offset"],data:{_skip:!1}};function ye(e,t,i){return void 0===i&&(i={x:0,y:0}),{top:e.top-t.height-i.y,right:e.right-t.width+i.x,bottom:e.bottom-t.height+i.y,left:e.left-t.width-i.x}}function Ce(e){return[r,a,o,l].some((function(t){return e[t]>=0}))}var Ee={name:"hide",enabled:!0,phase:"main",requiresIfExists:["preventOverflow"],fn:function(e){var t=e.state,i=e.name,n=t.rects.reference,s=t.rects.popper,r=t.modifiersData.preventOverflow,o=_e(t,{elementContext:"reference"}),a=_e(t,{altBoundary:!0}),l=ye(o,n),c=ye(a,s,r),d=Ce(l),u=Ce(c);t.modifiersData[i]={referenceClippingOffsets:l,popperEscapeOffsets:c,isReferenceHidden:d,hasPopperEscaped:u},t.attributes.popper=Object.assign({},t.attributes.popper,{"data-popper-reference-hidden":d,"data-popper-escaped":u})}};var Te={name:"offset",enabled:!0,phase:"main",requires:["popperOffsets"],fn:function(e){var t=e.state,i=e.options,n=e.name,s=i.offset,o=void 0===s?[0,0]:s,c=b.reduce((function(e,i){return e[i]=function(e,t,i){var n=N(e),s=[l,r].indexOf(n)>=0?-1:1,o="function"==typeof i?i(Object.assign({},t,{placement:e})):i,c=o[0],d=o[1];return c=c||0,d=(d||0)*s,[l,a].indexOf(n)>=0?{x:d,y:c}:{x:c,y:d}}(i,t.rects,o),e}),{}),d=c[t.placement],u=d.x,p=d.y;null!=t.modifiersData.popperOffsets&&(t.modifiersData.popperOffsets.x+=u,t.modifiersData.popperOffsets.y+=p),t.modifiersData[n]=c}};var xe={name:"popperOffsets",enabled:!0,phase:"read",fn:function(e){var t=e.state,i=e.name;t.modifiersData[i]=be({reference:t.rects.reference,element:t.rects.popper,strategy:"absolute",placement:t.placement})},data:{}};var Se={name:"preventOverflow",enabled:!0,phase:"main",fn:function(e){var t=e.state,i=e.options,n=e.name,s=i.mainAxis,c=void 0===s||s,d=i.altAxis,p=void 0!==d&&d,h=i.boundary,f=i.rootBoundary,m=i.altBoundary,g=i.padding,v=i.tether,b=void 0===v||v,_=i.tetherOffset,w=void 0===_?0:_,y=_e(t,{boundary:h,rootBoundary:f,padding:g,altBoundary:m}),C=N(t.placement),E=ee(t.placement),T=!E,x=K(C),S="x"===x?"y":"x",k=t.modifiersData.popperOffsets,A=t.rects.reference,O=t.rects.popper,L="function"==typeof w?w(Object.assign({},t.rects,{placement:t.placement})):w,M="number"==typeof L?{mainAxis:L,altAxis:L}:Object.assign({mainAxis:0,altAxis:0},L),P=t.modifiersData.offset?t.modifiersData.offset[t.placement]:null,I={x:0,y:0};if(k){if(c){var $,D="y"===x?r:l,B="y"===x?o:a,H="y"===x?"height":"width",G=k[x],q=G+y[D],W=G-y[B],R=b?-O[H]/2:0,V=E===u?A[H]:O[H],Y=E===u?-O[H]:-A[H],Q=t.elements.arrow,J=b&&Q?F(Q):{width:0,height:0},Z=t.modifiersData["arrow#persistent"]?t.modifiersData["arrow#persistent"].padding:{top:0,right:0,bottom:0,left:0},te=Z[D],ie=Z[B],ne=U(0,A[H],J[H]),se=T?A[H]/2-R-ne-te-M.mainAxis:V-ne-te-M.mainAxis,re=T?-A[H]/2+R+ne+ie+M.mainAxis:Y+ne+ie+M.mainAxis,oe=t.elements.arrow&&X(t.elements.arrow),ae=oe?"y"===x?oe.clientTop||0:oe.clientLeft||0:0,le=null!=($=null==P?void 0:P[x])?$:0,ce=G+re-le,de=U(b?z(q,G+se-le-ae):q,G,b?j(W,ce):W);k[x]=de,I[x]=de-G}if(p){var ue,pe="x"===x?r:l,he="x"===x?o:a,fe=k[S],me="y"===S?"height":"width",ge=fe+y[pe],ve=fe-y[he],be=-1!==[r,l].indexOf(C),we=null!=(ue=null==P?void 0:P[S])?ue:0,ye=be?ge:fe-A[me]-O[me]-we+M.altAxis,Ce=be?fe+A[me]+O[me]-we-M.altAxis:ve,Ee=b&&be?function(e,t,i){var n=U(e,t,i);return n>i?i:n}(ye,fe,Ce):U(b?ye:ge,fe,b?Ce:ve);k[S]=Ee,I[S]=Ee-fe}t.modifiersData[n]=I}},requiresIfExists:["offset"]};function ke(e,t,i){void 0===i&&(i=!1);var n,s,r=P(t),o=P(t)&&function(e){var t=e.getBoundingClientRect(),i=B(t.width)/e.offsetWidth||1,n=B(t.height)/e.offsetHeight||1;return 1!==i||1!==n}(t),a=R(t),l=H(e,o),c={scrollLeft:0,scrollTop:0},d={x:0,y:0};return(r||!r&&!i)&&(("body"!==O(t)||pe(a))&&(c=(n=t)!==L(n)&&P(n)?{scrollLeft:(s=n).scrollLeft,scrollTop:s.scrollTop}:de(n)),P(t)?((d=H(t,!0)).x+=t.clientLeft,d.y+=t.clientTop):a&&(d.x=ue(a))),{x:l.left+c.scrollLeft-d.x,y:l.top+c.scrollTop-d.y,width:l.width,height:l.height}}function Ae(e){var t=new Map,i=new Set,n=[];function s(e){i.add(e.name),[].concat(e.requires||[],e.requiresIfExists||[]).forEach((function(e){if(!i.has(e)){var n=t.get(e);n&&s(n)}})),n.push(e)}return e.forEach((function(e){t.set(e.name,e)})),e.forEach((function(e){i.has(e.name)||s(e)})),n}var Oe={placement:"bottom",modifiers:[],strategy:"absolute"};function Le(){for(var e=arguments.length,t=new Array(e),i=0;i<e;i++)t[i]=arguments[i];return!t.some((function(e){return!(e&&"function"==typeof e.getBoundingClientRect)}))}function Me(e){void 0===e&&(e={});var t=e,i=t.defaultModifiers,n=void 0===i?[]:i,s=t.defaultOptions,r=void 0===s?Oe:s;return function(e,t,i){void 0===i&&(i=r);var s,o,a={placement:"bottom",orderedModifiers:[],options:Object.assign({},Oe,r),modifiersData:{},elements:{reference:e,popper:t},attributes:{},styles:{}},l=[],c=!1,d={state:a,setOptions:function(i){var s="function"==typeof i?i(a.options):i;u(),a.options=Object.assign({},r,a.options,s),a.scrollParents={reference:M(e)?fe(e):e.contextElement?fe(e.contextElement):[],popper:fe(t)};var o=function(e){var t=Ae(e);return A.reduce((function(e,i){return e.concat(t.filter((function(e){return e.phase===i})))}),[])}(function(e){var t=e.reduce((function(e,t){var i=e[t.name];return e[t.name]=i?Object.assign({},i,t,{options:Object.assign({},i.options,t.options),data:Object.assign({},i.data,t.data)}):t,e}),{});return Object.keys(t).map((function(e){return t[e]}))}([].concat(n,a.options.modifiers)));return a.orderedModifiers=o.filter((function(e){return e.enabled})),a.orderedModifiers.forEach((function(e){var t=e.name,i=e.options,n=void 0===i?{}:i,s=e.effect;if("function"==typeof s){var r=s({state:a,name:t,instance:d,options:n}),o=function(){};l.push(r||o)}})),d.update()},forceUpdate:function(){if(!c){var e=a.elements,t=e.reference,i=e.popper;if(Le(t,i)){a.rects={reference:ke(t,X(i),"fixed"===a.options.strategy),popper:F(i)},a.reset=!1,a.placement=a.options.placement,a.orderedModifiers.forEach((function(e){return a.modifiersData[e.name]=Object.assign({},e.data)}));for(var n=0;n<a.orderedModifiers.length;n++)if(!0!==a.reset){var s=a.orderedModifiers[n],r=s.fn,o=s.options,l=void 0===o?{}:o,u=s.name;"function"==typeof r&&(a=r({state:a,options:l,name:u,instance:d})||a)}else a.reset=!1,n=-1}}},update:(s=function(){return new Promise((function(e){d.forceUpdate(),e(a)}))},function(){return o||(o=new Promise((function(e){Promise.resolve().then((function(){o=void 0,e(s())}))}))),o}),destroy:function(){u(),c=!0}};if(!Le(e,t))return d;function u(){l.forEach((function(e){return e()})),l=[]}return d.setOptions(i).then((function(e){!c&&i.onFirstUpdate&&i.onFirstUpdate(e)})),d}}var Pe=Me(),Ie=Me({defaultModifiers:[re,xe,ne,D,Te,we,Se,Z,Ee]}),$e=Me({defaultModifiers:[re,xe,ne,D]});
/*!
  * Bootstrap v5.2.0-beta1 (https://getbootstrap.com/)
  * Copyright 2011-2022 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)
  * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
  */
const De="transitionend",Ne=e=>{let t=e.getAttribute("data-bs-target");if(!t||"#"===t){let i=e.getAttribute("href");if(!i||!i.includes("#")&&!i.startsWith("."))return null;i.includes("#")&&!i.startsWith("#")&&(i=`#${i.split("#")[1]}`),t=i&&"#"!==i?i.trim():null}return t},je=e=>{const t=Ne(e);return t&&document.querySelector(t)?t:null},ze=e=>{const t=Ne(e);return t?document.querySelector(t):null},Be=e=>{e.dispatchEvent(new Event(De))},He=e=>!(!e||"object"!=typeof e)&&(void 0!==e.jquery&&(e=e[0]),void 0!==e.nodeType),Fe=e=>He(e)?e.jquery?e[0]:e:"string"==typeof e&&e.length>0?document.querySelector(e):null,Ge=e=>{if(!He(e)||0===e.getClientRects().length)return!1;const t="visible"===getComputedStyle(e).getPropertyValue("visibility"),i=e.closest("details:not([open])");if(!i)return t;if(i!==e){const t=e.closest("summary");if(t&&t.parentNode!==i)return!1;if(null===t)return!1}return t},qe=e=>!e||e.nodeType!==Node.ELEMENT_NODE||(!!e.classList.contains("disabled")||(void 0!==e.disabled?e.disabled:e.hasAttribute("disabled")&&"false"!==e.getAttribute("disabled"))),We=e=>{if(!document.documentElement.attachShadow)return null;if("function"==typeof e.getRootNode){const t=e.getRootNode();return t instanceof ShadowRoot?t:null}return e instanceof ShadowRoot?e:e.parentNode?We(e.parentNode):null},Re=()=>{},Ve=e=>{e.offsetHeight},Ye=()=>window.jQuery&&!document.body.hasAttribute("data-bs-no-jquery")?window.jQuery:null,Xe=[],Ke=()=>"rtl"===document.documentElement.dir,Ue=e=>{var t;t=()=>{const t=Ye();if(t){const i=e.NAME,n=t.fn[i];t.fn[i]=e.jQueryInterface,t.fn[i].Constructor=e,t.fn[i].noConflict=()=>(t.fn[i]=n,e.jQueryInterface)}},"loading"===document.readyState?(Xe.length||document.addEventListener("DOMContentLoaded",(()=>{for(const e of Xe)e()})),Xe.push(t)):t()},Qe=e=>{"function"==typeof e&&e()},Je=(e,t,i=!0)=>{if(!i)return void Qe(e);const n=(e=>{if(!e)return 0;let{transitionDuration:t,transitionDelay:i}=window.getComputedStyle(e);const n=Number.parseFloat(t),s=Number.parseFloat(i);return n||s?(t=t.split(",")[0],i=i.split(",")[0],1e3*(Number.parseFloat(t)+Number.parseFloat(i))):0})(t)+5;let s=!1;const r=({target:i})=>{i===t&&(s=!0,t.removeEventListener(De,r),Qe(e))};t.addEventListener(De,r),setTimeout((()=>{s||Be(t)}),n)},Ze=(e,t,i,n)=>{const s=e.length;let r=e.indexOf(t);return-1===r?!i&&n?e[s-1]:e[0]:(r+=i?1:-1,n&&(r=(r+s)%s),e[Math.max(0,Math.min(r,s-1))])},et=/[^.]*(?=\..*)\.|.*/,tt=/\..*/,it=/::\d+$/,nt={};let st=1;const rt={mouseenter:"mouseover",mouseleave:"mouseout"},ot=new Set(["click","dblclick","mouseup","mousedown","contextmenu","mousewheel","DOMMouseScroll","mouseover","mouseout","mousemove","selectstart","selectend","keydown","keypress","keyup","orientationchange","touchstart","touchmove","touchend","touchcancel","pointerdown","pointermove","pointerup","pointerleave","pointercancel","gesturestart","gesturechange","gestureend","focus","blur","change","reset","select","submit","focusin","focusout","load","unload","beforeunload","resize","move","DOMContentLoaded","readystatechange","error","abort","scroll"]);function at(e,t){return t&&`${t}::${st++}`||e.uidEvent||st++}function lt(e){const t=at(e);return e.uidEvent=t,nt[t]=nt[t]||{},nt[t]}function ct(e,t,i=null){return Object.values(e).find((e=>e.originalHandler===t&&e.delegationSelector===i))}function dt(e,t,i){const n="string"==typeof t,s=n?i:t;let r=ft(e);return ot.has(r)||(r=e),[n,s,r]}function ut(e,t,i,n,s){if("string"!=typeof t||!e)return;if(i||(i=n,n=null),t in rt){const e=e=>function(t){if(!t.relatedTarget||t.relatedTarget!==t.delegateTarget&&!t.delegateTarget.contains(t.relatedTarget))return e.call(this,t)};n?n=e(n):i=e(i)}const[r,o,a]=dt(t,i,n),l=lt(e),c=l[a]||(l[a]={}),d=ct(c,o,r?i:null);if(d)return void(d.oneOff=d.oneOff&&s);const u=at(o,t.replace(et,"")),p=r?function(e,t,i){return function n(s){const r=e.querySelectorAll(t);for(let{target:o}=s;o&&o!==this;o=o.parentNode)for(const a of r)if(a===o)return s.delegateTarget=o,n.oneOff&&mt.off(e,s.type,t,i),i.apply(o,[s])}}(e,i,n):function(e,t){return function i(n){return n.delegateTarget=e,i.oneOff&&mt.off(e,n.type,t),t.apply(e,[n])}}(e,i);p.delegationSelector=r?i:null,p.originalHandler=o,p.oneOff=s,p.uidEvent=u,c[u]=p,e.addEventListener(a,p,r)}function pt(e,t,i,n,s){const r=ct(t[i],n,s);r&&(e.removeEventListener(i,r,Boolean(s)),delete t[i][r.uidEvent])}function ht(e,t,i,n){const s=t[i]||{};for(const r of Object.keys(s))if(r.includes(n)){const n=s[r];pt(e,t,i,n.originalHandler,n.delegationSelector)}}function ft(e){return e=e.replace(tt,""),rt[e]||e}const mt={on(e,t,i,n){ut(e,t,i,n,!1)},one(e,t,i,n){ut(e,t,i,n,!0)},off(e,t,i,n){if("string"!=typeof t||!e)return;const[s,r,o]=dt(t,i,n),a=o!==t,l=lt(e),c=t.startsWith(".");if(void 0!==r){if(!l||!l[o])return;return void pt(e,l,o,r,s?i:null)}if(c)for(const i of Object.keys(l))ht(e,l,i,t.slice(1));const d=l[o]||{};for(const i of Object.keys(d)){const n=i.replace(it,"");if(!a||t.includes(n)){const t=d[i];pt(e,l,o,t.originalHandler,t.delegationSelector)}}},trigger(e,t,i){if("string"!=typeof t||!e)return null;const n=Ye();let s=null,r=!0,o=!0,a=!1;t!==ft(t)&&n&&(s=n.Event(t,i),n(e).trigger(s),r=!s.isPropagationStopped(),o=!s.isImmediatePropagationStopped(),a=s.isDefaultPrevented());const l=new Event(t,{bubbles:r,cancelable:!0});if(void 0!==i)for(const e of Object.keys(i))Object.defineProperty(l,e,{get:()=>i[e]});return a&&l.preventDefault(),o&&e.dispatchEvent(l),l.defaultPrevented&&s&&s.preventDefault(),l}},gt=new Map,vt={set(e,t,i){gt.has(e)||gt.set(e,new Map);const n=gt.get(e);n.has(t)||0===n.size?n.set(t,i):console.error(`Bootstrap doesn't allow more than one instance per element. Bound instance: ${Array.from(n.keys())[0]}.`)},get:(e,t)=>gt.has(e)&&gt.get(e).get(t)||null,remove(e,t){if(!gt.has(e))return;const i=gt.get(e);i.delete(t),0===i.size&&gt.delete(e)}};function bt(e){if("true"===e)return!0;if("false"===e)return!1;if(e===Number(e).toString())return Number(e);if(""===e||"null"===e)return null;if("string"!=typeof e)return e;try{return JSON.parse(decodeURIComponent(e))}catch(t){return e}}function _t(e){return e.replace(/[A-Z]/g,(e=>`-${e.toLowerCase()}`))}const wt={setDataAttribute(e,t,i){e.setAttribute(`data-bs-${_t(t)}`,i)},removeDataAttribute(e,t){e.removeAttribute(`data-bs-${_t(t)}`)},getDataAttributes(e){if(!e)return{};const t={},i=Object.keys(e.dataset).filter((e=>e.startsWith("bs")&&!e.startsWith("bsConfig")));for(const n of i){let i=n.replace(/^bs/,"");i=i.charAt(0).toLowerCase()+i.slice(1,i.length),t[i]=bt(e.dataset[n])}return t},getDataAttribute:(e,t)=>bt(e.getAttribute(`data-bs-${_t(t)}`))};class yt{static get Default(){return{}}static get DefaultType(){return{}}static get NAME(){throw new Error('You have to implement the static method "NAME", for each component!')}_getConfig(e){return e=this._mergeConfigObj(e),e=this._configAfterMerge(e),this._typeCheckConfig(e),e}_configAfterMerge(e){return e}_mergeConfigObj(e,t){const i=He(t)?wt.getDataAttribute(t,"config"):{};return{...this.constructor.Default,..."object"==typeof i?i:{},...He(t)?wt.getDataAttributes(t):{},..."object"==typeof e?e:{}}}_typeCheckConfig(e,t=this.constructor.DefaultType){for(const n of Object.keys(t)){const s=t[n],r=e[n],o=He(r)?"element":null==(i=r)?`${i}`:Object.prototype.toString.call(i).match(/\s([a-z]+)/i)[1].toLowerCase();if(!new RegExp(s).test(o))throw new TypeError(`${this.constructor.NAME.toUpperCase()}: Option "${n}" provided type "${o}" but expected type "${s}".`)}var i}}class Ct extends yt{constructor(e,t){super(),(e=Fe(e))&&(this._element=e,this._config=this._getConfig(t),vt.set(this._element,this.constructor.DATA_KEY,this))}dispose(){vt.remove(this._element,this.constructor.DATA_KEY),mt.off(this._element,this.constructor.EVENT_KEY);for(const e of Object.getOwnPropertyNames(this))this[e]=null}_queueCallback(e,t,i=!0){Je(e,t,i)}_getConfig(e){return e=this._mergeConfigObj(e,this._element),e=this._configAfterMerge(e),this._typeCheckConfig(e),e}static getInstance(e){return vt.get(Fe(e),this.DATA_KEY)}static getOrCreateInstance(e,t={}){return this.getInstance(e)||new this(e,"object"==typeof t?t:null)}static get VERSION(){return"5.2.0-beta1"}static get DATA_KEY(){return`bs.${this.NAME}`}static get EVENT_KEY(){return`.${this.DATA_KEY}`}static eventName(e){return`${e}${this.EVENT_KEY}`}}const Et=(e,t="hide")=>{const i=`click.dismiss${e.EVENT_KEY}`,n=e.NAME;mt.on(document,i,`[data-bs-dismiss="${n}"]`,(function(i){if(["A","AREA"].includes(this.tagName)&&i.preventDefault(),qe(this))return;const s=ze(this)||this.closest(`.${n}`);e.getOrCreateInstance(s)[t]()}))};class Tt extends Ct{static get NAME(){return"alert"}close(){if(mt.trigger(this._element,"close.bs.alert").defaultPrevented)return;this._element.classList.remove("show");const e=this._element.classList.contains("fade");this._queueCallback((()=>this._destroyElement()),this._element,e)}_destroyElement(){this._element.remove(),mt.trigger(this._element,"closed.bs.alert"),this.dispose()}static jQueryInterface(e){return this.each((function(){const t=Tt.getOrCreateInstance(this);if("string"==typeof e){if(void 0===t[e]||e.startsWith("_")||"constructor"===e)throw new TypeError(`No method named "${e}"`);t[e](this)}}))}}Et(Tt,"close"),Ue(Tt);const xt='[data-bs-toggle="button"]';class St extends Ct{static get NAME(){return"button"}toggle(){this._element.setAttribute("aria-pressed",this._element.classList.toggle("active"))}static jQueryInterface(e){return this.each((function(){const t=St.getOrCreateInstance(this);"toggle"===e&&t[e]()}))}}mt.on(document,"click.bs.button.data-api",xt,(e=>{e.preventDefault();const t=e.target.closest(xt);St.getOrCreateInstance(t).toggle()})),Ue(St);const kt={find:(e,t=document.documentElement)=>[].concat(...Element.prototype.querySelectorAll.call(t,e)),findOne:(e,t=document.documentElement)=>Element.prototype.querySelector.call(t,e),children:(e,t)=>[].concat(...e.children).filter((e=>e.matches(t))),parents(e,t){const i=[];let n=e.parentNode.closest(t);for(;n;)i.push(n),n=n.parentNode.closest(t);return i},prev(e,t){let i=e.previousElementSibling;for(;i;){if(i.matches(t))return[i];i=i.previousElementSibling}return[]},next(e,t){let i=e.nextElementSibling;for(;i;){if(i.matches(t))return[i];i=i.nextElementSibling}return[]},focusableChildren(e){const t=["a","button","input","textarea","select","details","[tabindex]",'[contenteditable="true"]'].map((e=>`${e}:not([tabindex^="-"])`)).join(",");return this.find(t,e).filter((e=>!qe(e)&&Ge(e)))}},At=".bs.swipe",Ot={leftCallback:null,rightCallback:null,endCallback:null},Lt={leftCallback:"(function|null)",rightCallback:"(function|null)",endCallback:"(function|null)"};class Mt extends yt{constructor(e,t){super(),this._element=e,e&&Mt.isSupported()&&(this._config=this._getConfig(t),this._deltaX=0,this._supportPointerEvents=Boolean(window.PointerEvent),this._initEvents())}static get Default(){return Ot}static get DefaultType(){return Lt}static get NAME(){return"swipe"}dispose(){mt.off(this._element,At)}_start(e){this._supportPointerEvents?this._eventIsPointerPenTouch(e)&&(this._deltaX=e.clientX):this._deltaX=e.touches[0].clientX}_end(e){this._eventIsPointerPenTouch(e)&&(this._deltaX=e.clientX-this._deltaX),this._handleSwipe(),Qe(this._config.endCallback)}_move(e){this._deltaX=e.touches&&e.touches.length>1?0:e.touches[0].clientX-this._deltaX}_handleSwipe(){const e=Math.abs(this._deltaX);if(e<=40)return;const t=e/this._deltaX;this._deltaX=0,t&&Qe(t>0?this._config.rightCallback:this._config.leftCallback)}_initEvents(){this._supportPointerEvents?(mt.on(this._element,"pointerdown.bs.swipe",(e=>this._start(e))),mt.on(this._element,"pointerup.bs.swipe",(e=>this._end(e))),this._element.classList.add("pointer-event")):(mt.on(this._element,"touchstart.bs.swipe",(e=>this._start(e))),mt.on(this._element,"touchmove.bs.swipe",(e=>this._move(e))),mt.on(this._element,"touchend.bs.swipe",(e=>this._end(e))))}_eventIsPointerPenTouch(e){return this._supportPointerEvents&&("pen"===e.pointerType||"touch"===e.pointerType)}static isSupported(){return"ontouchstart"in document.documentElement||navigator.maxTouchPoints>0}}const Pt="next",It="prev",$t="left",Dt="right",Nt="slid.bs.carousel",jt="carousel",zt="active",Bt=".active",Ht=".carousel-item",Ft={ArrowLeft:Dt,ArrowRight:$t},Gt={interval:5e3,keyboard:!0,pause:"hover",ride:!1,touch:!0,wrap:!0},qt={interval:"(number|boolean)",keyboard:"boolean",ride:"(boolean|string)",pause:"(string|boolean)",touch:"boolean",wrap:"boolean"};class Wt extends Ct{constructor(e,t){super(e,t),this._interval=null,this._activeElement=null,this._isSliding=!1,this.touchTimeout=null,this._swipeHelper=null,this._indicatorsElement=kt.findOne(".carousel-indicators",this._element),this._addEventListeners(),this._config.ride===jt&&this.cycle()}static get Default(){return Gt}static get DefaultType(){return qt}static get NAME(){return"carousel"}next(){this._slide(Pt)}nextWhenVisible(){!document.hidden&&Ge(this._element)&&this.next()}prev(){this._slide(It)}pause(){this._isSliding&&Be(this._element),this._clearInterval()}cycle(){this._clearInterval(),this._updateInterval(),this._interval=setInterval((()=>this.nextWhenVisible()),this._config.interval)}_maybeEnableCycle(){this._config.ride&&(this._isSliding?mt.one(this._element,Nt,(()=>this.cycle())):this.cycle())}to(e){const t=this._getItems();if(e>t.length-1||e<0)return;if(this._isSliding)return void mt.one(this._element,Nt,(()=>this.to(e)));const i=this._getItemIndex(this._getActive());if(i===e)return;const n=e>i?Pt:It;this._slide(n,t[e])}dispose(){this._swipeHelper&&this._swipeHelper.dispose(),super.dispose()}_configAfterMerge(e){return e.defaultInterval=e.interval,e}_addEventListeners(){this._config.keyboard&&mt.on(this._element,"keydown.bs.carousel",(e=>this._keydown(e))),"hover"===this._config.pause&&(mt.on(this._element,"mouseenter.bs.carousel",(()=>this.pause())),mt.on(this._element,"mouseleave.bs.carousel",(()=>this._maybeEnableCycle()))),this._config.touch&&Mt.isSupported()&&this._addTouchEventListeners()}_addTouchEventListeners(){for(const e of kt.find(".carousel-item img",this._element))mt.on(e,"dragstart.bs.carousel",(e=>e.preventDefault()));const e={leftCallback:()=>this._slide(this._directionToOrder($t)),rightCallback:()=>this._slide(this._directionToOrder(Dt)),endCallback:()=>{"hover"===this._config.pause&&(this.pause(),this.touchTimeout&&clearTimeout(this.touchTimeout),this.touchTimeout=setTimeout((()=>this._maybeEnableCycle()),500+this._config.interval))}};this._swipeHelper=new Mt(this._element,e)}_keydown(e){if(/input|textarea/i.test(e.target.tagName))return;const t=Ft[e.key];t&&(e.preventDefault(),this._slide(this._directionToOrder(t)))}_getItemIndex(e){return this._getItems().indexOf(e)}_setActiveIndicatorElement(e){if(!this._indicatorsElement)return;const t=kt.findOne(Bt,this._indicatorsElement);t.classList.remove(zt),t.removeAttribute("aria-current");const i=kt.findOne(`[data-bs-slide-to="${e}"]`,this._indicatorsElement);i&&(i.classList.add(zt),i.setAttribute("aria-current","true"))}_updateInterval(){const e=this._activeElement||this._getActive();if(!e)return;const t=Number.parseInt(e.getAttribute("data-bs-interval"),10);this._config.interval=t||this._config.defaultInterval}_slide(e,t=null){if(this._isSliding)return;const i=this._getActive(),n=e===Pt,s=t||Ze(this._getItems(),i,n,this._config.wrap);if(s===i)return;const r=this._getItemIndex(s),o=t=>mt.trigger(this._element,t,{relatedTarget:s,direction:this._orderToDirection(e),from:this._getItemIndex(i),to:r});if(o("slide.bs.carousel").defaultPrevented)return;if(!i||!s)return;const a=Boolean(this._interval);this.pause(),this._isSliding=!0,this._setActiveIndicatorElement(r),this._activeElement=s;const l=n?"carousel-item-start":"carousel-item-end",c=n?"carousel-item-next":"carousel-item-prev";s.classList.add(c),Ve(s),i.classList.add(l),s.classList.add(l);this._queueCallback((()=>{s.classList.remove(l,c),s.classList.add(zt),i.classList.remove(zt,c,l),this._isSliding=!1,o(Nt)}),i,this._isAnimated()),a&&this.cycle()}_isAnimated(){return this._element.classList.contains("slide")}_getActive(){return kt.findOne(".active.carousel-item",this._element)}_getItems(){return kt.find(Ht,this._element)}_clearInterval(){this._interval&&(clearInterval(this._interval),this._interval=null)}_directionToOrder(e){return Ke()?e===$t?It:Pt:e===$t?Pt:It}_orderToDirection(e){return Ke()?e===It?$t:Dt:e===It?Dt:$t}static jQueryInterface(e){return this.each((function(){const t=Wt.getOrCreateInstance(this,e);if("number"!=typeof e){if("string"==typeof e){if(void 0===t[e]||e.startsWith("_")||"constructor"===e)throw new TypeError(`No method named "${e}"`);t[e]()}}else t.to(e)}))}}mt.on(document,"click.bs.carousel.data-api","[data-bs-slide], [data-bs-slide-to]",(function(e){const t=ze(this);if(!t||!t.classList.contains(jt))return;e.preventDefault();const i=Wt.getOrCreateInstance(t),n=this.getAttribute("data-bs-slide-to");return n?(i.to(n),void i._maybeEnableCycle()):"next"===wt.getDataAttribute(this,"slide")?(i.next(),void i._maybeEnableCycle()):(i.prev(),void i._maybeEnableCycle())})),mt.on(window,"load.bs.carousel.data-api",(()=>{const e=kt.find('[data-bs-ride="carousel"]');for(const t of e)Wt.getOrCreateInstance(t)})),Ue(Wt);const Rt="show",Vt="collapse",Yt="collapsing",Xt='[data-bs-toggle="collapse"]',Kt={toggle:!0,parent:null},Ut={toggle:"boolean",parent:"(null|element)"};class Qt extends Ct{constructor(e,t){super(e,t),this._isTransitioning=!1,this._triggerArray=[];const i=kt.find(Xt);for(const e of i){const t=je(e),i=kt.find(t).filter((e=>e===this._element));null!==t&&i.length&&this._triggerArray.push(e)}this._initializeChildren(),this._config.parent||this._addAriaAndCollapsedClass(this._triggerArray,this._isShown()),this._config.toggle&&this.toggle()}static get Default(){return Kt}static get DefaultType(){return Ut}static get NAME(){return"collapse"}toggle(){this._isShown()?this.hide():this.show()}show(){if(this._isTransitioning||this._isShown())return;let e=[];if(this._config.parent&&(e=this._getFirstLevelChildren(".collapse.show, .collapse.collapsing").filter((e=>e!==this._element)).map((e=>Qt.getOrCreateInstance(e,{toggle:!1})))),e.length&&e[0]._isTransitioning)return;if(mt.trigger(this._element,"show.bs.collapse").defaultPrevented)return;for(const t of e)t.hide();const t=this._getDimension();this._element.classList.remove(Vt),this._element.classList.add(Yt),this._element.style[t]=0,this._addAriaAndCollapsedClass(this._triggerArray,!0),this._isTransitioning=!0;const i=`scroll${t[0].toUpperCase()+t.slice(1)}`;this._queueCallback((()=>{this._isTransitioning=!1,this._element.classList.remove(Yt),this._element.classList.add(Vt,Rt),this._element.style[t]="",mt.trigger(this._element,"shown.bs.collapse")}),this._element,!0),this._element.style[t]=`${this._element[i]}px`}hide(){if(this._isTransitioning||!this._isShown())return;if(mt.trigger(this._element,"hide.bs.collapse").defaultPrevented)return;const e=this._getDimension();this._element.style[e]=`${this._element.getBoundingClientRect()[e]}px`,Ve(this._element),this._element.classList.add(Yt),this._element.classList.remove(Vt,Rt);for(const e of this._triggerArray){const t=ze(e);t&&!this._isShown(t)&&this._addAriaAndCollapsedClass([e],!1)}this._isTransitioning=!0;this._element.style[e]="",this._queueCallback((()=>{this._isTransitioning=!1,this._element.classList.remove(Yt),this._element.classList.add(Vt),mt.trigger(this._element,"hidden.bs.collapse")}),this._element,!0)}_isShown(e=this._element){return e.classList.contains(Rt)}_configAfterMerge(e){return e.toggle=Boolean(e.toggle),e.parent=Fe(e.parent),e}_getDimension(){return this._element.classList.contains("collapse-horizontal")?"width":"height"}_initializeChildren(){if(!this._config.parent)return;const e=this._getFirstLevelChildren(Xt);for(const t of e){const e=ze(t);e&&this._addAriaAndCollapsedClass([t],this._isShown(e))}}_getFirstLevelChildren(e){const t=kt.find(":scope .collapse .collapse",this._config.parent);return kt.find(e,this._config.parent).filter((e=>!t.includes(e)))}_addAriaAndCollapsedClass(e,t){if(e.length)for(const i of e)i.classList.toggle("collapsed",!t),i.setAttribute("aria-expanded",t)}static jQueryInterface(e){const t={};return"string"==typeof e&&/show|hide/.test(e)&&(t.toggle=!1),this.each((function(){const i=Qt.getOrCreateInstance(this,t);if("string"==typeof e){if(void 0===i[e])throw new TypeError(`No method named "${e}"`);i[e]()}}))}}mt.on(document,"click.bs.collapse.data-api",Xt,(function(e){("A"===e.target.tagName||e.delegateTarget&&"A"===e.delegateTarget.tagName)&&e.preventDefault();const t=je(this),i=kt.find(t);for(const e of i)Qt.getOrCreateInstance(e,{toggle:!1}).toggle()})),Ue(Qt);const Jt="dropdown",Zt="ArrowUp",ei="ArrowDown",ti="click.bs.dropdown.data-api",ii="keydown.bs.dropdown.data-api",ni="show",si='[data-bs-toggle="dropdown"]:not(.disabled):not(:disabled)',ri=`${si}.show`,oi=".dropdown-menu",ai=Ke()?"top-end":"top-start",li=Ke()?"top-start":"top-end",ci=Ke()?"bottom-end":"bottom-start",di=Ke()?"bottom-start":"bottom-end",ui=Ke()?"left-start":"right-start",pi=Ke()?"right-start":"left-start",hi={offset:[0,2],boundary:"clippingParents",reference:"toggle",display:"dynamic",popperConfig:null,autoClose:!0},fi={offset:"(array|string|function)",boundary:"(string|element)",reference:"(string|element|object)",display:"string",popperConfig:"(null|object|function)",autoClose:"(boolean|string)"};class mi extends Ct{constructor(e,t){super(e,t),this._popper=null,this._parent=this._element.parentNode,this._menu=kt.findOne(oi,this._parent),this._inNavbar=this._detectNavbar()}static get Default(){return hi}static get DefaultType(){return fi}static get NAME(){return Jt}toggle(){return this._isShown()?this.hide():this.show()}show(){if(qe(this._element)||this._isShown())return;const e={relatedTarget:this._element};if(!mt.trigger(this._element,"show.bs.dropdown",e).defaultPrevented){if(this._createPopper(),"ontouchstart"in document.documentElement&&!this._parent.closest(".navbar-nav"))for(const e of[].concat(...document.body.children))mt.on(e,"mouseover",Re);this._element.focus(),this._element.setAttribute("aria-expanded",!0),this._menu.classList.add(ni),this._element.classList.add(ni),mt.trigger(this._element,"shown.bs.dropdown",e)}}hide(){if(qe(this._element)||!this._isShown())return;const e={relatedTarget:this._element};this._completeHide(e)}dispose(){this._popper&&this._popper.destroy(),super.dispose()}update(){this._inNavbar=this._detectNavbar(),this._popper&&this._popper.update()}_completeHide(e){if(!mt.trigger(this._element,"hide.bs.dropdown",e).defaultPrevented){if("ontouchstart"in document.documentElement)for(const e of[].concat(...document.body.children))mt.off(e,"mouseover",Re);this._popper&&this._popper.destroy(),this._menu.classList.remove(ni),this._element.classList.remove(ni),this._element.setAttribute("aria-expanded","false"),wt.removeDataAttribute(this._menu,"popper"),mt.trigger(this._element,"hidden.bs.dropdown",e)}}_getConfig(e){if("object"==typeof(e=super._getConfig(e)).reference&&!He(e.reference)&&"function"!=typeof e.reference.getBoundingClientRect)throw new TypeError(`${Jt.toUpperCase()}: Option "reference" provided type "object" without a required "getBoundingClientRect" method.`);return e}_createPopper(){if(void 0===e)throw new TypeError("Bootstrap's dropdowns require Popper (https://popper.js.org)");let t=this._element;"parent"===this._config.reference?t=this._parent:He(this._config.reference)?t=Fe(this._config.reference):"object"==typeof this._config.reference&&(t=this._config.reference);const i=this._getPopperConfig();this._popper=Ie(t,this._menu,i)}_isShown(){return this._menu.classList.contains(ni)}_getPlacement(){const e=this._parent;if(e.classList.contains("dropend"))return ui;if(e.classList.contains("dropstart"))return pi;if(e.classList.contains("dropup-center"))return"top";if(e.classList.contains("dropdown-center"))return"bottom";const t="end"===getComputedStyle(this._menu).getPropertyValue("--bs-position").trim();return e.classList.contains("dropup")?t?li:ai:t?di:ci}_detectNavbar(){return null!==this._element.closest(".navbar")}_getOffset(){const{offset:e}=this._config;return"string"==typeof e?e.split(",").map((e=>Number.parseInt(e,10))):"function"==typeof e?t=>e(t,this._element):e}_getPopperConfig(){const e={placement:this._getPlacement(),modifiers:[{name:"preventOverflow",options:{boundary:this._config.boundary}},{name:"offset",options:{offset:this._getOffset()}}]};return(this._inNavbar||"static"===this._config.display)&&(wt.setDataAttribute(this._menu,"popper","static"),e.modifiers=[{name:"applyStyles",enabled:!1}]),{...e,..."function"==typeof this._config.popperConfig?this._config.popperConfig(e):this._config.popperConfig}}_selectMenuItem({key:e,target:t}){const i=kt.find(".dropdown-menu .dropdown-item:not(.disabled):not(:disabled)",this._menu).filter((e=>Ge(e)));i.length&&Ze(i,t,e===ei,!i.includes(t)).focus()}static jQueryInterface(e){return this.each((function(){const t=mi.getOrCreateInstance(this,e);if("string"==typeof e){if(void 0===t[e])throw new TypeError(`No method named "${e}"`);t[e]()}}))}static clearMenus(e){if(2===e.button||"keyup"===e.type&&"Tab"!==e.key)return;const t=kt.find(ri);for(const i of t){const t=mi.getInstance(i);if(!t||!1===t._config.autoClose)continue;const n=e.composedPath(),s=n.includes(t._menu);if(n.includes(t._element)||"inside"===t._config.autoClose&&!s||"outside"===t._config.autoClose&&s)continue;if(t._menu.contains(e.target)&&("keyup"===e.type&&"Tab"===e.key||/input|select|option|textarea|form/i.test(e.target.tagName)))continue;const r={relatedTarget:t._element};"click"===e.type&&(r.clickEvent=e),t._completeHide(r)}}static dataApiKeydownHandler(e){const t=/input|textarea/i.test(e.target.tagName),i="Escape"===e.key,n=[Zt,ei].includes(e.key);if(!n&&!i)return;if(t&&!i)return;e.preventDefault();const s=kt.findOne(si,e.delegateTarget.parentNode),r=mi.getOrCreateInstance(s);if(n)return e.stopPropagation(),r.show(),void r._selectMenuItem(e);r._isShown()&&(e.stopPropagation(),r.hide(),s.focus())}}mt.on(document,ii,si,mi.dataApiKeydownHandler),mt.on(document,ii,oi,mi.dataApiKeydownHandler),mt.on(document,ti,mi.clearMenus),mt.on(document,"keyup.bs.dropdown.data-api",mi.clearMenus),mt.on(document,ti,si,(function(e){e.preventDefault(),mi.getOrCreateInstance(this).toggle()})),Ue(mi);const gi=".fixed-top, .fixed-bottom, .is-fixed, .sticky-top",vi=".sticky-top",bi="padding-right",_i="margin-right";class wi{constructor(){this._element=document.body}getWidth(){const e=document.documentElement.clientWidth;return Math.abs(window.innerWidth-e)}hide(){const e=this.getWidth();this._disableOverFlow(),this._setElementAttributes(this._element,bi,(t=>t+e)),this._setElementAttributes(gi,bi,(t=>t+e)),this._setElementAttributes(vi,_i,(t=>t-e))}reset(){this._resetElementAttributes(this._element,"overflow"),this._resetElementAttributes(this._element,bi),this._resetElementAttributes(gi,bi),this._resetElementAttributes(vi,_i)}isOverflowing(){return this.getWidth()>0}_disableOverFlow(){this._saveInitialAttribute(this._element,"overflow"),this._element.style.overflow="hidden"}_setElementAttributes(e,t,i){const n=this.getWidth();this._applyManipulationCallback(e,(e=>{if(e!==this._element&&window.innerWidth>e.clientWidth+n)return;this._saveInitialAttribute(e,t);const s=window.getComputedStyle(e).getPropertyValue(t);e.style.setProperty(t,`${i(Number.parseFloat(s))}px`)}))}_saveInitialAttribute(e,t){const i=e.style.getPropertyValue(t);i&&wt.setDataAttribute(e,t,i)}_resetElementAttributes(e,t){this._applyManipulationCallback(e,(e=>{const i=wt.getDataAttribute(e,t);null!==i?(wt.removeDataAttribute(e,t),e.style.setProperty(t,i)):e.style.removeProperty(t)}))}_applyManipulationCallback(e,t){if(He(e))t(e);else for(const i of kt.find(e,this._element))t(i)}}const yi="backdrop",Ci="show",Ei="mousedown.bs.backdrop",Ti={className:"modal-backdrop",isVisible:!0,isAnimated:!1,rootElement:"body",clickCallback:null},xi={className:"string",isVisible:"boolean",isAnimated:"boolean",rootElement:"(element|string)",clickCallback:"(function|null)"};class Si extends yt{constructor(e){super(),this._config=this._getConfig(e),this._isAppended=!1,this._element=null}static get Default(){return Ti}static get DefaultType(){return xi}static get NAME(){return yi}show(e){if(!this._config.isVisible)return void Qe(e);this._append();const t=this._getElement();this._config.isAnimated&&Ve(t),t.classList.add(Ci),this._emulateAnimation((()=>{Qe(e)}))}hide(e){this._config.isVisible?(this._getElement().classList.remove(Ci),this._emulateAnimation((()=>{this.dispose(),Qe(e)}))):Qe(e)}dispose(){this._isAppended&&(mt.off(this._element,Ei),this._element.remove(),this._isAppended=!1)}_getElement(){if(!this._element){const e=document.createElement("div");e.className=this._config.className,this._config.isAnimated&&e.classList.add("fade"),this._element=e}return this._element}_configAfterMerge(e){return e.rootElement=Fe(e.rootElement),e}_append(){if(this._isAppended)return;const e=this._getElement();this._config.rootElement.append(e),mt.on(e,Ei,(()=>{Qe(this._config.clickCallback)})),this._isAppended=!0}_emulateAnimation(e){Je(e,this._getElement(),this._config.isAnimated)}}const ki=".bs.focustrap",Ai="backward",Oi={trapElement:null,autofocus:!0},Li={trapElement:"element",autofocus:"boolean"};class Mi extends yt{constructor(e){super(),this._config=this._getConfig(e),this._isActive=!1,this._lastTabNavDirection=null}static get Default(){return Oi}static get DefaultType(){return Li}static get NAME(){return"focustrap"}activate(){this._isActive||(this._config.autofocus&&this._config.trapElement.focus(),mt.off(document,ki),mt.on(document,"focusin.bs.focustrap",(e=>this._handleFocusin(e))),mt.on(document,"keydown.tab.bs.focustrap",(e=>this._handleKeydown(e))),this._isActive=!0)}deactivate(){this._isActive&&(this._isActive=!1,mt.off(document,ki))}_handleFocusin(e){const{trapElement:t}=this._config;if(e.target===document||e.target===t||t.contains(e.target))return;const i=kt.focusableChildren(t);0===i.length?t.focus():this._lastTabNavDirection===Ai?i[i.length-1].focus():i[0].focus()}_handleKeydown(e){"Tab"===e.key&&(this._lastTabNavDirection=e.shiftKey?Ai:"forward")}}const Pi=".bs.modal",Ii="hidden.bs.modal",$i="show.bs.modal",Di="modal-open",Ni="show",ji="modal-static",zi={backdrop:!0,keyboard:!0,focus:!0},Bi={backdrop:"(boolean|string)",keyboard:"boolean",focus:"boolean"};class Hi extends Ct{constructor(e,t){super(e,t),this._dialog=kt.findOne(".modal-dialog",this._element),this._backdrop=this._initializeBackDrop(),this._focustrap=this._initializeFocusTrap(),this._isShown=!1,this._isTransitioning=!1,this._scrollBar=new wi,this._addEventListeners()}static get Default(){return zi}static get DefaultType(){return Bi}static get NAME(){return"modal"}toggle(e){return this._isShown?this.hide():this.show(e)}show(e){if(this._isShown||this._isTransitioning)return;mt.trigger(this._element,$i,{relatedTarget:e}).defaultPrevented||(this._isShown=!0,this._isTransitioning=!0,this._scrollBar.hide(),document.body.classList.add(Di),this._adjustDialog(),this._backdrop.show((()=>this._showElement(e))))}hide(){if(!this._isShown||this._isTransitioning)return;mt.trigger(this._element,"hide.bs.modal").defaultPrevented||(this._isShown=!1,this._isTransitioning=!0,this._focustrap.deactivate(),this._element.classList.remove(Ni),this._queueCallback((()=>this._hideModal()),this._element,this._isAnimated()))}dispose(){for(const e of[window,this._dialog])mt.off(e,Pi);this._backdrop.dispose(),this._focustrap.deactivate(),super.dispose()}handleUpdate(){this._adjustDialog()}_initializeBackDrop(){return new Si({isVisible:Boolean(this._config.backdrop),isAnimated:this._isAnimated()})}_initializeFocusTrap(){return new Mi({trapElement:this._element})}_showElement(e){document.body.contains(this._element)||document.body.append(this._element),this._element.style.display="block",this._element.removeAttribute("aria-hidden"),this._element.setAttribute("aria-modal",!0),this._element.setAttribute("role","dialog"),this._element.scrollTop=0;const t=kt.findOne(".modal-body",this._dialog);t&&(t.scrollTop=0),Ve(this._element),this._element.classList.add(Ni);this._queueCallback((()=>{this._config.focus&&this._focustrap.activate(),this._isTransitioning=!1,mt.trigger(this._element,"shown.bs.modal",{relatedTarget:e})}),this._dialog,this._isAnimated())}_addEventListeners(){mt.on(this._element,"keydown.dismiss.bs.modal",(e=>{if("Escape"===e.key)return this._config.keyboard?(e.preventDefault(),void this.hide()):void this._triggerBackdropTransition()})),mt.on(window,"resize.bs.modal",(()=>{this._isShown&&!this._isTransitioning&&this._adjustDialog()})),mt.on(this._element,"click.dismiss.bs.modal",(e=>{e.target===e.currentTarget&&("static"!==this._config.backdrop?this._config.backdrop&&this.hide():this._triggerBackdropTransition())}))}_hideModal(){this._element.style.display="none",this._element.setAttribute("aria-hidden",!0),this._element.removeAttribute("aria-modal"),this._element.removeAttribute("role"),this._isTransitioning=!1,this._backdrop.hide((()=>{document.body.classList.remove(Di),this._resetAdjustments(),this._scrollBar.reset(),mt.trigger(this._element,Ii)}))}_isAnimated(){return this._element.classList.contains("fade")}_triggerBackdropTransition(){if(mt.trigger(this._element,"hidePrevented.bs.modal").defaultPrevented)return;const e=this._element.scrollHeight>document.documentElement.clientHeight,t=this._element.style.overflowY;"hidden"===t||this._element.classList.contains(ji)||(e||(this._element.style.overflowY="hidden"),this._element.classList.add(ji),this._queueCallback((()=>{this._element.classList.remove(ji),this._queueCallback((()=>{this._element.style.overflowY=t}),this._dialog)}),this._dialog),this._element.focus())}_adjustDialog(){const e=this._element.scrollHeight>document.documentElement.clientHeight,t=this._scrollBar.getWidth(),i=t>0;if(i&&!e){const e=Ke()?"paddingLeft":"paddingRight";this._element.style[e]=`${t}px`}if(!i&&e){const e=Ke()?"paddingRight":"paddingLeft";this._element.style[e]=`${t}px`}}_resetAdjustments(){this._element.style.paddingLeft="",this._element.style.paddingRight=""}static jQueryInterface(e,t){return this.each((function(){const i=Hi.getOrCreateInstance(this,e);if("string"==typeof e){if(void 0===i[e])throw new TypeError(`No method named "${e}"`);i[e](t)}}))}}mt.on(document,"click.bs.modal.data-api",'[data-bs-toggle="modal"]',(function(e){const t=ze(this);["A","AREA"].includes(this.tagName)&&e.preventDefault(),mt.one(t,$i,(e=>{e.defaultPrevented||mt.one(t,Ii,(()=>{Ge(this)&&this.focus()}))}));const i=kt.findOne(".modal.show");i&&Hi.getInstance(i).hide();Hi.getOrCreateInstance(t).toggle(this)})),Et(Hi),Ue(Hi);const Fi="show",Gi="showing",qi="hiding",Wi=".offcanvas.show",Ri="hidePrevented.bs.offcanvas",Vi="hidden.bs.offcanvas",Yi={backdrop:!0,keyboard:!0,scroll:!1},Xi={backdrop:"(boolean|string)",keyboard:"boolean",scroll:"boolean"};class Ki extends Ct{constructor(e,t){super(e,t),this._isShown=!1,this._backdrop=this._initializeBackDrop(),this._focustrap=this._initializeFocusTrap(),this._addEventListeners()}static get Default(){return Yi}static get DefaultType(){return Xi}static get NAME(){return"offcanvas"}toggle(e){return this._isShown?this.hide():this.show(e)}show(e){if(this._isShown)return;if(mt.trigger(this._element,"show.bs.offcanvas",{relatedTarget:e}).defaultPrevented)return;this._isShown=!0,this._backdrop.show(),this._config.scroll||(new wi).hide(),this._element.setAttribute("aria-modal",!0),this._element.setAttribute("role","dialog"),this._element.classList.add(Gi);this._queueCallback((()=>{this._config.scroll||this._focustrap.activate(),this._element.classList.add(Fi),this._element.classList.remove(Gi),mt.trigger(this._element,"shown.bs.offcanvas",{relatedTarget:e})}),this._element,!0)}hide(){if(!this._isShown)return;if(mt.trigger(this._element,"hide.bs.offcanvas").defaultPrevented)return;this._focustrap.deactivate(),this._element.blur(),this._isShown=!1,this._element.classList.add(qi),this._backdrop.hide();this._queueCallback((()=>{this._element.classList.remove(Fi,qi),this._element.removeAttribute("aria-modal"),this._element.removeAttribute("role"),this._config.scroll||(new wi).reset(),mt.trigger(this._element,Vi)}),this._element,!0)}dispose(){this._backdrop.dispose(),this._focustrap.deactivate(),super.dispose()}_initializeBackDrop(){const e=Boolean(this._config.backdrop);return new Si({className:"offcanvas-backdrop",isVisible:e,isAnimated:!0,rootElement:this._element.parentNode,clickCallback:e?()=>{"static"!==this._config.backdrop?this.hide():mt.trigger(this._element,Ri)}:null})}_initializeFocusTrap(){return new Mi({trapElement:this._element})}_addEventListeners(){mt.on(this._element,"keydown.dismiss.bs.offcanvas",(e=>{"Escape"===e.key&&(this._config.keyboard?this.hide():mt.trigger(this._element,Ri))}))}static jQueryInterface(e){return this.each((function(){const t=Ki.getOrCreateInstance(this,e);if("string"==typeof e){if(void 0===t[e]||e.startsWith("_")||"constructor"===e)throw new TypeError(`No method named "${e}"`);t[e](this)}}))}}mt.on(document,"click.bs.offcanvas.data-api",'[data-bs-toggle="offcanvas"]',(function(e){const t=ze(this);if(["A","AREA"].includes(this.tagName)&&e.preventDefault(),qe(this))return;mt.one(t,Vi,(()=>{Ge(this)&&this.focus()}));const i=kt.findOne(Wi);i&&i!==t&&Ki.getInstance(i).hide();Ki.getOrCreateInstance(t).toggle(this)})),mt.on(window,"load.bs.offcanvas.data-api",(()=>{for(const e of kt.find(Wi))Ki.getOrCreateInstance(e).show()})),mt.on(window,"resize.bs.offcanvas",(()=>{for(const e of kt.find("[aria-modal][class*=show][class*=offcanvas-]"))"fixed"!==getComputedStyle(e).position&&Ki.getOrCreateInstance(e).hide()})),Et(Ki),Ue(Ki);const Ui=new Set(["background","cite","href","itemtype","longdesc","poster","src","xlink:href"]),Qi=/^(?:(?:https?|mailto|ftp|tel|file|sms):|[^#&/:?]*(?:[#/?]|$))/i,Ji=/^data:(?:image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\/(?:mpeg|mp4|ogg|webm)|audio\/(?:mp3|oga|ogg|opus));base64,[\d+/a-z]+=*$/i,Zi=(e,t)=>{const i=e.nodeName.toLowerCase();return t.includes(i)?!Ui.has(i)||Boolean(Qi.test(e.nodeValue)||Ji.test(e.nodeValue)):t.filter((e=>e instanceof RegExp)).some((e=>e.test(i)))},en={"*":["class","dir","id","lang","role",/^aria-[\w-]*$/i],a:["target","href","title","rel"],area:[],b:[],br:[],col:[],code:[],div:[],em:[],hr:[],h1:[],h2:[],h3:[],h4:[],h5:[],h6:[],i:[],img:["src","srcset","alt","title","width","height"],li:[],ol:[],p:[],pre:[],s:[],small:[],span:[],sub:[],sup:[],strong:[],u:[],ul:[]};const tn={extraClass:"",template:"<div></div>",content:{},html:!1,sanitize:!0,sanitizeFn:null,allowList:en},nn={extraClass:"(string|function)",template:"string",content:"object",html:"boolean",sanitize:"boolean",sanitizeFn:"(null|function)",allowList:"object"},sn={selector:"(string|element)",entry:"(string|element|function|null)"};class rn extends yt{constructor(e){super(),this._config=this._getConfig(e)}static get Default(){return tn}static get DefaultType(){return nn}static get NAME(){return"TemplateFactory"}getContent(){return Object.values(this._config.content).map((e=>this._resolvePossibleFunction(e))).filter(Boolean)}hasContent(){return this.getContent().length>0}changeContent(e){return this._checkContent(e),this._config.content={...this._config.content,...e},this}toHtml(){const e=document.createElement("div");e.innerHTML=this._maybeSanitize(this._config.template);for(const[t,i]of Object.entries(this._config.content))this._setContent(e,i,t);const t=e.children[0],i=this._resolvePossibleFunction(this._config.extraClass);return i&&t.classList.add(...i.split(" ")),t}_typeCheckConfig(e){super._typeCheckConfig(e),this._checkContent(e.content)}_checkContent(e){for(const[t,i]of Object.entries(e))super._typeCheckConfig({selector:t,entry:i},sn)}_setContent(e,t,i){const n=kt.findOne(i,e);n&&((t=this._resolvePossibleFunction(t))?He(t)?this._putElementInTemplate(Fe(t),n):this._config.html?n.innerHTML=this._maybeSanitize(t):n.textContent=t:n.remove())}_maybeSanitize(e){return this._config.sanitize?function(e,t,i){if(!e.length)return e;if(i&&"function"==typeof i)return i(e);const n=(new window.DOMParser).parseFromString(e,"text/html"),s=[].concat(...n.body.querySelectorAll("*"));for(const e of s){const i=e.nodeName.toLowerCase();if(!Object.keys(t).includes(i)){e.remove();continue}const n=[].concat(...e.attributes),s=[].concat(t["*"]||[],t[i]||[]);for(const t of n)Zi(t,s)||e.removeAttribute(t.nodeName)}return n.body.innerHTML}(e,this._config.allowList,this._config.sanitizeFn):e}_resolvePossibleFunction(e){return"function"==typeof e?e(this):e}_putElementInTemplate(e,t){if(this._config.html)return t.innerHTML="",void t.append(e);t.textContent=e.textContent}}const on=new Set(["sanitize","allowList","sanitizeFn"]),an="fade",ln="show",cn=".modal",dn="hide.bs.modal",un="hover",pn="focus",hn={AUTO:"auto",TOP:"top",RIGHT:Ke()?"left":"right",BOTTOM:"bottom",LEFT:Ke()?"right":"left"},fn={animation:!0,template:'<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',trigger:"hover focus",title:"",delay:0,html:!1,selector:!1,placement:"top",offset:[0,0],container:!1,fallbackPlacements:["top","right","bottom","left"],boundary:"clippingParents",customClass:"",sanitize:!0,sanitizeFn:null,allowList:en,popperConfig:null},mn={animation:"boolean",template:"string",title:"(string|element|function)",trigger:"string",delay:"(number|object)",html:"boolean",selector:"(string|boolean)",placement:"(string|function)",offset:"(array|string|function)",container:"(string|element|boolean)",fallbackPlacements:"array",boundary:"(string|element)",customClass:"(string|function)",sanitize:"boolean",sanitizeFn:"(null|function)",allowList:"object",popperConfig:"(null|object|function)"};class gn extends Ct{constructor(t,i){if(void 0===e)throw new TypeError("Bootstrap's tooltips require Popper (https://popper.js.org)");super(t,i),this._isEnabled=!0,this._timeout=0,this._isHovered=!1,this._activeTrigger={},this._popper=null,this._templateFactory=null,this.tip=null,this._setListeners()}static get Default(){return fn}static get DefaultType(){return mn}static get NAME(){return"tooltip"}enable(){this._isEnabled=!0}disable(){this._isEnabled=!1}toggleEnabled(){this._isEnabled=!this._isEnabled}toggle(e){if(this._isEnabled){if(e){const t=this._initializeOnDelegatedTarget(e);return t._activeTrigger.click=!t._activeTrigger.click,void(t._isWithActiveTrigger()?t._enter():t._leave())}this._isShown()?this._leave():this._enter()}}dispose(){clearTimeout(this._timeout),mt.off(this._element.closest(cn),dn,this._hideModalHandler),this.tip&&this.tip.remove(),this._disposePopper(),super.dispose()}show(){if("none"===this._element.style.display)throw new Error("Please use show on visible elements");if(!this._isWithContent()||!this._isEnabled)return;const e=mt.trigger(this._element,this.constructor.eventName("show")),t=(We(this._element)||this._element.ownerDocument.documentElement).contains(this._element);if(e.defaultPrevented||!t)return;const i=this._getTipElement();this._element.setAttribute("aria-describedby",i.getAttribute("id"));const{container:n}=this._config;if(this._element.ownerDocument.documentElement.contains(this.tip)||(n.append(i),mt.trigger(this._element,this.constructor.eventName("inserted"))),this._popper?this._popper.update():this._createPopper(i),i.classList.add(ln),"ontouchstart"in document.documentElement)for(const e of[].concat(...document.body.children))mt.on(e,"mouseover",Re);this._queueCallback((()=>{const e=this._isHovered;this._isHovered=!1,mt.trigger(this._element,this.constructor.eventName("shown")),e&&this._leave()}),this.tip,this._isAnimated())}hide(){if(!this._isShown())return;if(mt.trigger(this._element,this.constructor.eventName("hide")).defaultPrevented)return;const e=this._getTipElement();if(e.classList.remove(ln),"ontouchstart"in document.documentElement)for(const e of[].concat(...document.body.children))mt.off(e,"mouseover",Re);this._activeTrigger.click=!1,this._activeTrigger.focus=!1,this._activeTrigger.hover=!1,this._isHovered=!1;this._queueCallback((()=>{this._isWithActiveTrigger()||(this._isHovered||e.remove(),this._element.removeAttribute("aria-describedby"),mt.trigger(this._element,this.constructor.eventName("hidden")),this._disposePopper())}),this.tip,this._isAnimated())}update(){this._popper&&this._popper.update()}_isWithContent(){return Boolean(this._getTitle())}_getTipElement(){return this.tip||(this.tip=this._createTipElement(this._getContentForTemplate())),this.tip}_createTipElement(e){const t=this._getTemplateFactory(e).toHtml();if(!t)return null;t.classList.remove(an,ln),t.classList.add(`bs-${this.constructor.NAME}-auto`);const i=(e=>{do{e+=Math.floor(1e6*Math.random())}while(document.getElementById(e));return e})(this.constructor.NAME).toString();return t.setAttribute("id",i),this._isAnimated()&&t.classList.add(an),t}setContent(e){let t=!1;this.tip&&(t=this._isShown(),this.tip.remove(),this.tip=null),this._disposePopper(),this.tip=this._createTipElement(e),t&&this.show()}_getTemplateFactory(e){return this._templateFactory?this._templateFactory.changeContent(e):this._templateFactory=new rn({...this._config,content:e,extraClass:this._resolvePossibleFunction(this._config.customClass)}),this._templateFactory}_getContentForTemplate(){return{".tooltip-inner":this._getTitle()}}_getTitle(){return this._config.title}_initializeOnDelegatedTarget(e){return this.constructor.getOrCreateInstance(e.delegateTarget,this._getDelegateConfig())}_isAnimated(){return this._config.animation||this.tip&&this.tip.classList.contains(an)}_isShown(){return this.tip&&this.tip.classList.contains(ln)}_createPopper(e){const t="function"==typeof this._config.placement?this._config.placement.call(this,e,this._element):this._config.placement,i=hn[t.toUpperCase()];this._popper=Ie(this._element,e,this._getPopperConfig(i))}_getOffset(){const{offset:e}=this._config;return"string"==typeof e?e.split(",").map((e=>Number.parseInt(e,10))):"function"==typeof e?t=>e(t,this._element):e}_resolvePossibleFunction(e){return"function"==typeof e?e.call(this._element):e}_getPopperConfig(e){const t={placement:e,modifiers:[{name:"flip",options:{fallbackPlacements:this._config.fallbackPlacements}},{name:"offset",options:{offset:this._getOffset()}},{name:"preventOverflow",options:{boundary:this._config.boundary}},{name:"arrow",options:{element:`.${this.constructor.NAME}-arrow`}},{name:"preSetPlacement",enabled:!0,phase:"beforeMain",fn:e=>{this._getTipElement().setAttribute("data-popper-placement",e.state.placement)}}]};return{...t,..."function"==typeof this._config.popperConfig?this._config.popperConfig(t):this._config.popperConfig}}_setListeners(){const e=this._config.trigger.split(" ");for(const t of e)if("click"===t)mt.on(this._element,this.constructor.eventName("click"),this._config.selector,(e=>this.toggle(e)));else if("manual"!==t){const e=t===un?this.constructor.eventName("mouseenter"):this.constructor.eventName("focusin"),i=t===un?this.constructor.eventName("mouseleave"):this.constructor.eventName("focusout");mt.on(this._element,e,this._config.selector,(e=>{const t=this._initializeOnDelegatedTarget(e);t._activeTrigger["focusin"===e.type?pn:un]=!0,t._enter()})),mt.on(this._element,i,this._config.selector,(e=>{const t=this._initializeOnDelegatedTarget(e);t._activeTrigger["focusout"===e.type?pn:un]=t._element.contains(e.relatedTarget),t._leave()}))}this._hideModalHandler=()=>{this._element&&this.hide()},mt.on(this._element.closest(cn),dn,this._hideModalHandler),this._config.selector?this._config={...this._config,trigger:"manual",selector:""}:this._fixTitle()}_fixTitle(){const e=this._config.originalTitle;e&&(this._element.getAttribute("aria-label")||this._element.textContent||this._element.setAttribute("aria-label",e),this._element.removeAttribute("title"))}_enter(){this._isShown()||this._isHovered?this._isHovered=!0:(this._isHovered=!0,this._setTimeout((()=>{this._isHovered&&this.show()}),this._config.delay.show))}_leave(){this._isWithActiveTrigger()||(this._isHovered=!1,this._setTimeout((()=>{this._isHovered||this.hide()}),this._config.delay.hide))}_setTimeout(e,t){clearTimeout(this._timeout),this._timeout=setTimeout(e,t)}_isWithActiveTrigger(){return Object.values(this._activeTrigger).includes(!0)}_getConfig(e){const t=wt.getDataAttributes(this._element);for(const e of Object.keys(t))on.has(e)&&delete t[e];return e={...t,..."object"==typeof e&&e?e:{}},e=this._mergeConfigObj(e),e=this._configAfterMerge(e),this._typeCheckConfig(e),e}_configAfterMerge(e){return e.container=!1===e.container?document.body:Fe(e.container),"number"==typeof e.delay&&(e.delay={show:e.delay,hide:e.delay}),e.originalTitle=this._element.getAttribute("title")||"",e.title=this._resolvePossibleFunction(e.title)||e.originalTitle,"number"==typeof e.title&&(e.title=e.title.toString()),"number"==typeof e.content&&(e.content=e.content.toString()),e}_getDelegateConfig(){const e={};for(const t in this._config)this.constructor.Default[t]!==this._config[t]&&(e[t]=this._config[t]);return e}_disposePopper(){this._popper&&(this._popper.destroy(),this._popper=null)}static jQueryInterface(e){return this.each((function(){const t=gn.getOrCreateInstance(this,e);if("string"==typeof e){if(void 0===t[e])throw new TypeError(`No method named "${e}"`);t[e]()}}))}}Ue(gn);const vn={...gn.Default,placement:"right",offset:[0,8],trigger:"click",content:"",template:'<div class="popover" role="tooltip"><div class="popover-arrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>'},bn={...gn.DefaultType,content:"(null|string|element|function)"};class _n extends gn{static get Default(){return vn}static get DefaultType(){return bn}static get NAME(){return"popover"}_isWithContent(){return this._getTitle()||this._getContent()}_getContentForTemplate(){return{".popover-header":this._getTitle(),".popover-body":this._getContent()}}_getContent(){return this._resolvePossibleFunction(this._config.content)}static jQueryInterface(e){return this.each((function(){const t=_n.getOrCreateInstance(this,e);if("string"==typeof e){if(void 0===t[e])throw new TypeError(`No method named "${e}"`);t[e]()}}))}}Ue(_n);const wn="click.bs.scrollspy",yn="active",Cn="[href]",En={offset:null,rootMargin:"0px 0px -25%",smoothScroll:!1,target:null},Tn={offset:"(number|null)",rootMargin:"string",smoothScroll:"boolean",target:"element"};class xn extends Ct{constructor(e,t){super(e,t),this._targetLinks=new Map,this._observableSections=new Map,this._rootElement="visible"===getComputedStyle(this._element).overflowY?null:this._element,this._activeTarget=null,this._observer=null,this._previousScrollData={visibleEntryTop:0,parentScrollTop:0},this.refresh()}static get Default(){return En}static get DefaultType(){return Tn}static get NAME(){return"scrollspy"}refresh(){this._initializeTargetsAndObservables(),this._maybeEnableSmoothScroll(),this._observer?this._observer.disconnect():this._observer=this._getNewObserver();for(const e of this._observableSections.values())this._observer.observe(e)}dispose(){this._observer.disconnect(),super.dispose()}_configAfterMerge(e){return e.target=Fe(e.target)||document.body,e}_maybeEnableSmoothScroll(){this._config.smoothScroll&&(mt.off(this._config.target,wn),mt.on(this._config.target,wn,Cn,(e=>{const t=this._observableSections.get(e.target.hash);if(t){e.preventDefault();const i=this._rootElement||window,n=t.offsetTop-this._element.offsetTop;if(i.scrollTo)return void i.scrollTo({top:n});i.scrollTop=n}})))}_getNewObserver(){const e={root:this._rootElement,threshold:[.1,.5,1],rootMargin:this._getRootMargin()};return new IntersectionObserver((e=>this._observerCallback(e)),e)}_observerCallback(e){const t=e=>this._targetLinks.get(`#${e.target.id}`),i=e=>{this._previousScrollData.visibleEntryTop=e.target.offsetTop,this._process(t(e))},n=(this._rootElement||document.documentElement).scrollTop,s=n>=this._previousScrollData.parentScrollTop;this._previousScrollData.parentScrollTop=n;for(const r of e){if(!r.isIntersecting){this._activeTarget=null,this._clearActiveClass(t(r));continue}const e=r.target.offsetTop>=this._previousScrollData.visibleEntryTop;if(s&&e){if(i(r),!n)return}else s||e||i(r)}}_getRootMargin(){return this._config.offset?`${this._config.offset}px 0px -30%`:this._config.rootMargin}_initializeTargetsAndObservables(){this._targetLinks=new Map,this._observableSections=new Map;const e=kt.find(Cn,this._config.target);for(const t of e){if(!t.hash||qe(t))continue;const e=kt.findOne(t.hash,this._element);Ge(e)&&(this._targetLinks.set(t.hash,t),this._observableSections.set(t.hash,e))}}_process(e){this._activeTarget!==e&&(this._clearActiveClass(this._config.target),this._activeTarget=e,e.classList.add(yn),this._activateParents(e),mt.trigger(this._element,"activate.bs.scrollspy",{relatedTarget:e}))}_activateParents(e){if(e.classList.contains("dropdown-item"))kt.findOne(".dropdown-toggle",e.closest(".dropdown")).classList.add(yn);else for(const t of kt.parents(e,".nav, .list-group"))for(const e of kt.prev(t,".nav-link, .nav-item > .nav-link, .list-group-item"))e.classList.add(yn)}_clearActiveClass(e){e.classList.remove(yn);const t=kt.find("[href].active",e);for(const e of t)e.classList.remove(yn)}static jQueryInterface(e){return this.each((function(){const t=xn.getOrCreateInstance(this,e);if("string"==typeof e){if(void 0===t[e]||e.startsWith("_")||"constructor"===e)throw new TypeError(`No method named "${e}"`);t[e]()}}))}}mt.on(window,"load.bs.scrollspy.data-api",(()=>{for(const e of kt.find('[data-bs-spy="scroll"]'))xn.getOrCreateInstance(e)})),Ue(xn);const Sn="ArrowLeft",kn="ArrowRight",An="ArrowUp",On="ArrowDown",Ln="active",Mn="fade",Pn="show",In='[data-bs-toggle="tab"], [data-bs-toggle="pill"], [data-bs-toggle="list"]',$n=`.nav-link:not(.dropdown-toggle), .list-group-item:not(.dropdown-toggle), [role="tab"]:not(.dropdown-toggle), ${In}`;class Dn extends Ct{constructor(e){super(e),this._parent=this._element.closest('.list-group, .nav, [role="tablist"]'),this._parent&&(this._setInitialAttributes(this._parent,this._getChildren()),mt.on(this._element,"keydown.bs.tab",(e=>this._keydown(e))))}static get NAME(){return"tab"}show(){const e=this._element;if(this._elemIsActive(e))return;const t=this._getActiveElem(),i=t?mt.trigger(t,"hide.bs.tab",{relatedTarget:e}):null;mt.trigger(e,"show.bs.tab",{relatedTarget:t}).defaultPrevented||i&&i.defaultPrevented||(this._deactivate(t,e),this._activate(e,t))}_activate(e,t){if(!e)return;e.classList.add(Ln),this._activate(ze(e));const i=e.classList.contains(Mn);this._queueCallback((()=>{i&&e.classList.add(Pn),"tab"===e.getAttribute("role")&&(e.focus(),e.removeAttribute("tabindex"),e.setAttribute("aria-selected",!0),this._toggleDropDown(e,!0),mt.trigger(e,"shown.bs.tab",{relatedTarget:t}))}),e,i)}_deactivate(e,t){if(!e)return;e.classList.remove(Ln),e.blur(),this._deactivate(ze(e));const i=e.classList.contains(Mn);this._queueCallback((()=>{i&&e.classList.remove(Pn),"tab"===e.getAttribute("role")&&(e.setAttribute("aria-selected",!1),e.setAttribute("tabindex","-1"),this._toggleDropDown(e,!1),mt.trigger(e,"hidden.bs.tab",{relatedTarget:t}))}),e,i)}_keydown(e){if(![Sn,kn,An,On].includes(e.key))return;e.stopPropagation(),e.preventDefault();const t=[kn,On].includes(e.key),i=Ze(this._getChildren().filter((e=>!qe(e))),e.target,t,!0);i&&Dn.getOrCreateInstance(i).show()}_getChildren(){return kt.find($n,this._parent)}_getActiveElem(){return this._getChildren().find((e=>this._elemIsActive(e)))||null}_setInitialAttributes(e,t){this._setAttributeIfNotExists(e,"role","tablist");for(const e of t)this._setInitialAttributesOnChild(e)}_setInitialAttributesOnChild(e){e=this._getInnerElement(e);const t=this._elemIsActive(e),i=this._getOuterElement(e);e.setAttribute("aria-selected",t),i!==e&&this._setAttributeIfNotExists(i,"role","presentation"),t||e.setAttribute("tabindex","-1"),this._setAttributeIfNotExists(e,"role","tab"),this._setInitialAttributesOnTargetPanel(e)}_setInitialAttributesOnTargetPanel(e){const t=ze(e);t&&(this._setAttributeIfNotExists(t,"role","tabpanel"),e.id&&this._setAttributeIfNotExists(t,"aria-labelledby",`#${e.id}`))}_toggleDropDown(e,t){const i=this._getOuterElement(e);if(!i.classList.contains("dropdown"))return;const n=(e,n)=>{const s=kt.findOne(e,i);s&&s.classList.toggle(n,t)};n(".dropdown-toggle",Ln),n(".dropdown-menu",Pn),n(".dropdown-item",Ln),i.setAttribute("aria-expanded",t)}_setAttributeIfNotExists(e,t,i){e.hasAttribute(t)||e.setAttribute(t,i)}_elemIsActive(e){return e.classList.contains(Ln)}_getInnerElement(e){return e.matches($n)?e:kt.findOne($n,e)}_getOuterElement(e){return e.closest(".nav-item, .list-group-item")||e}static jQueryInterface(e){return this.each((function(){const t=Dn.getOrCreateInstance(this);if("string"==typeof e){if(void 0===t[e]||e.startsWith("_")||"constructor"===e)throw new TypeError(`No method named "${e}"`);t[e]()}}))}}mt.on(document,"click.bs.tab",In,(function(e){["A","AREA"].includes(this.tagName)&&e.preventDefault(),qe(this)||Dn.getOrCreateInstance(this).show()})),mt.on(window,"load.bs.tab",(()=>{for(const e of kt.find('.active[data-bs-toggle="tab"], .active[data-bs-toggle="pill"], .active[data-bs-toggle="list"]'))Dn.getOrCreateInstance(e)})),Ue(Dn);const Nn="hide",jn="show",zn="showing",Bn={animation:"boolean",autohide:"boolean",delay:"number"},Hn={animation:!0,autohide:!0,delay:5e3};class Fn extends Ct{constructor(e,t){super(e,t),this._timeout=null,this._hasMouseInteraction=!1,this._hasKeyboardInteraction=!1,this._setListeners()}static get Default(){return Hn}static get DefaultType(){return Bn}static get NAME(){return"toast"}show(){if(mt.trigger(this._element,"show.bs.toast").defaultPrevented)return;this._clearTimeout(),this._config.animation&&this._element.classList.add("fade");this._element.classList.remove(Nn),Ve(this._element),this._element.classList.add(jn,zn),this._queueCallback((()=>{this._element.classList.remove(zn),mt.trigger(this._element,"shown.bs.toast"),this._maybeScheduleHide()}),this._element,this._config.animation)}hide(){if(!this.isShown())return;if(mt.trigger(this._element,"hide.bs.toast").defaultPrevented)return;this._element.classList.add(zn),this._queueCallback((()=>{this._element.classList.add(Nn),this._element.classList.remove(zn,jn),mt.trigger(this._element,"hidden.bs.toast")}),this._element,this._config.animation)}dispose(){this._clearTimeout(),this.isShown()&&this._element.classList.remove(jn),super.dispose()}isShown(){return this._element.classList.contains(jn)}_maybeScheduleHide(){this._config.autohide&&(this._hasMouseInteraction||this._hasKeyboardInteraction||(this._timeout=setTimeout((()=>{this.hide()}),this._config.delay)))}_onInteraction(e,t){switch(e.type){case"mouseover":case"mouseout":this._hasMouseInteraction=t;break;case"focusin":case"focusout":this._hasKeyboardInteraction=t}if(t)return void this._clearTimeout();const i=e.relatedTarget;this._element===i||this._element.contains(i)||this._maybeScheduleHide()}_setListeners(){mt.on(this._element,"mouseover.bs.toast",(e=>this._onInteraction(e,!0))),mt.on(this._element,"mouseout.bs.toast",(e=>this._onInteraction(e,!1))),mt.on(this._element,"focusin.bs.toast",(e=>this._onInteraction(e,!0))),mt.on(this._element,"focusout.bs.toast",(e=>this._onInteraction(e,!1)))}_clearTimeout(){clearTimeout(this._timeout),this._timeout=null}static jQueryInterface(e){return this.each((function(){const t=Fn.getOrCreateInstance(this,e);if("string"==typeof e){if(void 0===t[e])throw new TypeError(`No method named "${e}"`);t[e](this)}}))}}Et(Fn),Ue(Fn);var Gn=function(){function e(){t(this,e),this.settings(),this.bindEvents()}return s(e,[{key:"settings",value:function(){this.videoBanner=document.querySelector(".banner-video")}},{key:"bindEvents",value:function(){var e=this;this.videoBanner&&(this.videoPlay=this.videoBanner.querySelector(".play"),this.video=this.videoBanner.querySelector("video"),this.videoPlay.addEventListener("click",(function(){e.video.play(),e.video.style.display="block"})))}}]),e}(),qn=i(732),Wn=i.n(qn);var Rn=function(){function e(){t(this,e),this.settings(),this.bindEvents()}return s(e,[{key:"settings",value:function(){this.btnSearchHeader=document.getElementById("btnSearchHeader"),this.inputSearchHeader=document.getElementById("inputSearchHeader"),this.containerSearchHeader=document.getElementById("containerSearchHeader"),this.closeSearchHeader=document.getElementById("closeSearchHeader")}},{key:"bindEvents",value:function(){var e=this;this.btnSearchHeader.addEventListener("click",(function(t){e.openSearch(t)})),this.closeSearchHeader.addEventListener("click",(function(){e.closeSearch()}))}},{key:"openSearch",value:function(e){"false"===this.btnSearchHeader.getAttribute("data-expended")&&(e.preventDefault(),e.stopPropagation(),this.btnSearchHeader.setAttribute("data-expended",!0),this.inputSearchHeader.focus(),this.containerSearchHeader.classList.add("show"))}},{key:"closeSearch",value:function(){this.btnSearchHeader.setAttribute("data-expended",!1),this.containerSearchHeader.classList.remove("show"),this.inputSearchHeader.value=""}}]),e}();function Vn(){var e,t,i;$("a").each((function(){$(this).hasClass("online-mss-btn")&&($(this).addClass("btn"),$(this).addClass("btn_accreditation")),-1!==$(this).html().indexOf("<img")&&$(this).addClass("inside-photo")})),$(".editor-content a").each((function(){"_blank"!==$(this).attr("target")||$(this).hasClass("inside-photo")||$(this).hasClass("npa-page_pdf-link")||$(this).html("<span>".concat($(this).html(),'</span><span class="icon"></span>'))})),new Gn,new(Wn())({elements_selector:".lazy",load_delay:300,callback_load:function(e){e.classList.add("is-loaded")},callback_error:function(e){e.classList.add("is-error")}}),e=$(".main-nav--nav").find(".current-lang").find("a").html(),$("#currLang").text(e),new Rn,t=document.getElementById("navbar"),i="sticky",window.addEventListener("scroll",(function(){window.pageYOffset>200?t.classList.add(i):t.classList.remove(i)})),window.addEventListener("error",(function(e){var t=e.message,i=e.filename,n=e.lineno,s=e.colno,r=e.error;console.log([t,i,n,s,r])}))}function Yn(e){return null!==e&&"object"==typeof e&&"constructor"in e&&e.constructor===Object}function Xn(e={},t={}){Object.keys(t).forEach((i=>{void 0===e[i]?e[i]=t[i]:Yn(t[i])&&Yn(e[i])&&Object.keys(t[i]).length>0&&Xn(e[i],t[i])}))}const Kn={body:{},addEventListener(){},removeEventListener(){},activeElement:{blur(){},nodeName:""},querySelector:()=>null,querySelectorAll:()=>[],getElementById:()=>null,createEvent:()=>({initEvent(){}}),createElement:()=>({children:[],childNodes:[],style:{},setAttribute(){},getElementsByTagName:()=>[]}),createElementNS:()=>({}),importNode:()=>null,location:{hash:"",host:"",hostname:"",href:"",origin:"",pathname:"",protocol:"",search:""}};function Un(){const e="undefined"!=typeof document?document:{};return Xn(e,Kn),e}const Qn={document:Kn,navigator:{userAgent:""},location:{hash:"",host:"",hostname:"",href:"",origin:"",pathname:"",protocol:"",search:""},history:{replaceState(){},pushState(){},go(){},back(){}},CustomEvent:function(){return this},addEventListener(){},removeEventListener(){},getComputedStyle:()=>({getPropertyValue:()=>""}),Image(){},Date(){},screen:{},setTimeout(){},clearTimeout(){},matchMedia:()=>({}),requestAnimationFrame:e=>"undefined"==typeof setTimeout?(e(),null):setTimeout(e,0),cancelAnimationFrame(e){"undefined"!=typeof setTimeout&&clearTimeout(e)}};function Jn(){const e="undefined"!=typeof window?window:{};return Xn(e,Qn),e}class Zn extends Array{constructor(e){"number"==typeof e?super(e):(super(...e||[]),function(e){const t=e.__proto__;Object.defineProperty(e,"__proto__",{get:()=>t,set(e){t.__proto__=e}})}(this))}}function es(e=[]){const t=[];return e.forEach((e=>{Array.isArray(e)?t.push(...es(e)):t.push(e)})),t}function ts(e,t){return Array.prototype.filter.call(e,t)}function is(e,t){const i=Jn(),n=Un();let s=[];if(!t&&e instanceof Zn)return e;if(!e)return new Zn(s);if("string"==typeof e){const i=e.trim();if(i.indexOf("<")>=0&&i.indexOf(">")>=0){let e="div";0===i.indexOf("<li")&&(e="ul"),0===i.indexOf("<tr")&&(e="tbody"),0!==i.indexOf("<td")&&0!==i.indexOf("<th")||(e="tr"),0===i.indexOf("<tbody")&&(e="table"),0===i.indexOf("<option")&&(e="select");const t=n.createElement(e);t.innerHTML=i;for(let e=0;e<t.childNodes.length;e+=1)s.push(t.childNodes[e])}else s=function(e,t){if("string"!=typeof e)return[e];const i=[],n=t.querySelectorAll(e);for(let e=0;e<n.length;e+=1)i.push(n[e]);return i}(e.trim(),t||n)}else if(e.nodeType||e===i||e===n)s.push(e);else if(Array.isArray(e)){if(e instanceof Zn)return e;s=e}return new Zn(function(e){const t=[];for(let i=0;i<e.length;i+=1)-1===t.indexOf(e[i])&&t.push(e[i]);return t}(s))}is.fn=Zn.prototype;const ns="resize scroll".split(" ");function ss(e){return function(...t){if(void 0===t[0]){for(let t=0;t<this.length;t+=1)ns.indexOf(e)<0&&(e in this[t]?this[t][e]():is(this[t]).trigger(e));return this}return this.on(e,...t)}}ss("click"),ss("blur"),ss("focus"),ss("focusin"),ss("focusout"),ss("keyup"),ss("keydown"),ss("keypress"),ss("submit"),ss("change"),ss("mousedown"),ss("mousemove"),ss("mouseup"),ss("mouseenter"),ss("mouseleave"),ss("mouseout"),ss("mouseover"),ss("touchstart"),ss("touchend"),ss("touchmove"),ss("resize"),ss("scroll");const rs={addClass:function(...e){const t=es(e.map((e=>e.split(" "))));return this.forEach((e=>{e.classList.add(...t)})),this},removeClass:function(...e){const t=es(e.map((e=>e.split(" "))));return this.forEach((e=>{e.classList.remove(...t)})),this},hasClass:function(...e){const t=es(e.map((e=>e.split(" "))));return ts(this,(e=>t.filter((t=>e.classList.contains(t))).length>0)).length>0},toggleClass:function(...e){const t=es(e.map((e=>e.split(" "))));this.forEach((e=>{t.forEach((t=>{e.classList.toggle(t)}))}))},attr:function(e,t){if(1===arguments.length&&"string"==typeof e)return this[0]?this[0].getAttribute(e):void 0;for(let i=0;i<this.length;i+=1)if(2===arguments.length)this[i].setAttribute(e,t);else for(const t in e)this[i][t]=e[t],this[i].setAttribute(t,e[t]);return this},removeAttr:function(e){for(let t=0;t<this.length;t+=1)this[t].removeAttribute(e);return this},transform:function(e){for(let t=0;t<this.length;t+=1)this[t].style.transform=e;return this},transition:function(e){for(let t=0;t<this.length;t+=1)this[t].style.transitionDuration="string"!=typeof e?`${e}ms`:e;return this},on:function(...e){let[t,i,n,s]=e;function r(e){const t=e.target;if(!t)return;const s=e.target.dom7EventData||[];if(s.indexOf(e)<0&&s.unshift(e),is(t).is(i))n.apply(t,s);else{const e=is(t).parents();for(let t=0;t<e.length;t+=1)is(e[t]).is(i)&&n.apply(e[t],s)}}function o(e){const t=e&&e.target&&e.target.dom7EventData||[];t.indexOf(e)<0&&t.unshift(e),n.apply(this,t)}"function"==typeof e[1]&&([t,n,s]=e,i=void 0),s||(s=!1);const a=t.split(" ");let l;for(let e=0;e<this.length;e+=1){const t=this[e];if(i)for(l=0;l<a.length;l+=1){const e=a[l];t.dom7LiveListeners||(t.dom7LiveListeners={}),t.dom7LiveListeners[e]||(t.dom7LiveListeners[e]=[]),t.dom7LiveListeners[e].push({listener:n,proxyListener:r}),t.addEventListener(e,r,s)}else for(l=0;l<a.length;l+=1){const e=a[l];t.dom7Listeners||(t.dom7Listeners={}),t.dom7Listeners[e]||(t.dom7Listeners[e]=[]),t.dom7Listeners[e].push({listener:n,proxyListener:o}),t.addEventListener(e,o,s)}}return this},off:function(...e){let[t,i,n,s]=e;"function"==typeof e[1]&&([t,n,s]=e,i=void 0),s||(s=!1);const r=t.split(" ");for(let e=0;e<r.length;e+=1){const t=r[e];for(let e=0;e<this.length;e+=1){const r=this[e];let o;if(!i&&r.dom7Listeners?o=r.dom7Listeners[t]:i&&r.dom7LiveListeners&&(o=r.dom7LiveListeners[t]),o&&o.length)for(let e=o.length-1;e>=0;e-=1){const i=o[e];n&&i.listener===n||n&&i.listener&&i.listener.dom7proxy&&i.listener.dom7proxy===n?(r.removeEventListener(t,i.proxyListener,s),o.splice(e,1)):n||(r.removeEventListener(t,i.proxyListener,s),o.splice(e,1))}}}return this},trigger:function(...e){const t=Jn(),i=e[0].split(" "),n=e[1];for(let s=0;s<i.length;s+=1){const r=i[s];for(let i=0;i<this.length;i+=1){const s=this[i];if(t.CustomEvent){const i=new t.CustomEvent(r,{detail:n,bubbles:!0,cancelable:!0});s.dom7EventData=e.filter(((e,t)=>t>0)),s.dispatchEvent(i),s.dom7EventData=[],delete s.dom7EventData}}}return this},transitionEnd:function(e){const t=this;return e&&t.on("transitionend",(function i(n){n.target===this&&(e.call(this,n),t.off("transitionend",i))})),this},outerWidth:function(e){if(this.length>0){if(e){const e=this.styles();return this[0].offsetWidth+parseFloat(e.getPropertyValue("margin-right"))+parseFloat(e.getPropertyValue("margin-left"))}return this[0].offsetWidth}return null},outerHeight:function(e){if(this.length>0){if(e){const e=this.styles();return this[0].offsetHeight+parseFloat(e.getPropertyValue("margin-top"))+parseFloat(e.getPropertyValue("margin-bottom"))}return this[0].offsetHeight}return null},styles:function(){const e=Jn();return this[0]?e.getComputedStyle(this[0],null):{}},offset:function(){if(this.length>0){const e=Jn(),t=Un(),i=this[0],n=i.getBoundingClientRect(),s=t.body,r=i.clientTop||s.clientTop||0,o=i.clientLeft||s.clientLeft||0,a=i===e?e.scrollY:i.scrollTop,l=i===e?e.scrollX:i.scrollLeft;return{top:n.top+a-r,left:n.left+l-o}}return null},css:function(e,t){const i=Jn();let n;if(1===arguments.length){if("string"!=typeof e){for(n=0;n<this.length;n+=1)for(const t in e)this[n].style[t]=e[t];return this}if(this[0])return i.getComputedStyle(this[0],null).getPropertyValue(e)}if(2===arguments.length&&"string"==typeof e){for(n=0;n<this.length;n+=1)this[n].style[e]=t;return this}return this},each:function(e){return e?(this.forEach(((t,i)=>{e.apply(t,[t,i])})),this):this},html:function(e){if(void 0===e)return this[0]?this[0].innerHTML:null;for(let t=0;t<this.length;t+=1)this[t].innerHTML=e;return this},text:function(e){if(void 0===e)return this[0]?this[0].textContent.trim():null;for(let t=0;t<this.length;t+=1)this[t].textContent=e;return this},is:function(e){const t=Jn(),i=Un(),n=this[0];let s,r;if(!n||void 0===e)return!1;if("string"==typeof e){if(n.matches)return n.matches(e);if(n.webkitMatchesSelector)return n.webkitMatchesSelector(e);if(n.msMatchesSelector)return n.msMatchesSelector(e);for(s=is(e),r=0;r<s.length;r+=1)if(s[r]===n)return!0;return!1}if(e===i)return n===i;if(e===t)return n===t;if(e.nodeType||e instanceof Zn){for(s=e.nodeType?[e]:e,r=0;r<s.length;r+=1)if(s[r]===n)return!0;return!1}return!1},index:function(){let e,t=this[0];if(t){for(e=0;null!==(t=t.previousSibling);)1===t.nodeType&&(e+=1);return e}},eq:function(e){if(void 0===e)return this;const t=this.length;if(e>t-1)return is([]);if(e<0){const i=t+e;return is(i<0?[]:[this[i]])}return is([this[e]])},append:function(...e){let t;const i=Un();for(let n=0;n<e.length;n+=1){t=e[n];for(let e=0;e<this.length;e+=1)if("string"==typeof t){const n=i.createElement("div");for(n.innerHTML=t;n.firstChild;)this[e].appendChild(n.firstChild)}else if(t instanceof Zn)for(let i=0;i<t.length;i+=1)this[e].appendChild(t[i]);else this[e].appendChild(t)}return this},prepend:function(e){const t=Un();let i,n;for(i=0;i<this.length;i+=1)if("string"==typeof e){const s=t.createElement("div");for(s.innerHTML=e,n=s.childNodes.length-1;n>=0;n-=1)this[i].insertBefore(s.childNodes[n],this[i].childNodes[0])}else if(e instanceof Zn)for(n=0;n<e.length;n+=1)this[i].insertBefore(e[n],this[i].childNodes[0]);else this[i].insertBefore(e,this[i].childNodes[0]);return this},next:function(e){return this.length>0?e?this[0].nextElementSibling&&is(this[0].nextElementSibling).is(e)?is([this[0].nextElementSibling]):is([]):this[0].nextElementSibling?is([this[0].nextElementSibling]):is([]):is([])},nextAll:function(e){const t=[];let i=this[0];if(!i)return is([]);for(;i.nextElementSibling;){const n=i.nextElementSibling;e?is(n).is(e)&&t.push(n):t.push(n),i=n}return is(t)},prev:function(e){if(this.length>0){const t=this[0];return e?t.previousElementSibling&&is(t.previousElementSibling).is(e)?is([t.previousElementSibling]):is([]):t.previousElementSibling?is([t.previousElementSibling]):is([])}return is([])},prevAll:function(e){const t=[];let i=this[0];if(!i)return is([]);for(;i.previousElementSibling;){const n=i.previousElementSibling;e?is(n).is(e)&&t.push(n):t.push(n),i=n}return is(t)},parent:function(e){const t=[];for(let i=0;i<this.length;i+=1)null!==this[i].parentNode&&(e?is(this[i].parentNode).is(e)&&t.push(this[i].parentNode):t.push(this[i].parentNode));return is(t)},parents:function(e){const t=[];for(let i=0;i<this.length;i+=1){let n=this[i].parentNode;for(;n;)e?is(n).is(e)&&t.push(n):t.push(n),n=n.parentNode}return is(t)},closest:function(e){let t=this;return void 0===e?is([]):(t.is(e)||(t=t.parents(e).eq(0)),t)},find:function(e){const t=[];for(let i=0;i<this.length;i+=1){const n=this[i].querySelectorAll(e);for(let e=0;e<n.length;e+=1)t.push(n[e])}return is(t)},children:function(e){const t=[];for(let i=0;i<this.length;i+=1){const n=this[i].children;for(let i=0;i<n.length;i+=1)e&&!is(n[i]).is(e)||t.push(n[i])}return is(t)},filter:function(e){return is(ts(this,e))},remove:function(){for(let e=0;e<this.length;e+=1)this[e].parentNode&&this[e].parentNode.removeChild(this[e]);return this}};Object.keys(rs).forEach((e=>{Object.defineProperty(is.fn,e,{value:rs[e],writable:!0})}));var os=is;function as(e,t){return void 0===t&&(t=0),setTimeout(e,t)}function ls(){return Date.now()}function cs(e,t){void 0===t&&(t="x");const i=Jn();let n,s,r;const o=function(e){const t=Jn();let i;return t.getComputedStyle&&(i=t.getComputedStyle(e,null)),!i&&e.currentStyle&&(i=e.currentStyle),i||(i=e.style),i}(e);return i.WebKitCSSMatrix?(s=o.transform||o.webkitTransform,s.split(",").length>6&&(s=s.split(", ").map((e=>e.replace(",","."))).join(", ")),r=new i.WebKitCSSMatrix("none"===s?"":s)):(r=o.MozTransform||o.OTransform||o.MsTransform||o.msTransform||o.transform||o.getPropertyValue("transform").replace("translate(","matrix(1, 0, 0, 1,"),n=r.toString().split(",")),"x"===t&&(s=i.WebKitCSSMatrix?r.m41:16===n.length?parseFloat(n[12]):parseFloat(n[4])),"y"===t&&(s=i.WebKitCSSMatrix?r.m42:16===n.length?parseFloat(n[13]):parseFloat(n[5])),s||0}function ds(e){return"object"==typeof e&&null!==e&&e.constructor&&"Object"===Object.prototype.toString.call(e).slice(8,-1)}function us(e){return"undefined"!=typeof window&&void 0!==window.HTMLElement?e instanceof HTMLElement:e&&(1===e.nodeType||11===e.nodeType)}function ps(){const e=Object(arguments.length<=0?void 0:arguments[0]),t=["__proto__","constructor","prototype"];for(let i=1;i<arguments.length;i+=1){const n=i<0||arguments.length<=i?void 0:arguments[i];if(null!=n&&!us(n)){const i=Object.keys(Object(n)).filter((e=>t.indexOf(e)<0));for(let t=0,s=i.length;t<s;t+=1){const s=i[t],r=Object.getOwnPropertyDescriptor(n,s);void 0!==r&&r.enumerable&&(ds(e[s])&&ds(n[s])?n[s].__swiper__?e[s]=n[s]:ps(e[s],n[s]):!ds(e[s])&&ds(n[s])?(e[s]={},n[s].__swiper__?e[s]=n[s]:ps(e[s],n[s])):e[s]=n[s])}}}return e}function hs(e,t,i){e.style.setProperty(t,i)}function fs(e){let{swiper:t,targetPosition:i,side:n}=e;const s=Jn(),r=-t.translate;let o,a=null;const l=t.params.speed;t.wrapperEl.style.scrollSnapType="none",s.cancelAnimationFrame(t.cssModeFrameID);const c=i>r?"next":"prev",d=(e,t)=>"next"===c&&e>=t||"prev"===c&&e<=t,u=()=>{o=(new Date).getTime(),null===a&&(a=o);const e=Math.max(Math.min((o-a)/l,1),0),c=.5-Math.cos(e*Math.PI)/2;let p=r+c*(i-r);if(d(p,i)&&(p=i),t.wrapperEl.scrollTo({[n]:p}),d(p,i))return t.wrapperEl.style.overflow="hidden",t.wrapperEl.style.scrollSnapType="",setTimeout((()=>{t.wrapperEl.style.overflow="",t.wrapperEl.scrollTo({[n]:p})})),void s.cancelAnimationFrame(t.cssModeFrameID);t.cssModeFrameID=s.requestAnimationFrame(u)};u()}let ms,gs,vs;function bs(){return ms||(ms=function(){const e=Jn(),t=Un();return{smoothScroll:t.documentElement&&"scrollBehavior"in t.documentElement.style,touch:!!("ontouchstart"in e||e.DocumentTouch&&t instanceof e.DocumentTouch),passiveListener:function(){let t=!1;try{const i=Object.defineProperty({},"passive",{get(){t=!0}});e.addEventListener("testPassiveListener",null,i)}catch(e){}return t}(),gestures:"ongesturestart"in e}}()),ms}function _s(e){return void 0===e&&(e={}),gs||(gs=function(e){let{userAgent:t}=void 0===e?{}:e;const i=bs(),n=Jn(),s=n.navigator.platform,r=t||n.navigator.userAgent,o={ios:!1,android:!1},a=n.screen.width,l=n.screen.height,c=r.match(/(Android);?[\s\/]+([\d.]+)?/);let d=r.match(/(iPad).*OS\s([\d_]+)/);const u=r.match(/(iPod)(.*OS\s([\d_]+))?/),p=!d&&r.match(/(iPhone\sOS|iOS)\s([\d_]+)/),h="Win32"===s;let f="MacIntel"===s;return!d&&f&&i.touch&&["1024x1366","1366x1024","834x1194","1194x834","834x1112","1112x834","768x1024","1024x768","820x1180","1180x820","810x1080","1080x810"].indexOf(`${a}x${l}`)>=0&&(d=r.match(/(Version)\/([\d.]+)/),d||(d=[0,1,"13_0_0"]),f=!1),c&&!h&&(o.os="android",o.android=!0),(d||p||u)&&(o.os="ios",o.ios=!0),o}(e)),gs}function ws(){return vs||(vs=function(){const e=Jn();return{isSafari:function(){const t=e.navigator.userAgent.toLowerCase();return t.indexOf("safari")>=0&&t.indexOf("chrome")<0&&t.indexOf("android")<0}(),isWebView:/(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/i.test(e.navigator.userAgent)}}()),vs}var ys={on(e,t,i){const n=this;if(!n.eventsListeners||n.destroyed)return n;if("function"!=typeof t)return n;const s=i?"unshift":"push";return e.split(" ").forEach((e=>{n.eventsListeners[e]||(n.eventsListeners[e]=[]),n.eventsListeners[e][s](t)})),n},once(e,t,i){const n=this;if(!n.eventsListeners||n.destroyed)return n;if("function"!=typeof t)return n;function s(){n.off(e,s),s.__emitterProxy&&delete s.__emitterProxy;for(var i=arguments.length,r=new Array(i),o=0;o<i;o++)r[o]=arguments[o];t.apply(n,r)}return s.__emitterProxy=t,n.on(e,s,i)},onAny(e,t){const i=this;if(!i.eventsListeners||i.destroyed)return i;if("function"!=typeof e)return i;const n=t?"unshift":"push";return i.eventsAnyListeners.indexOf(e)<0&&i.eventsAnyListeners[n](e),i},offAny(e){const t=this;if(!t.eventsListeners||t.destroyed)return t;if(!t.eventsAnyListeners)return t;const i=t.eventsAnyListeners.indexOf(e);return i>=0&&t.eventsAnyListeners.splice(i,1),t},off(e,t){const i=this;return!i.eventsListeners||i.destroyed?i:i.eventsListeners?(e.split(" ").forEach((e=>{void 0===t?i.eventsListeners[e]=[]:i.eventsListeners[e]&&i.eventsListeners[e].forEach(((n,s)=>{(n===t||n.__emitterProxy&&n.__emitterProxy===t)&&i.eventsListeners[e].splice(s,1)}))})),i):i},emit(){const e=this;if(!e.eventsListeners||e.destroyed)return e;if(!e.eventsListeners)return e;let t,i,n;for(var s=arguments.length,r=new Array(s),o=0;o<s;o++)r[o]=arguments[o];"string"==typeof r[0]||Array.isArray(r[0])?(t=r[0],i=r.slice(1,r.length),n=e):(t=r[0].events,i=r[0].data,n=r[0].context||e),i.unshift(n);return(Array.isArray(t)?t:t.split(" ")).forEach((t=>{e.eventsAnyListeners&&e.eventsAnyListeners.length&&e.eventsAnyListeners.forEach((e=>{e.apply(n,[t,...i])})),e.eventsListeners&&e.eventsListeners[t]&&e.eventsListeners[t].forEach((e=>{e.apply(n,i)}))})),e}};var Cs={updateSize:function(){const e=this;let t,i;const n=e.$el;t=void 0!==e.params.width&&null!==e.params.width?e.params.width:n[0].clientWidth,i=void 0!==e.params.height&&null!==e.params.height?e.params.height:n[0].clientHeight,0===t&&e.isHorizontal()||0===i&&e.isVertical()||(t=t-parseInt(n.css("padding-left")||0,10)-parseInt(n.css("padding-right")||0,10),i=i-parseInt(n.css("padding-top")||0,10)-parseInt(n.css("padding-bottom")||0,10),Number.isNaN(t)&&(t=0),Number.isNaN(i)&&(i=0),Object.assign(e,{width:t,height:i,size:e.isHorizontal()?t:i}))},updateSlides:function(){const e=this;function t(t){return e.isHorizontal()?t:{width:"height","margin-top":"margin-left","margin-bottom ":"margin-right","margin-left":"margin-top","margin-right":"margin-bottom","padding-left":"padding-top","padding-right":"padding-bottom",marginRight:"marginBottom"}[t]}function i(e,i){return parseFloat(e.getPropertyValue(t(i))||0)}const n=e.params,{$wrapperEl:s,size:r,rtlTranslate:o,wrongRTL:a}=e,l=e.virtual&&n.virtual.enabled,c=l?e.virtual.slides.length:e.slides.length,d=s.children(`.${e.params.slideClass}`),u=l?e.virtual.slides.length:d.length;let p=[];const h=[],f=[];let m=n.slidesOffsetBefore;"function"==typeof m&&(m=n.slidesOffsetBefore.call(e));let g=n.slidesOffsetAfter;"function"==typeof g&&(g=n.slidesOffsetAfter.call(e));const v=e.snapGrid.length,b=e.slidesGrid.length;let _=n.spaceBetween,w=-m,y=0,C=0;if(void 0===r)return;"string"==typeof _&&_.indexOf("%")>=0&&(_=parseFloat(_.replace("%",""))/100*r),e.virtualSize=-_,o?d.css({marginLeft:"",marginBottom:"",marginTop:""}):d.css({marginRight:"",marginBottom:"",marginTop:""}),n.centeredSlides&&n.cssMode&&(hs(e.wrapperEl,"--swiper-centered-offset-before",""),hs(e.wrapperEl,"--swiper-centered-offset-after",""));const E=n.grid&&n.grid.rows>1&&e.grid;let T;E&&e.grid.initSlides(u);const x="auto"===n.slidesPerView&&n.breakpoints&&Object.keys(n.breakpoints).filter((e=>void 0!==n.breakpoints[e].slidesPerView)).length>0;for(let s=0;s<u;s+=1){T=0;const o=d.eq(s);if(E&&e.grid.updateSlide(s,o,u,t),"none"!==o.css("display")){if("auto"===n.slidesPerView){x&&(d[s].style[t("width")]="");const r=getComputedStyle(o[0]),a=o[0].style.transform,l=o[0].style.webkitTransform;if(a&&(o[0].style.transform="none"),l&&(o[0].style.webkitTransform="none"),n.roundLengths)T=e.isHorizontal()?o.outerWidth(!0):o.outerHeight(!0);else{const e=i(r,"width"),t=i(r,"padding-left"),n=i(r,"padding-right"),s=i(r,"margin-left"),a=i(r,"margin-right"),l=r.getPropertyValue("box-sizing");if(l&&"border-box"===l)T=e+s+a;else{const{clientWidth:i,offsetWidth:r}=o[0];T=e+t+n+s+a+(r-i)}}a&&(o[0].style.transform=a),l&&(o[0].style.webkitTransform=l),n.roundLengths&&(T=Math.floor(T))}else T=(r-(n.slidesPerView-1)*_)/n.slidesPerView,n.roundLengths&&(T=Math.floor(T)),d[s]&&(d[s].style[t("width")]=`${T}px`);d[s]&&(d[s].swiperSlideSize=T),f.push(T),n.centeredSlides?(w=w+T/2+y/2+_,0===y&&0!==s&&(w=w-r/2-_),0===s&&(w=w-r/2-_),Math.abs(w)<.001&&(w=0),n.roundLengths&&(w=Math.floor(w)),C%n.slidesPerGroup==0&&p.push(w),h.push(w)):(n.roundLengths&&(w=Math.floor(w)),(C-Math.min(e.params.slidesPerGroupSkip,C))%e.params.slidesPerGroup==0&&p.push(w),h.push(w),w=w+T+_),e.virtualSize+=T+_,y=T,C+=1}}if(e.virtualSize=Math.max(e.virtualSize,r)+g,o&&a&&("slide"===n.effect||"coverflow"===n.effect)&&s.css({width:`${e.virtualSize+n.spaceBetween}px`}),n.setWrapperSize&&s.css({[t("width")]:`${e.virtualSize+n.spaceBetween}px`}),E&&e.grid.updateWrapperSize(T,p,t),!n.centeredSlides){const t=[];for(let i=0;i<p.length;i+=1){let s=p[i];n.roundLengths&&(s=Math.floor(s)),p[i]<=e.virtualSize-r&&t.push(s)}p=t,Math.floor(e.virtualSize-r)-Math.floor(p[p.length-1])>1&&p.push(e.virtualSize-r)}if(0===p.length&&(p=[0]),0!==n.spaceBetween){const i=e.isHorizontal()&&o?"marginLeft":t("marginRight");d.filter(((e,t)=>!n.cssMode||t!==d.length-1)).css({[i]:`${_}px`})}if(n.centeredSlides&&n.centeredSlidesBounds){let e=0;f.forEach((t=>{e+=t+(n.spaceBetween?n.spaceBetween:0)})),e-=n.spaceBetween;const t=e-r;p=p.map((e=>e<0?-m:e>t?t+g:e))}if(n.centerInsufficientSlides){let e=0;if(f.forEach((t=>{e+=t+(n.spaceBetween?n.spaceBetween:0)})),e-=n.spaceBetween,e<r){const t=(r-e)/2;p.forEach(((e,i)=>{p[i]=e-t})),h.forEach(((e,i)=>{h[i]=e+t}))}}if(Object.assign(e,{slides:d,snapGrid:p,slidesGrid:h,slidesSizesGrid:f}),n.centeredSlides&&n.cssMode&&!n.centeredSlidesBounds){hs(e.wrapperEl,"--swiper-centered-offset-before",-p[0]+"px"),hs(e.wrapperEl,"--swiper-centered-offset-after",e.size/2-f[f.length-1]/2+"px");const t=-e.snapGrid[0],i=-e.slidesGrid[0];e.snapGrid=e.snapGrid.map((e=>e+t)),e.slidesGrid=e.slidesGrid.map((e=>e+i))}if(u!==c&&e.emit("slidesLengthChange"),p.length!==v&&(e.params.watchOverflow&&e.checkOverflow(),e.emit("snapGridLengthChange")),h.length!==b&&e.emit("slidesGridLengthChange"),n.watchSlidesProgress&&e.updateSlidesOffset(),!(l||n.cssMode||"slide"!==n.effect&&"fade"!==n.effect)){const t=`${n.containerModifierClass}backface-hidden`,i=e.$el.hasClass(t);u<=n.maxBackfaceHiddenSlides?i||e.$el.addClass(t):i&&e.$el.removeClass(t)}},updateAutoHeight:function(e){const t=this,i=[],n=t.virtual&&t.params.virtual.enabled;let s,r=0;"number"==typeof e?t.setTransition(e):!0===e&&t.setTransition(t.params.speed);const o=e=>n?t.slides.filter((t=>parseInt(t.getAttribute("data-swiper-slide-index"),10)===e))[0]:t.slides.eq(e)[0];if("auto"!==t.params.slidesPerView&&t.params.slidesPerView>1)if(t.params.centeredSlides)(t.visibleSlides||os([])).each((e=>{i.push(e)}));else for(s=0;s<Math.ceil(t.params.slidesPerView);s+=1){const e=t.activeIndex+s;if(e>t.slides.length&&!n)break;i.push(o(e))}else i.push(o(t.activeIndex));for(s=0;s<i.length;s+=1)if(void 0!==i[s]){const e=i[s].offsetHeight;r=e>r?e:r}(r||0===r)&&t.$wrapperEl.css("height",`${r}px`)},updateSlidesOffset:function(){const e=this,t=e.slides;for(let i=0;i<t.length;i+=1)t[i].swiperSlideOffset=e.isHorizontal()?t[i].offsetLeft:t[i].offsetTop},updateSlidesProgress:function(e){void 0===e&&(e=this&&this.translate||0);const t=this,i=t.params,{slides:n,rtlTranslate:s,snapGrid:r}=t;if(0===n.length)return;void 0===n[0].swiperSlideOffset&&t.updateSlidesOffset();let o=-e;s&&(o=e),n.removeClass(i.slideVisibleClass),t.visibleSlidesIndexes=[],t.visibleSlides=[];for(let e=0;e<n.length;e+=1){const a=n[e];let l=a.swiperSlideOffset;i.cssMode&&i.centeredSlides&&(l-=n[0].swiperSlideOffset);const c=(o+(i.centeredSlides?t.minTranslate():0)-l)/(a.swiperSlideSize+i.spaceBetween),d=(o-r[0]+(i.centeredSlides?t.minTranslate():0)-l)/(a.swiperSlideSize+i.spaceBetween),u=-(o-l),p=u+t.slidesSizesGrid[e];(u>=0&&u<t.size-1||p>1&&p<=t.size||u<=0&&p>=t.size)&&(t.visibleSlides.push(a),t.visibleSlidesIndexes.push(e),n.eq(e).addClass(i.slideVisibleClass)),a.progress=s?-c:c,a.originalProgress=s?-d:d}t.visibleSlides=os(t.visibleSlides)},updateProgress:function(e){const t=this;if(void 0===e){const i=t.rtlTranslate?-1:1;e=t&&t.translate&&t.translate*i||0}const i=t.params,n=t.maxTranslate()-t.minTranslate();let{progress:s,isBeginning:r,isEnd:o}=t;const a=r,l=o;0===n?(s=0,r=!0,o=!0):(s=(e-t.minTranslate())/n,r=s<=0,o=s>=1),Object.assign(t,{progress:s,isBeginning:r,isEnd:o}),(i.watchSlidesProgress||i.centeredSlides&&i.autoHeight)&&t.updateSlidesProgress(e),r&&!a&&t.emit("reachBeginning toEdge"),o&&!l&&t.emit("reachEnd toEdge"),(a&&!r||l&&!o)&&t.emit("fromEdge"),t.emit("progress",s)},updateSlidesClasses:function(){const e=this,{slides:t,params:i,$wrapperEl:n,activeIndex:s,realIndex:r}=e,o=e.virtual&&i.virtual.enabled;let a;t.removeClass(`${i.slideActiveClass} ${i.slideNextClass} ${i.slidePrevClass} ${i.slideDuplicateActiveClass} ${i.slideDuplicateNextClass} ${i.slideDuplicatePrevClass}`),a=o?e.$wrapperEl.find(`.${i.slideClass}[data-swiper-slide-index="${s}"]`):t.eq(s),a.addClass(i.slideActiveClass),i.loop&&(a.hasClass(i.slideDuplicateClass)?n.children(`.${i.slideClass}:not(.${i.slideDuplicateClass})[data-swiper-slide-index="${r}"]`).addClass(i.slideDuplicateActiveClass):n.children(`.${i.slideClass}.${i.slideDuplicateClass}[data-swiper-slide-index="${r}"]`).addClass(i.slideDuplicateActiveClass));let l=a.nextAll(`.${i.slideClass}`).eq(0).addClass(i.slideNextClass);i.loop&&0===l.length&&(l=t.eq(0),l.addClass(i.slideNextClass));let c=a.prevAll(`.${i.slideClass}`).eq(0).addClass(i.slidePrevClass);i.loop&&0===c.length&&(c=t.eq(-1),c.addClass(i.slidePrevClass)),i.loop&&(l.hasClass(i.slideDuplicateClass)?n.children(`.${i.slideClass}:not(.${i.slideDuplicateClass})[data-swiper-slide-index="${l.attr("data-swiper-slide-index")}"]`).addClass(i.slideDuplicateNextClass):n.children(`.${i.slideClass}.${i.slideDuplicateClass}[data-swiper-slide-index="${l.attr("data-swiper-slide-index")}"]`).addClass(i.slideDuplicateNextClass),c.hasClass(i.slideDuplicateClass)?n.children(`.${i.slideClass}:not(.${i.slideDuplicateClass})[data-swiper-slide-index="${c.attr("data-swiper-slide-index")}"]`).addClass(i.slideDuplicatePrevClass):n.children(`.${i.slideClass}.${i.slideDuplicateClass}[data-swiper-slide-index="${c.attr("data-swiper-slide-index")}"]`).addClass(i.slideDuplicatePrevClass)),e.emitSlidesClasses()},updateActiveIndex:function(e){const t=this,i=t.rtlTranslate?t.translate:-t.translate,{slidesGrid:n,snapGrid:s,params:r,activeIndex:o,realIndex:a,snapIndex:l}=t;let c,d=e;if(void 0===d){for(let e=0;e<n.length;e+=1)void 0!==n[e+1]?i>=n[e]&&i<n[e+1]-(n[e+1]-n[e])/2?d=e:i>=n[e]&&i<n[e+1]&&(d=e+1):i>=n[e]&&(d=e);r.normalizeSlideIndex&&(d<0||void 0===d)&&(d=0)}if(s.indexOf(i)>=0)c=s.indexOf(i);else{const e=Math.min(r.slidesPerGroupSkip,d);c=e+Math.floor((d-e)/r.slidesPerGroup)}if(c>=s.length&&(c=s.length-1),d===o)return void(c!==l&&(t.snapIndex=c,t.emit("snapIndexChange")));const u=parseInt(t.slides.eq(d).attr("data-swiper-slide-index")||d,10);Object.assign(t,{snapIndex:c,realIndex:u,previousIndex:o,activeIndex:d}),t.emit("activeIndexChange"),t.emit("snapIndexChange"),a!==u&&t.emit("realIndexChange"),(t.initialized||t.params.runCallbacksOnInit)&&t.emit("slideChange")},updateClickedSlide:function(e){const t=this,i=t.params,n=os(e).closest(`.${i.slideClass}`)[0];let s,r=!1;if(n)for(let e=0;e<t.slides.length;e+=1)if(t.slides[e]===n){r=!0,s=e;break}if(!n||!r)return t.clickedSlide=void 0,void(t.clickedIndex=void 0);t.clickedSlide=n,t.virtual&&t.params.virtual.enabled?t.clickedIndex=parseInt(os(n).attr("data-swiper-slide-index"),10):t.clickedIndex=s,i.slideToClickedSlide&&void 0!==t.clickedIndex&&t.clickedIndex!==t.activeIndex&&t.slideToClickedSlide()}};var Es={getTranslate:function(e){void 0===e&&(e=this.isHorizontal()?"x":"y");const{params:t,rtlTranslate:i,translate:n,$wrapperEl:s}=this;if(t.virtualTranslate)return i?-n:n;if(t.cssMode)return n;let r=cs(s[0],e);return i&&(r=-r),r||0},setTranslate:function(e,t){const i=this,{rtlTranslate:n,params:s,$wrapperEl:r,wrapperEl:o,progress:a}=i;let l,c=0,d=0;i.isHorizontal()?c=n?-e:e:d=e,s.roundLengths&&(c=Math.floor(c),d=Math.floor(d)),s.cssMode?o[i.isHorizontal()?"scrollLeft":"scrollTop"]=i.isHorizontal()?-c:-d:s.virtualTranslate||r.transform(`translate3d(${c}px, ${d}px, 0px)`),i.previousTranslate=i.translate,i.translate=i.isHorizontal()?c:d;const u=i.maxTranslate()-i.minTranslate();l=0===u?0:(e-i.minTranslate())/u,l!==a&&i.updateProgress(e),i.emit("setTranslate",i.translate,t)},minTranslate:function(){return-this.snapGrid[0]},maxTranslate:function(){return-this.snapGrid[this.snapGrid.length-1]},translateTo:function(e,t,i,n,s){void 0===e&&(e=0),void 0===t&&(t=this.params.speed),void 0===i&&(i=!0),void 0===n&&(n=!0);const r=this,{params:o,wrapperEl:a}=r;if(r.animating&&o.preventInteractionOnTransition)return!1;const l=r.minTranslate(),c=r.maxTranslate();let d;if(d=n&&e>l?l:n&&e<c?c:e,r.updateProgress(d),o.cssMode){const e=r.isHorizontal();if(0===t)a[e?"scrollLeft":"scrollTop"]=-d;else{if(!r.support.smoothScroll)return fs({swiper:r,targetPosition:-d,side:e?"left":"top"}),!0;a.scrollTo({[e?"left":"top"]:-d,behavior:"smooth"})}return!0}return 0===t?(r.setTransition(0),r.setTranslate(d),i&&(r.emit("beforeTransitionStart",t,s),r.emit("transitionEnd"))):(r.setTransition(t),r.setTranslate(d),i&&(r.emit("beforeTransitionStart",t,s),r.emit("transitionStart")),r.animating||(r.animating=!0,r.onTranslateToWrapperTransitionEnd||(r.onTranslateToWrapperTransitionEnd=function(e){r&&!r.destroyed&&e.target===this&&(r.$wrapperEl[0].removeEventListener("transitionend",r.onTranslateToWrapperTransitionEnd),r.$wrapperEl[0].removeEventListener("webkitTransitionEnd",r.onTranslateToWrapperTransitionEnd),r.onTranslateToWrapperTransitionEnd=null,delete r.onTranslateToWrapperTransitionEnd,i&&r.emit("transitionEnd"))}),r.$wrapperEl[0].addEventListener("transitionend",r.onTranslateToWrapperTransitionEnd),r.$wrapperEl[0].addEventListener("webkitTransitionEnd",r.onTranslateToWrapperTransitionEnd))),!0}};function Ts(e){let{swiper:t,runCallbacks:i,direction:n,step:s}=e;const{activeIndex:r,previousIndex:o}=t;let a=n;if(a||(a=r>o?"next":r<o?"prev":"reset"),t.emit(`transition${s}`),i&&r!==o){if("reset"===a)return void t.emit(`slideResetTransition${s}`);t.emit(`slideChangeTransition${s}`),"next"===a?t.emit(`slideNextTransition${s}`):t.emit(`slidePrevTransition${s}`)}}var xs={slideTo:function(e,t,i,n,s){if(void 0===e&&(e=0),void 0===t&&(t=this.params.speed),void 0===i&&(i=!0),"number"!=typeof e&&"string"!=typeof e)throw new Error(`The 'index' argument cannot have type other than 'number' or 'string'. [${typeof e}] given.`);if("string"==typeof e){const t=parseInt(e,10);if(!isFinite(t))throw new Error(`The passed-in 'index' (string) couldn't be converted to 'number'. [${e}] given.`);e=t}const r=this;let o=e;o<0&&(o=0);const{params:a,snapGrid:l,slidesGrid:c,previousIndex:d,activeIndex:u,rtlTranslate:p,wrapperEl:h,enabled:f}=r;if(r.animating&&a.preventInteractionOnTransition||!f&&!n&&!s)return!1;const m=Math.min(r.params.slidesPerGroupSkip,o);let g=m+Math.floor((o-m)/r.params.slidesPerGroup);g>=l.length&&(g=l.length-1),(u||a.initialSlide||0)===(d||0)&&i&&r.emit("beforeSlideChangeStart");const v=-l[g];if(r.updateProgress(v),a.normalizeSlideIndex)for(let e=0;e<c.length;e+=1){const t=-Math.floor(100*v),i=Math.floor(100*c[e]),n=Math.floor(100*c[e+1]);void 0!==c[e+1]?t>=i&&t<n-(n-i)/2?o=e:t>=i&&t<n&&(o=e+1):t>=i&&(o=e)}if(r.initialized&&o!==u){if(!r.allowSlideNext&&v<r.translate&&v<r.minTranslate())return!1;if(!r.allowSlidePrev&&v>r.translate&&v>r.maxTranslate()&&(u||0)!==o)return!1}let b;if(b=o>u?"next":o<u?"prev":"reset",p&&-v===r.translate||!p&&v===r.translate)return r.updateActiveIndex(o),a.autoHeight&&r.updateAutoHeight(),r.updateSlidesClasses(),"slide"!==a.effect&&r.setTranslate(v),"reset"!==b&&(r.transitionStart(i,b),r.transitionEnd(i,b)),!1;if(a.cssMode){const e=r.isHorizontal(),i=p?v:-v;if(0===t){const t=r.virtual&&r.params.virtual.enabled;t&&(r.wrapperEl.style.scrollSnapType="none",r._immediateVirtual=!0),h[e?"scrollLeft":"scrollTop"]=i,t&&requestAnimationFrame((()=>{r.wrapperEl.style.scrollSnapType="",r._swiperImmediateVirtual=!1}))}else{if(!r.support.smoothScroll)return fs({swiper:r,targetPosition:i,side:e?"left":"top"}),!0;h.scrollTo({[e?"left":"top"]:i,behavior:"smooth"})}return!0}return r.setTransition(t),r.setTranslate(v),r.updateActiveIndex(o),r.updateSlidesClasses(),r.emit("beforeTransitionStart",t,n),r.transitionStart(i,b),0===t?r.transitionEnd(i,b):r.animating||(r.animating=!0,r.onSlideToWrapperTransitionEnd||(r.onSlideToWrapperTransitionEnd=function(e){r&&!r.destroyed&&e.target===this&&(r.$wrapperEl[0].removeEventListener("transitionend",r.onSlideToWrapperTransitionEnd),r.$wrapperEl[0].removeEventListener("webkitTransitionEnd",r.onSlideToWrapperTransitionEnd),r.onSlideToWrapperTransitionEnd=null,delete r.onSlideToWrapperTransitionEnd,r.transitionEnd(i,b))}),r.$wrapperEl[0].addEventListener("transitionend",r.onSlideToWrapperTransitionEnd),r.$wrapperEl[0].addEventListener("webkitTransitionEnd",r.onSlideToWrapperTransitionEnd)),!0},slideToLoop:function(e,t,i,n){if(void 0===e&&(e=0),void 0===t&&(t=this.params.speed),void 0===i&&(i=!0),"string"==typeof e){const t=parseInt(e,10);if(!isFinite(t))throw new Error(`The passed-in 'index' (string) couldn't be converted to 'number'. [${e}] given.`);e=t}const s=this;let r=e;return s.params.loop&&(r+=s.loopedSlides),s.slideTo(r,t,i,n)},slideNext:function(e,t,i){void 0===e&&(e=this.params.speed),void 0===t&&(t=!0);const n=this,{animating:s,enabled:r,params:o}=n;if(!r)return n;let a=o.slidesPerGroup;"auto"===o.slidesPerView&&1===o.slidesPerGroup&&o.slidesPerGroupAuto&&(a=Math.max(n.slidesPerViewDynamic("current",!0),1));const l=n.activeIndex<o.slidesPerGroupSkip?1:a;if(o.loop){if(s&&o.loopPreventsSlide)return!1;n.loopFix(),n._clientLeft=n.$wrapperEl[0].clientLeft}return o.rewind&&n.isEnd?n.slideTo(0,e,t,i):n.slideTo(n.activeIndex+l,e,t,i)},slidePrev:function(e,t,i){void 0===e&&(e=this.params.speed),void 0===t&&(t=!0);const n=this,{params:s,animating:r,snapGrid:o,slidesGrid:a,rtlTranslate:l,enabled:c}=n;if(!c)return n;if(s.loop){if(r&&s.loopPreventsSlide)return!1;n.loopFix(),n._clientLeft=n.$wrapperEl[0].clientLeft}function d(e){return e<0?-Math.floor(Math.abs(e)):Math.floor(e)}const u=d(l?n.translate:-n.translate),p=o.map((e=>d(e)));let h=o[p.indexOf(u)-1];if(void 0===h&&s.cssMode){let e;o.forEach(((t,i)=>{u>=t&&(e=i)})),void 0!==e&&(h=o[e>0?e-1:e])}let f=0;if(void 0!==h&&(f=a.indexOf(h),f<0&&(f=n.activeIndex-1),"auto"===s.slidesPerView&&1===s.slidesPerGroup&&s.slidesPerGroupAuto&&(f=f-n.slidesPerViewDynamic("previous",!0)+1,f=Math.max(f,0))),s.rewind&&n.isBeginning){const s=n.params.virtual&&n.params.virtual.enabled&&n.virtual?n.virtual.slides.length-1:n.slides.length-1;return n.slideTo(s,e,t,i)}return n.slideTo(f,e,t,i)},slideReset:function(e,t,i){return void 0===e&&(e=this.params.speed),void 0===t&&(t=!0),this.slideTo(this.activeIndex,e,t,i)},slideToClosest:function(e,t,i,n){void 0===e&&(e=this.params.speed),void 0===t&&(t=!0),void 0===n&&(n=.5);const s=this;let r=s.activeIndex;const o=Math.min(s.params.slidesPerGroupSkip,r),a=o+Math.floor((r-o)/s.params.slidesPerGroup),l=s.rtlTranslate?s.translate:-s.translate;if(l>=s.snapGrid[a]){const e=s.snapGrid[a];l-e>(s.snapGrid[a+1]-e)*n&&(r+=s.params.slidesPerGroup)}else{const e=s.snapGrid[a-1];l-e<=(s.snapGrid[a]-e)*n&&(r-=s.params.slidesPerGroup)}return r=Math.max(r,0),r=Math.min(r,s.slidesGrid.length-1),s.slideTo(r,e,t,i)},slideToClickedSlide:function(){const e=this,{params:t,$wrapperEl:i}=e,n="auto"===t.slidesPerView?e.slidesPerViewDynamic():t.slidesPerView;let s,r=e.clickedIndex;if(t.loop){if(e.animating)return;s=parseInt(os(e.clickedSlide).attr("data-swiper-slide-index"),10),t.centeredSlides?r<e.loopedSlides-n/2||r>e.slides.length-e.loopedSlides+n/2?(e.loopFix(),r=i.children(`.${t.slideClass}[data-swiper-slide-index="${s}"]:not(.${t.slideDuplicateClass})`).eq(0).index(),as((()=>{e.slideTo(r)}))):e.slideTo(r):r>e.slides.length-n?(e.loopFix(),r=i.children(`.${t.slideClass}[data-swiper-slide-index="${s}"]:not(.${t.slideDuplicateClass})`).eq(0).index(),as((()=>{e.slideTo(r)}))):e.slideTo(r)}else e.slideTo(r)}};var Ss={loopCreate:function(){const e=this,t=Un(),{params:i,$wrapperEl:n}=e,s=n.children().length>0?os(n.children()[0].parentNode):n;s.children(`.${i.slideClass}.${i.slideDuplicateClass}`).remove();let r=s.children(`.${i.slideClass}`);if(i.loopFillGroupWithBlank){const e=i.slidesPerGroup-r.length%i.slidesPerGroup;if(e!==i.slidesPerGroup){for(let n=0;n<e;n+=1){const e=os(t.createElement("div")).addClass(`${i.slideClass} ${i.slideBlankClass}`);s.append(e)}r=s.children(`.${i.slideClass}`)}}"auto"!==i.slidesPerView||i.loopedSlides||(i.loopedSlides=r.length),e.loopedSlides=Math.ceil(parseFloat(i.loopedSlides||i.slidesPerView,10)),e.loopedSlides+=i.loopAdditionalSlides,e.loopedSlides>r.length&&(e.loopedSlides=r.length);const o=[],a=[];r.each(((t,i)=>{const n=os(t);i<e.loopedSlides&&a.push(t),i<r.length&&i>=r.length-e.loopedSlides&&o.push(t),n.attr("data-swiper-slide-index",i)}));for(let e=0;e<a.length;e+=1)s.append(os(a[e].cloneNode(!0)).addClass(i.slideDuplicateClass));for(let e=o.length-1;e>=0;e-=1)s.prepend(os(o[e].cloneNode(!0)).addClass(i.slideDuplicateClass))},loopFix:function(){const e=this;e.emit("beforeLoopFix");const{activeIndex:t,slides:i,loopedSlides:n,allowSlidePrev:s,allowSlideNext:r,snapGrid:o,rtlTranslate:a}=e;let l;e.allowSlidePrev=!0,e.allowSlideNext=!0;const c=-o[t]-e.getTranslate();if(t<n){l=i.length-3*n+t,l+=n;e.slideTo(l,0,!1,!0)&&0!==c&&e.setTranslate((a?-e.translate:e.translate)-c)}else if(t>=i.length-n){l=-i.length+t+n,l+=n;e.slideTo(l,0,!1,!0)&&0!==c&&e.setTranslate((a?-e.translate:e.translate)-c)}e.allowSlidePrev=s,e.allowSlideNext=r,e.emit("loopFix")},loopDestroy:function(){const{$wrapperEl:e,params:t,slides:i}=this;e.children(`.${t.slideClass}.${t.slideDuplicateClass},.${t.slideClass}.${t.slideBlankClass}`).remove(),i.removeAttr("data-swiper-slide-index")}};function ks(e){const t=this,i=Un(),n=Jn(),s=t.touchEventsData,{params:r,touches:o,enabled:a}=t;if(!a)return;if(t.animating&&r.preventInteractionOnTransition)return;!t.animating&&r.cssMode&&r.loop&&t.loopFix();let l=e;l.originalEvent&&(l=l.originalEvent);let c=os(l.target);if("wrapper"===r.touchEventsTarget&&!c.closest(t.wrapperEl).length)return;if(s.isTouchEvent="touchstart"===l.type,!s.isTouchEvent&&"which"in l&&3===l.which)return;if(!s.isTouchEvent&&"button"in l&&l.button>0)return;if(s.isTouched&&s.isMoved)return;!!r.noSwipingClass&&""!==r.noSwipingClass&&l.target&&l.target.shadowRoot&&e.path&&e.path[0]&&(c=os(e.path[0]));const d=r.noSwipingSelector?r.noSwipingSelector:`.${r.noSwipingClass}`,u=!(!l.target||!l.target.shadowRoot);if(r.noSwiping&&(u?function(e,t){return void 0===t&&(t=this),function t(i){if(!i||i===Un()||i===Jn())return null;i.assignedSlot&&(i=i.assignedSlot);const n=i.closest(e);return n||i.getRootNode?n||t(i.getRootNode().host):null}(t)}(d,c[0]):c.closest(d)[0]))return void(t.allowClick=!0);if(r.swipeHandler&&!c.closest(r.swipeHandler)[0])return;o.currentX="touchstart"===l.type?l.targetTouches[0].pageX:l.pageX,o.currentY="touchstart"===l.type?l.targetTouches[0].pageY:l.pageY;const p=o.currentX,h=o.currentY,f=r.edgeSwipeDetection||r.iOSEdgeSwipeDetection,m=r.edgeSwipeThreshold||r.iOSEdgeSwipeThreshold;if(f&&(p<=m||p>=n.innerWidth-m)){if("prevent"!==f)return;e.preventDefault()}if(Object.assign(s,{isTouched:!0,isMoved:!1,allowTouchCallbacks:!0,isScrolling:void 0,startMoving:void 0}),o.startX=p,o.startY=h,s.touchStartTime=ls(),t.allowClick=!0,t.updateSize(),t.swipeDirection=void 0,r.threshold>0&&(s.allowThresholdMove=!1),"touchstart"!==l.type){let e=!0;c.is(s.focusableElements)&&(e=!1,"SELECT"===c[0].nodeName&&(s.isTouched=!1)),i.activeElement&&os(i.activeElement).is(s.focusableElements)&&i.activeElement!==c[0]&&i.activeElement.blur();const n=e&&t.allowTouchMove&&r.touchStartPreventDefault;!r.touchStartForcePreventDefault&&!n||c[0].isContentEditable||l.preventDefault()}t.params.freeMode&&t.params.freeMode.enabled&&t.freeMode&&t.animating&&!r.cssMode&&t.freeMode.onTouchStart(),t.emit("touchStart",l)}function As(e){const t=Un(),i=this,n=i.touchEventsData,{params:s,touches:r,rtlTranslate:o,enabled:a}=i;if(!a)return;let l=e;if(l.originalEvent&&(l=l.originalEvent),!n.isTouched)return void(n.startMoving&&n.isScrolling&&i.emit("touchMoveOpposite",l));if(n.isTouchEvent&&"touchmove"!==l.type)return;const c="touchmove"===l.type&&l.targetTouches&&(l.targetTouches[0]||l.changedTouches[0]),d="touchmove"===l.type?c.pageX:l.pageX,u="touchmove"===l.type?c.pageY:l.pageY;if(l.preventedByNestedSwiper)return r.startX=d,void(r.startY=u);if(!i.allowTouchMove)return os(l.target).is(n.focusableElements)||(i.allowClick=!1),void(n.isTouched&&(Object.assign(r,{startX:d,startY:u,currentX:d,currentY:u}),n.touchStartTime=ls()));if(n.isTouchEvent&&s.touchReleaseOnEdges&&!s.loop)if(i.isVertical()){if(u<r.startY&&i.translate<=i.maxTranslate()||u>r.startY&&i.translate>=i.minTranslate())return n.isTouched=!1,void(n.isMoved=!1)}else if(d<r.startX&&i.translate<=i.maxTranslate()||d>r.startX&&i.translate>=i.minTranslate())return;if(n.isTouchEvent&&t.activeElement&&l.target===t.activeElement&&os(l.target).is(n.focusableElements))return n.isMoved=!0,void(i.allowClick=!1);if(n.allowTouchCallbacks&&i.emit("touchMove",l),l.targetTouches&&l.targetTouches.length>1)return;r.currentX=d,r.currentY=u;const p=r.currentX-r.startX,h=r.currentY-r.startY;if(i.params.threshold&&Math.sqrt(p**2+h**2)<i.params.threshold)return;if(void 0===n.isScrolling){let e;i.isHorizontal()&&r.currentY===r.startY||i.isVertical()&&r.currentX===r.startX?n.isScrolling=!1:p*p+h*h>=25&&(e=180*Math.atan2(Math.abs(h),Math.abs(p))/Math.PI,n.isScrolling=i.isHorizontal()?e>s.touchAngle:90-e>s.touchAngle)}if(n.isScrolling&&i.emit("touchMoveOpposite",l),void 0===n.startMoving&&(r.currentX===r.startX&&r.currentY===r.startY||(n.startMoving=!0)),n.isScrolling)return void(n.isTouched=!1);if(!n.startMoving)return;i.allowClick=!1,!s.cssMode&&l.cancelable&&l.preventDefault(),s.touchMoveStopPropagation&&!s.nested&&l.stopPropagation(),n.isMoved||(s.loop&&!s.cssMode&&i.loopFix(),n.startTranslate=i.getTranslate(),i.setTransition(0),i.animating&&i.$wrapperEl.trigger("webkitTransitionEnd transitionend"),n.allowMomentumBounce=!1,!s.grabCursor||!0!==i.allowSlideNext&&!0!==i.allowSlidePrev||i.setGrabCursor(!0),i.emit("sliderFirstMove",l)),i.emit("sliderMove",l),n.isMoved=!0;let f=i.isHorizontal()?p:h;r.diff=f,f*=s.touchRatio,o&&(f=-f),i.swipeDirection=f>0?"prev":"next",n.currentTranslate=f+n.startTranslate;let m=!0,g=s.resistanceRatio;if(s.touchReleaseOnEdges&&(g=0),f>0&&n.currentTranslate>i.minTranslate()?(m=!1,s.resistance&&(n.currentTranslate=i.minTranslate()-1+(-i.minTranslate()+n.startTranslate+f)**g)):f<0&&n.currentTranslate<i.maxTranslate()&&(m=!1,s.resistance&&(n.currentTranslate=i.maxTranslate()+1-(i.maxTranslate()-n.startTranslate-f)**g)),m&&(l.preventedByNestedSwiper=!0),!i.allowSlideNext&&"next"===i.swipeDirection&&n.currentTranslate<n.startTranslate&&(n.currentTranslate=n.startTranslate),!i.allowSlidePrev&&"prev"===i.swipeDirection&&n.currentTranslate>n.startTranslate&&(n.currentTranslate=n.startTranslate),i.allowSlidePrev||i.allowSlideNext||(n.currentTranslate=n.startTranslate),s.threshold>0){if(!(Math.abs(f)>s.threshold||n.allowThresholdMove))return void(n.currentTranslate=n.startTranslate);if(!n.allowThresholdMove)return n.allowThresholdMove=!0,r.startX=r.currentX,r.startY=r.currentY,n.currentTranslate=n.startTranslate,void(r.diff=i.isHorizontal()?r.currentX-r.startX:r.currentY-r.startY)}s.followFinger&&!s.cssMode&&((s.freeMode&&s.freeMode.enabled&&i.freeMode||s.watchSlidesProgress)&&(i.updateActiveIndex(),i.updateSlidesClasses()),i.params.freeMode&&s.freeMode.enabled&&i.freeMode&&i.freeMode.onTouchMove(),i.updateProgress(n.currentTranslate),i.setTranslate(n.currentTranslate))}function Os(e){const t=this,i=t.touchEventsData,{params:n,touches:s,rtlTranslate:r,slidesGrid:o,enabled:a}=t;if(!a)return;let l=e;if(l.originalEvent&&(l=l.originalEvent),i.allowTouchCallbacks&&t.emit("touchEnd",l),i.allowTouchCallbacks=!1,!i.isTouched)return i.isMoved&&n.grabCursor&&t.setGrabCursor(!1),i.isMoved=!1,void(i.startMoving=!1);n.grabCursor&&i.isMoved&&i.isTouched&&(!0===t.allowSlideNext||!0===t.allowSlidePrev)&&t.setGrabCursor(!1);const c=ls(),d=c-i.touchStartTime;if(t.allowClick){const e=l.path||l.composedPath&&l.composedPath();t.updateClickedSlide(e&&e[0]||l.target),t.emit("tap click",l),d<300&&c-i.lastClickTime<300&&t.emit("doubleTap doubleClick",l)}if(i.lastClickTime=ls(),as((()=>{t.destroyed||(t.allowClick=!0)})),!i.isTouched||!i.isMoved||!t.swipeDirection||0===s.diff||i.currentTranslate===i.startTranslate)return i.isTouched=!1,i.isMoved=!1,void(i.startMoving=!1);let u;if(i.isTouched=!1,i.isMoved=!1,i.startMoving=!1,u=n.followFinger?r?t.translate:-t.translate:-i.currentTranslate,n.cssMode)return;if(t.params.freeMode&&n.freeMode.enabled)return void t.freeMode.onTouchEnd({currentPos:u});let p=0,h=t.slidesSizesGrid[0];for(let e=0;e<o.length;e+=e<n.slidesPerGroupSkip?1:n.slidesPerGroup){const t=e<n.slidesPerGroupSkip-1?1:n.slidesPerGroup;void 0!==o[e+t]?u>=o[e]&&u<o[e+t]&&(p=e,h=o[e+t]-o[e]):u>=o[e]&&(p=e,h=o[o.length-1]-o[o.length-2])}let f=null,m=null;n.rewind&&(t.isBeginning?m=t.params.virtual&&t.params.virtual.enabled&&t.virtual?t.virtual.slides.length-1:t.slides.length-1:t.isEnd&&(f=0));const g=(u-o[p])/h,v=p<n.slidesPerGroupSkip-1?1:n.slidesPerGroup;if(d>n.longSwipesMs){if(!n.longSwipes)return void t.slideTo(t.activeIndex);"next"===t.swipeDirection&&(g>=n.longSwipesRatio?t.slideTo(n.rewind&&t.isEnd?f:p+v):t.slideTo(p)),"prev"===t.swipeDirection&&(g>1-n.longSwipesRatio?t.slideTo(p+v):null!==m&&g<0&&Math.abs(g)>n.longSwipesRatio?t.slideTo(m):t.slideTo(p))}else{if(!n.shortSwipes)return void t.slideTo(t.activeIndex);t.navigation&&(l.target===t.navigation.nextEl||l.target===t.navigation.prevEl)?l.target===t.navigation.nextEl?t.slideTo(p+v):t.slideTo(p):("next"===t.swipeDirection&&t.slideTo(null!==f?f:p+v),"prev"===t.swipeDirection&&t.slideTo(null!==m?m:p))}}function Ls(){const e=this,{params:t,el:i}=e;if(i&&0===i.offsetWidth)return;t.breakpoints&&e.setBreakpoint();const{allowSlideNext:n,allowSlidePrev:s,snapGrid:r}=e;e.allowSlideNext=!0,e.allowSlidePrev=!0,e.updateSize(),e.updateSlides(),e.updateSlidesClasses(),("auto"===t.slidesPerView||t.slidesPerView>1)&&e.isEnd&&!e.isBeginning&&!e.params.centeredSlides?e.slideTo(e.slides.length-1,0,!1,!0):e.slideTo(e.activeIndex,0,!1,!0),e.autoplay&&e.autoplay.running&&e.autoplay.paused&&e.autoplay.run(),e.allowSlidePrev=s,e.allowSlideNext=n,e.params.watchOverflow&&r!==e.snapGrid&&e.checkOverflow()}function Ms(e){const t=this;t.enabled&&(t.allowClick||(t.params.preventClicks&&e.preventDefault(),t.params.preventClicksPropagation&&t.animating&&(e.stopPropagation(),e.stopImmediatePropagation())))}function Ps(){const e=this,{wrapperEl:t,rtlTranslate:i,enabled:n}=e;if(!n)return;let s;e.previousTranslate=e.translate,e.isHorizontal()?e.translate=-t.scrollLeft:e.translate=-t.scrollTop,0===e.translate&&(e.translate=0),e.updateActiveIndex(),e.updateSlidesClasses();const r=e.maxTranslate()-e.minTranslate();s=0===r?0:(e.translate-e.minTranslate())/r,s!==e.progress&&e.updateProgress(i?-e.translate:e.translate),e.emit("setTranslate",e.translate,!1)}let Is=!1;function $s(){}const Ds=(e,t)=>{const i=Un(),{params:n,touchEvents:s,el:r,wrapperEl:o,device:a,support:l}=e,c=!!n.nested,d="on"===t?"addEventListener":"removeEventListener",u=t;if(l.touch){const t=!("touchstart"!==s.start||!l.passiveListener||!n.passiveListeners)&&{passive:!0,capture:!1};r[d](s.start,e.onTouchStart,t),r[d](s.move,e.onTouchMove,l.passiveListener?{passive:!1,capture:c}:c),r[d](s.end,e.onTouchEnd,t),s.cancel&&r[d](s.cancel,e.onTouchEnd,t)}else r[d](s.start,e.onTouchStart,!1),i[d](s.move,e.onTouchMove,c),i[d](s.end,e.onTouchEnd,!1);(n.preventClicks||n.preventClicksPropagation)&&r[d]("click",e.onClick,!0),n.cssMode&&o[d]("scroll",e.onScroll),n.updateOnWindowResize?e[u](a.ios||a.android?"resize orientationchange observerUpdate":"resize observerUpdate",Ls,!0):e[u]("observerUpdate",Ls,!0)};var Ns={attachEvents:function(){const e=this,t=Un(),{params:i,support:n}=e;e.onTouchStart=ks.bind(e),e.onTouchMove=As.bind(e),e.onTouchEnd=Os.bind(e),i.cssMode&&(e.onScroll=Ps.bind(e)),e.onClick=Ms.bind(e),n.touch&&!Is&&(t.addEventListener("touchstart",$s),Is=!0),Ds(e,"on")},detachEvents:function(){Ds(this,"off")}};const js=(e,t)=>e.grid&&t.grid&&t.grid.rows>1;var zs={setBreakpoint:function(){const e=this,{activeIndex:t,initialized:i,loopedSlides:n=0,params:s,$el:r}=e,o=s.breakpoints;if(!o||o&&0===Object.keys(o).length)return;const a=e.getBreakpoint(o,e.params.breakpointsBase,e.el);if(!a||e.currentBreakpoint===a)return;const l=(a in o?o[a]:void 0)||e.originalParams,c=js(e,s),d=js(e,l),u=s.enabled;c&&!d?(r.removeClass(`${s.containerModifierClass}grid ${s.containerModifierClass}grid-column`),e.emitContainerClasses()):!c&&d&&(r.addClass(`${s.containerModifierClass}grid`),(l.grid.fill&&"column"===l.grid.fill||!l.grid.fill&&"column"===s.grid.fill)&&r.addClass(`${s.containerModifierClass}grid-column`),e.emitContainerClasses()),["navigation","pagination","scrollbar"].forEach((t=>{const i=s[t]&&s[t].enabled,n=l[t]&&l[t].enabled;i&&!n&&e[t].disable(),!i&&n&&e[t].enable()}));const p=l.direction&&l.direction!==s.direction,h=s.loop&&(l.slidesPerView!==s.slidesPerView||p);p&&i&&e.changeDirection(),ps(e.params,l);const f=e.params.enabled;Object.assign(e,{allowTouchMove:e.params.allowTouchMove,allowSlideNext:e.params.allowSlideNext,allowSlidePrev:e.params.allowSlidePrev}),u&&!f?e.disable():!u&&f&&e.enable(),e.currentBreakpoint=a,e.emit("_beforeBreakpoint",l),h&&i&&(e.loopDestroy(),e.loopCreate(),e.updateSlides(),e.slideTo(t-n+e.loopedSlides,0,!1)),e.emit("breakpoint",l)},getBreakpoint:function(e,t,i){if(void 0===t&&(t="window"),!e||"container"===t&&!i)return;let n=!1;const s=Jn(),r="window"===t?s.innerHeight:i.clientHeight,o=Object.keys(e).map((e=>{if("string"==typeof e&&0===e.indexOf("@")){const t=parseFloat(e.substr(1));return{value:r*t,point:e}}return{value:e,point:e}}));o.sort(((e,t)=>parseInt(e.value,10)-parseInt(t.value,10)));for(let e=0;e<o.length;e+=1){const{point:r,value:a}=o[e];"window"===t?s.matchMedia(`(min-width: ${a}px)`).matches&&(n=r):a<=i.clientWidth&&(n=r)}return n||"max"}};var Bs={addClasses:function(){const e=this,{classNames:t,params:i,rtl:n,$el:s,device:r,support:o}=e,a=function(e,t){const i=[];return e.forEach((e=>{"object"==typeof e?Object.keys(e).forEach((n=>{e[n]&&i.push(t+n)})):"string"==typeof e&&i.push(t+e)})),i}(["initialized",i.direction,{"pointer-events":!o.touch},{"free-mode":e.params.freeMode&&i.freeMode.enabled},{autoheight:i.autoHeight},{rtl:n},{grid:i.grid&&i.grid.rows>1},{"grid-column":i.grid&&i.grid.rows>1&&"column"===i.grid.fill},{android:r.android},{ios:r.ios},{"css-mode":i.cssMode},{centered:i.cssMode&&i.centeredSlides},{"watch-progress":i.watchSlidesProgress}],i.containerModifierClass);t.push(...a),s.addClass([...t].join(" ")),e.emitContainerClasses()},removeClasses:function(){const{$el:e,classNames:t}=this;e.removeClass(t.join(" ")),this.emitContainerClasses()}};var Hs={init:!0,direction:"horizontal",touchEventsTarget:"wrapper",initialSlide:0,speed:300,cssMode:!1,updateOnWindowResize:!0,resizeObserver:!0,nested:!1,createElements:!1,enabled:!0,focusableElements:"input, select, option, textarea, button, video, label",width:null,height:null,preventInteractionOnTransition:!1,userAgent:null,url:null,edgeSwipeDetection:!1,edgeSwipeThreshold:20,autoHeight:!1,setWrapperSize:!1,virtualTranslate:!1,effect:"slide",breakpoints:void 0,breakpointsBase:"window",spaceBetween:0,slidesPerView:1,slidesPerGroup:1,slidesPerGroupSkip:0,slidesPerGroupAuto:!1,centeredSlides:!1,centeredSlidesBounds:!1,slidesOffsetBefore:0,slidesOffsetAfter:0,normalizeSlideIndex:!0,centerInsufficientSlides:!1,watchOverflow:!0,roundLengths:!1,touchRatio:1,touchAngle:45,simulateTouch:!0,shortSwipes:!0,longSwipes:!0,longSwipesRatio:.5,longSwipesMs:300,followFinger:!0,allowTouchMove:!0,threshold:0,touchMoveStopPropagation:!1,touchStartPreventDefault:!0,touchStartForcePreventDefault:!1,touchReleaseOnEdges:!1,uniqueNavElements:!0,resistance:!0,resistanceRatio:.85,watchSlidesProgress:!1,grabCursor:!1,preventClicks:!0,preventClicksPropagation:!0,slideToClickedSlide:!1,preloadImages:!0,updateOnImagesReady:!0,loop:!1,loopAdditionalSlides:0,loopedSlides:null,loopFillGroupWithBlank:!1,loopPreventsSlide:!0,rewind:!1,allowSlidePrev:!0,allowSlideNext:!0,swipeHandler:null,noSwiping:!0,noSwipingClass:"swiper-no-swiping",noSwipingSelector:null,passiveListeners:!0,maxBackfaceHiddenSlides:10,containerModifierClass:"swiper-",slideClass:"swiper-slide",slideBlankClass:"swiper-slide-invisible-blank",slideActiveClass:"swiper-slide-active",slideDuplicateActiveClass:"swiper-slide-duplicate-active",slideVisibleClass:"swiper-slide-visible",slideDuplicateClass:"swiper-slide-duplicate",slideNextClass:"swiper-slide-next",slideDuplicateNextClass:"swiper-slide-duplicate-next",slidePrevClass:"swiper-slide-prev",slideDuplicatePrevClass:"swiper-slide-duplicate-prev",wrapperClass:"swiper-wrapper",runCallbacksOnInit:!0,_emitClasses:!1};function Fs(e,t){return function(i){void 0===i&&(i={});const n=Object.keys(i)[0],s=i[n];"object"==typeof s&&null!==s?(["navigation","pagination","scrollbar"].indexOf(n)>=0&&!0===e[n]&&(e[n]={auto:!0}),n in e&&"enabled"in s?(!0===e[n]&&(e[n]={enabled:!0}),"object"!=typeof e[n]||"enabled"in e[n]||(e[n].enabled=!0),e[n]||(e[n]={enabled:!1}),ps(t,i)):ps(t,i)):ps(t,i)}}const Gs={eventsEmitter:ys,update:Cs,translate:Es,transition:{setTransition:function(e,t){const i=this;i.params.cssMode||i.$wrapperEl.transition(e),i.emit("setTransition",e,t)},transitionStart:function(e,t){void 0===e&&(e=!0);const i=this,{params:n}=i;n.cssMode||(n.autoHeight&&i.updateAutoHeight(),Ts({swiper:i,runCallbacks:e,direction:t,step:"Start"}))},transitionEnd:function(e,t){void 0===e&&(e=!0);const i=this,{params:n}=i;i.animating=!1,n.cssMode||(i.setTransition(0),Ts({swiper:i,runCallbacks:e,direction:t,step:"End"}))}},slide:xs,loop:Ss,grabCursor:{setGrabCursor:function(e){const t=this;if(t.support.touch||!t.params.simulateTouch||t.params.watchOverflow&&t.isLocked||t.params.cssMode)return;const i="container"===t.params.touchEventsTarget?t.el:t.wrapperEl;i.style.cursor="move",i.style.cursor=e?"grabbing":"grab"},unsetGrabCursor:function(){const e=this;e.support.touch||e.params.watchOverflow&&e.isLocked||e.params.cssMode||(e["container"===e.params.touchEventsTarget?"el":"wrapperEl"].style.cursor="")}},events:Ns,breakpoints:zs,checkOverflow:{checkOverflow:function(){const e=this,{isLocked:t,params:i}=e,{slidesOffsetBefore:n}=i;if(n){const t=e.slides.length-1,i=e.slidesGrid[t]+e.slidesSizesGrid[t]+2*n;e.isLocked=e.size>i}else e.isLocked=1===e.snapGrid.length;!0===i.allowSlideNext&&(e.allowSlideNext=!e.isLocked),!0===i.allowSlidePrev&&(e.allowSlidePrev=!e.isLocked),t&&t!==e.isLocked&&(e.isEnd=!1),t!==e.isLocked&&e.emit(e.isLocked?"lock":"unlock")}},classes:Bs,images:{loadImage:function(e,t,i,n,s,r){const o=Jn();let a;function l(){r&&r()}os(e).parent("picture")[0]||e.complete&&s?l():t?(a=new o.Image,a.onload=l,a.onerror=l,n&&(a.sizes=n),i&&(a.srcset=i),t&&(a.src=t)):l()},preloadImages:function(){const e=this;function t(){null!=e&&e&&!e.destroyed&&(void 0!==e.imagesLoaded&&(e.imagesLoaded+=1),e.imagesLoaded===e.imagesToLoad.length&&(e.params.updateOnImagesReady&&e.update(),e.emit("imagesReady")))}e.imagesToLoad=e.$el.find("img");for(let i=0;i<e.imagesToLoad.length;i+=1){const n=e.imagesToLoad[i];e.loadImage(n,n.currentSrc||n.getAttribute("src"),n.srcset||n.getAttribute("srcset"),n.sizes||n.getAttribute("sizes"),!0,t)}}}},qs={};class Ws{constructor(){let e,t;for(var i=arguments.length,n=new Array(i),s=0;s<i;s++)n[s]=arguments[s];if(1===n.length&&n[0].constructor&&"Object"===Object.prototype.toString.call(n[0]).slice(8,-1)?t=n[0]:[e,t]=n,t||(t={}),t=ps({},t),e&&!t.el&&(t.el=e),t.el&&os(t.el).length>1){const e=[];return os(t.el).each((i=>{const n=ps({},t,{el:i});e.push(new Ws(n))})),e}const r=this;r.__swiper__=!0,r.support=bs(),r.device=_s({userAgent:t.userAgent}),r.browser=ws(),r.eventsListeners={},r.eventsAnyListeners=[],r.modules=[...r.__modules__],t.modules&&Array.isArray(t.modules)&&r.modules.push(...t.modules);const o={};r.modules.forEach((e=>{e({swiper:r,extendParams:Fs(t,o),on:r.on.bind(r),once:r.once.bind(r),off:r.off.bind(r),emit:r.emit.bind(r)})}));const a=ps({},Hs,o);return r.params=ps({},a,qs,t),r.originalParams=ps({},r.params),r.passedParams=ps({},t),r.params&&r.params.on&&Object.keys(r.params.on).forEach((e=>{r.on(e,r.params.on[e])})),r.params&&r.params.onAny&&r.onAny(r.params.onAny),r.$=os,Object.assign(r,{enabled:r.params.enabled,el:e,classNames:[],slides:os(),slidesGrid:[],snapGrid:[],slidesSizesGrid:[],isHorizontal:()=>"horizontal"===r.params.direction,isVertical:()=>"vertical"===r.params.direction,activeIndex:0,realIndex:0,isBeginning:!0,isEnd:!1,translate:0,previousTranslate:0,progress:0,velocity:0,animating:!1,allowSlideNext:r.params.allowSlideNext,allowSlidePrev:r.params.allowSlidePrev,touchEvents:function(){const e=["touchstart","touchmove","touchend","touchcancel"],t=["pointerdown","pointermove","pointerup"];return r.touchEventsTouch={start:e[0],move:e[1],end:e[2],cancel:e[3]},r.touchEventsDesktop={start:t[0],move:t[1],end:t[2]},r.support.touch||!r.params.simulateTouch?r.touchEventsTouch:r.touchEventsDesktop}(),touchEventsData:{isTouched:void 0,isMoved:void 0,allowTouchCallbacks:void 0,touchStartTime:void 0,isScrolling:void 0,currentTranslate:void 0,startTranslate:void 0,allowThresholdMove:void 0,focusableElements:r.params.focusableElements,lastClickTime:ls(),clickTimeout:void 0,velocities:[],allowMomentumBounce:void 0,isTouchEvent:void 0,startMoving:void 0},allowClick:!0,allowTouchMove:r.params.allowTouchMove,touches:{startX:0,startY:0,currentX:0,currentY:0,diff:0},imagesToLoad:[],imagesLoaded:0}),r.emit("_swiper"),r.params.init&&r.init(),r}enable(){const e=this;e.enabled||(e.enabled=!0,e.params.grabCursor&&e.setGrabCursor(),e.emit("enable"))}disable(){const e=this;e.enabled&&(e.enabled=!1,e.params.grabCursor&&e.unsetGrabCursor(),e.emit("disable"))}setProgress(e,t){const i=this;e=Math.min(Math.max(e,0),1);const n=i.minTranslate(),s=(i.maxTranslate()-n)*e+n;i.translateTo(s,void 0===t?0:t),i.updateActiveIndex(),i.updateSlidesClasses()}emitContainerClasses(){const e=this;if(!e.params._emitClasses||!e.el)return;const t=e.el.className.split(" ").filter((t=>0===t.indexOf("swiper")||0===t.indexOf(e.params.containerModifierClass)));e.emit("_containerClasses",t.join(" "))}getSlideClasses(e){const t=this;return t.destroyed?"":e.className.split(" ").filter((e=>0===e.indexOf("swiper-slide")||0===e.indexOf(t.params.slideClass))).join(" ")}emitSlidesClasses(){const e=this;if(!e.params._emitClasses||!e.el)return;const t=[];e.slides.each((i=>{const n=e.getSlideClasses(i);t.push({slideEl:i,classNames:n}),e.emit("_slideClass",i,n)})),e.emit("_slideClasses",t)}slidesPerViewDynamic(e,t){void 0===e&&(e="current"),void 0===t&&(t=!1);const{params:i,slides:n,slidesGrid:s,slidesSizesGrid:r,size:o,activeIndex:a}=this;let l=1;if(i.centeredSlides){let e,t=n[a].swiperSlideSize;for(let i=a+1;i<n.length;i+=1)n[i]&&!e&&(t+=n[i].swiperSlideSize,l+=1,t>o&&(e=!0));for(let i=a-1;i>=0;i-=1)n[i]&&!e&&(t+=n[i].swiperSlideSize,l+=1,t>o&&(e=!0))}else if("current"===e)for(let e=a+1;e<n.length;e+=1){(t?s[e]+r[e]-s[a]<o:s[e]-s[a]<o)&&(l+=1)}else for(let e=a-1;e>=0;e-=1){s[a]-s[e]<o&&(l+=1)}return l}update(){const e=this;if(!e||e.destroyed)return;const{snapGrid:t,params:i}=e;function n(){const t=e.rtlTranslate?-1*e.translate:e.translate,i=Math.min(Math.max(t,e.maxTranslate()),e.minTranslate());e.setTranslate(i),e.updateActiveIndex(),e.updateSlidesClasses()}let s;i.breakpoints&&e.setBreakpoint(),e.updateSize(),e.updateSlides(),e.updateProgress(),e.updateSlidesClasses(),e.params.freeMode&&e.params.freeMode.enabled?(n(),e.params.autoHeight&&e.updateAutoHeight()):(s=("auto"===e.params.slidesPerView||e.params.slidesPerView>1)&&e.isEnd&&!e.params.centeredSlides?e.slideTo(e.slides.length-1,0,!1,!0):e.slideTo(e.activeIndex,0,!1,!0),s||n()),i.watchOverflow&&t!==e.snapGrid&&e.checkOverflow(),e.emit("update")}changeDirection(e,t){void 0===t&&(t=!0);const i=this,n=i.params.direction;return e||(e="horizontal"===n?"vertical":"horizontal"),e===n||"horizontal"!==e&&"vertical"!==e||(i.$el.removeClass(`${i.params.containerModifierClass}${n}`).addClass(`${i.params.containerModifierClass}${e}`),i.emitContainerClasses(),i.params.direction=e,i.slides.each((t=>{"vertical"===e?t.style.width="":t.style.height=""})),i.emit("changeDirection"),t&&i.update()),i}mount(e){const t=this;if(t.mounted)return!0;const i=os(e||t.params.el);if(!(e=i[0]))return!1;e.swiper=t;const n=()=>`.${(t.params.wrapperClass||"").trim().split(" ").join(".")}`;let s=(()=>{if(e&&e.shadowRoot&&e.shadowRoot.querySelector){const t=os(e.shadowRoot.querySelector(n()));return t.children=e=>i.children(e),t}return i.children?i.children(n()):os(i).children(n())})();if(0===s.length&&t.params.createElements){const e=Un().createElement("div");s=os(e),e.className=t.params.wrapperClass,i.append(e),i.children(`.${t.params.slideClass}`).each((e=>{s.append(e)}))}return Object.assign(t,{$el:i,el:e,$wrapperEl:s,wrapperEl:s[0],mounted:!0,rtl:"rtl"===e.dir.toLowerCase()||"rtl"===i.css("direction"),rtlTranslate:"horizontal"===t.params.direction&&("rtl"===e.dir.toLowerCase()||"rtl"===i.css("direction")),wrongRTL:"-webkit-box"===s.css("display")}),!0}init(e){const t=this;if(t.initialized)return t;return!1===t.mount(e)||(t.emit("beforeInit"),t.params.breakpoints&&t.setBreakpoint(),t.addClasses(),t.params.loop&&t.loopCreate(),t.updateSize(),t.updateSlides(),t.params.watchOverflow&&t.checkOverflow(),t.params.grabCursor&&t.enabled&&t.setGrabCursor(),t.params.preloadImages&&t.preloadImages(),t.params.loop?t.slideTo(t.params.initialSlide+t.loopedSlides,0,t.params.runCallbacksOnInit,!1,!0):t.slideTo(t.params.initialSlide,0,t.params.runCallbacksOnInit,!1,!0),t.attachEvents(),t.initialized=!0,t.emit("init"),t.emit("afterInit")),t}destroy(e,t){void 0===e&&(e=!0),void 0===t&&(t=!0);const i=this,{params:n,$el:s,$wrapperEl:r,slides:o}=i;return void 0===i.params||i.destroyed||(i.emit("beforeDestroy"),i.initialized=!1,i.detachEvents(),n.loop&&i.loopDestroy(),t&&(i.removeClasses(),s.removeAttr("style"),r.removeAttr("style"),o&&o.length&&o.removeClass([n.slideVisibleClass,n.slideActiveClass,n.slideNextClass,n.slidePrevClass].join(" ")).removeAttr("style").removeAttr("data-swiper-slide-index")),i.emit("destroy"),Object.keys(i.eventsListeners).forEach((e=>{i.off(e)})),!1!==e&&(i.$el[0].swiper=null,function(e){const t=e;Object.keys(t).forEach((e=>{try{t[e]=null}catch(e){}try{delete t[e]}catch(e){}}))}(i)),i.destroyed=!0),null}static extendDefaults(e){ps(qs,e)}static get extendedDefaults(){return qs}static get defaults(){return Hs}static installModule(e){Ws.prototype.__modules__||(Ws.prototype.__modules__=[]);const t=Ws.prototype.__modules__;"function"==typeof e&&t.indexOf(e)<0&&t.push(e)}static use(e){return Array.isArray(e)?(e.forEach((e=>Ws.installModule(e))),Ws):(Ws.installModule(e),Ws)}}Object.keys(Gs).forEach((e=>{Object.keys(Gs[e]).forEach((t=>{Ws.prototype[t]=Gs[e][t]}))})),Ws.use([function(e){let{swiper:t,on:i,emit:n}=e;const s=Jn();let r=null,o=null;const a=()=>{t&&!t.destroyed&&t.initialized&&(n("beforeResize"),n("resize"))},l=()=>{t&&!t.destroyed&&t.initialized&&n("orientationchange")};i("init",(()=>{t.params.resizeObserver&&void 0!==s.ResizeObserver?t&&!t.destroyed&&t.initialized&&(r=new ResizeObserver((e=>{o=s.requestAnimationFrame((()=>{const{width:i,height:n}=t;let s=i,r=n;e.forEach((e=>{let{contentBoxSize:i,contentRect:n,target:o}=e;o&&o!==t.el||(s=n?n.width:(i[0]||i).inlineSize,r=n?n.height:(i[0]||i).blockSize)})),s===i&&r===n||a()}))})),r.observe(t.el)):(s.addEventListener("resize",a),s.addEventListener("orientationchange",l))})),i("destroy",(()=>{o&&s.cancelAnimationFrame(o),r&&r.unobserve&&t.el&&(r.unobserve(t.el),r=null),s.removeEventListener("resize",a),s.removeEventListener("orientationchange",l)}))},function(e){let{swiper:t,extendParams:i,on:n,emit:s}=e;const r=[],o=Jn(),a=function(e,t){void 0===t&&(t={});const i=new(o.MutationObserver||o.WebkitMutationObserver)((e=>{if(1===e.length)return void s("observerUpdate",e[0]);const t=function(){s("observerUpdate",e[0])};o.requestAnimationFrame?o.requestAnimationFrame(t):o.setTimeout(t,0)}));i.observe(e,{attributes:void 0===t.attributes||t.attributes,childList:void 0===t.childList||t.childList,characterData:void 0===t.characterData||t.characterData}),r.push(i)};i({observer:!1,observeParents:!1,observeSlideChildren:!1}),n("init",(()=>{if(t.params.observer){if(t.params.observeParents){const e=t.$el.parents();for(let t=0;t<e.length;t+=1)a(e[t])}a(t.$el[0],{childList:t.params.observeSlideChildren}),a(t.$wrapperEl[0],{attributes:!1})}})),n("destroy",(()=>{r.forEach((e=>{e.disconnect()})),r.splice(0,r.length)}))}]);var Rs=Ws;function Vs(e,t,i,n){const s=Un();return e.params.createElements&&Object.keys(n).forEach((r=>{if(!i[r]&&!0===i.auto){let o=e.$el.children(`.${n[r]}`)[0];o||(o=s.createElement("div"),o.className=n[r],e.$el.append(o)),i[r]=o,t[r]=o}})),i}function Ys(e){let{swiper:t,extendParams:i,on:n,emit:s}=e;function r(e){let i;return e&&(i=os(e),t.params.uniqueNavElements&&"string"==typeof e&&i.length>1&&1===t.$el.find(e).length&&(i=t.$el.find(e))),i}function o(e,i){const n=t.params.navigation;e&&e.length>0&&(e[i?"addClass":"removeClass"](n.disabledClass),e[0]&&"BUTTON"===e[0].tagName&&(e[0].disabled=i),t.params.watchOverflow&&t.enabled&&e[t.isLocked?"addClass":"removeClass"](n.lockClass))}function a(){if(t.params.loop)return;const{$nextEl:e,$prevEl:i}=t.navigation;o(i,t.isBeginning&&!t.params.rewind),o(e,t.isEnd&&!t.params.rewind)}function l(e){e.preventDefault(),(!t.isBeginning||t.params.loop||t.params.rewind)&&t.slidePrev()}function c(e){e.preventDefault(),(!t.isEnd||t.params.loop||t.params.rewind)&&t.slideNext()}function d(){const e=t.params.navigation;if(t.params.navigation=Vs(t,t.originalParams.navigation,t.params.navigation,{nextEl:"swiper-button-next",prevEl:"swiper-button-prev"}),!e.nextEl&&!e.prevEl)return;const i=r(e.nextEl),n=r(e.prevEl);i&&i.length>0&&i.on("click",c),n&&n.length>0&&n.on("click",l),Object.assign(t.navigation,{$nextEl:i,nextEl:i&&i[0],$prevEl:n,prevEl:n&&n[0]}),t.enabled||(i&&i.addClass(e.lockClass),n&&n.addClass(e.lockClass))}function u(){const{$nextEl:e,$prevEl:i}=t.navigation;e&&e.length&&(e.off("click",c),e.removeClass(t.params.navigation.disabledClass)),i&&i.length&&(i.off("click",l),i.removeClass(t.params.navigation.disabledClass))}i({navigation:{nextEl:null,prevEl:null,hideOnClick:!1,disabledClass:"swiper-button-disabled",hiddenClass:"swiper-button-hidden",lockClass:"swiper-button-lock",navigationDisabledClass:"swiper-navigation-disabled"}}),t.navigation={nextEl:null,$nextEl:null,prevEl:null,$prevEl:null},n("init",(()=>{!1===t.params.navigation.enabled?p():(d(),a())})),n("toEdge fromEdge lock unlock",(()=>{a()})),n("destroy",(()=>{u()})),n("enable disable",(()=>{const{$nextEl:e,$prevEl:i}=t.navigation;e&&e[t.enabled?"removeClass":"addClass"](t.params.navigation.lockClass),i&&i[t.enabled?"removeClass":"addClass"](t.params.navigation.lockClass)})),n("click",((e,i)=>{const{$nextEl:n,$prevEl:r}=t.navigation,o=i.target;if(t.params.navigation.hideOnClick&&!os(o).is(r)&&!os(o).is(n)){if(t.pagination&&t.params.pagination&&t.params.pagination.clickable&&(t.pagination.el===o||t.pagination.el.contains(o)))return;let e;n?e=n.hasClass(t.params.navigation.hiddenClass):r&&(e=r.hasClass(t.params.navigation.hiddenClass)),s(!0===e?"navigationShow":"navigationHide"),n&&n.toggleClass(t.params.navigation.hiddenClass),r&&r.toggleClass(t.params.navigation.hiddenClass)}}));const p=()=>{t.$el.addClass(t.params.navigation.navigationDisabledClass),u()};Object.assign(t.navigation,{enable:()=>{t.$el.removeClass(t.params.navigation.navigationDisabledClass),d(),a()},disable:p,update:a,init:d,destroy:u})}function Xs(e){return void 0===e&&(e=""),`.${e.trim().replace(/([\.:!\/])/g,"\\$1").replace(/ /g,".")}`}function Ks(e){let{swiper:t,extendParams:i,on:n,emit:s}=e;const r="swiper-pagination";let o;i({pagination:{el:null,bulletElement:"span",clickable:!1,hideOnClick:!1,renderBullet:null,renderProgressbar:null,renderFraction:null,renderCustom:null,progressbarOpposite:!1,type:"bullets",dynamicBullets:!1,dynamicMainBullets:1,formatFractionCurrent:e=>e,formatFractionTotal:e=>e,bulletClass:`${r}-bullet`,bulletActiveClass:`${r}-bullet-active`,modifierClass:`${r}-`,currentClass:`${r}-current`,totalClass:`${r}-total`,hiddenClass:`${r}-hidden`,progressbarFillClass:`${r}-progressbar-fill`,progressbarOppositeClass:`${r}-progressbar-opposite`,clickableClass:`${r}-clickable`,lockClass:`${r}-lock`,horizontalClass:`${r}-horizontal`,verticalClass:`${r}-vertical`,paginationDisabledClass:`${r}-disabled`}}),t.pagination={el:null,$el:null,bullets:[]};let a=0;function l(){return!t.params.pagination.el||!t.pagination.el||!t.pagination.$el||0===t.pagination.$el.length}function c(e,i){const{bulletActiveClass:n}=t.params.pagination;e[i]().addClass(`${n}-${i}`)[i]().addClass(`${n}-${i}-${i}`)}function d(){const e=t.rtl,i=t.params.pagination;if(l())return;const n=t.virtual&&t.params.virtual.enabled?t.virtual.slides.length:t.slides.length,r=t.pagination.$el;let d;const u=t.params.loop?Math.ceil((n-2*t.loopedSlides)/t.params.slidesPerGroup):t.snapGrid.length;if(t.params.loop?(d=Math.ceil((t.activeIndex-t.loopedSlides)/t.params.slidesPerGroup),d>n-1-2*t.loopedSlides&&(d-=n-2*t.loopedSlides),d>u-1&&(d-=u),d<0&&"bullets"!==t.params.paginationType&&(d=u+d)):d=void 0!==t.snapIndex?t.snapIndex:t.activeIndex||0,"bullets"===i.type&&t.pagination.bullets&&t.pagination.bullets.length>0){const n=t.pagination.bullets;let s,l,u;if(i.dynamicBullets&&(o=n.eq(0)[t.isHorizontal()?"outerWidth":"outerHeight"](!0),r.css(t.isHorizontal()?"width":"height",o*(i.dynamicMainBullets+4)+"px"),i.dynamicMainBullets>1&&void 0!==t.previousIndex&&(a+=d-(t.previousIndex-t.loopedSlides||0),a>i.dynamicMainBullets-1?a=i.dynamicMainBullets-1:a<0&&(a=0)),s=Math.max(d-a,0),l=s+(Math.min(n.length,i.dynamicMainBullets)-1),u=(l+s)/2),n.removeClass(["","-next","-next-next","-prev","-prev-prev","-main"].map((e=>`${i.bulletActiveClass}${e}`)).join(" ")),r.length>1)n.each((e=>{const t=os(e),n=t.index();n===d&&t.addClass(i.bulletActiveClass),i.dynamicBullets&&(n>=s&&n<=l&&t.addClass(`${i.bulletActiveClass}-main`),n===s&&c(t,"prev"),n===l&&c(t,"next"))}));else{const e=n.eq(d),r=e.index();if(e.addClass(i.bulletActiveClass),i.dynamicBullets){const e=n.eq(s),o=n.eq(l);for(let e=s;e<=l;e+=1)n.eq(e).addClass(`${i.bulletActiveClass}-main`);if(t.params.loop)if(r>=n.length){for(let e=i.dynamicMainBullets;e>=0;e-=1)n.eq(n.length-e).addClass(`${i.bulletActiveClass}-main`);n.eq(n.length-i.dynamicMainBullets-1).addClass(`${i.bulletActiveClass}-prev`)}else c(e,"prev"),c(o,"next");else c(e,"prev"),c(o,"next")}}if(i.dynamicBullets){const s=Math.min(n.length,i.dynamicMainBullets+4),r=(o*s-o)/2-u*o,a=e?"right":"left";n.css(t.isHorizontal()?a:"top",`${r}px`)}}if("fraction"===i.type&&(r.find(Xs(i.currentClass)).text(i.formatFractionCurrent(d+1)),r.find(Xs(i.totalClass)).text(i.formatFractionTotal(u))),"progressbar"===i.type){let e;e=i.progressbarOpposite?t.isHorizontal()?"vertical":"horizontal":t.isHorizontal()?"horizontal":"vertical";const n=(d+1)/u;let s=1,o=1;"horizontal"===e?s=n:o=n,r.find(Xs(i.progressbarFillClass)).transform(`translate3d(0,0,0) scaleX(${s}) scaleY(${o})`).transition(t.params.speed)}"custom"===i.type&&i.renderCustom?(r.html(i.renderCustom(t,d+1,u)),s("paginationRender",r[0])):s("paginationUpdate",r[0]),t.params.watchOverflow&&t.enabled&&r[t.isLocked?"addClass":"removeClass"](i.lockClass)}function u(){const e=t.params.pagination;if(l())return;const i=t.virtual&&t.params.virtual.enabled?t.virtual.slides.length:t.slides.length,n=t.pagination.$el;let r="";if("bullets"===e.type){let s=t.params.loop?Math.ceil((i-2*t.loopedSlides)/t.params.slidesPerGroup):t.snapGrid.length;t.params.freeMode&&t.params.freeMode.enabled&&!t.params.loop&&s>i&&(s=i);for(let i=0;i<s;i+=1)e.renderBullet?r+=e.renderBullet.call(t,i,e.bulletClass):r+=`<${e.bulletElement} class="${e.bulletClass}"></${e.bulletElement}>`;n.html(r),t.pagination.bullets=n.find(Xs(e.bulletClass))}"fraction"===e.type&&(r=e.renderFraction?e.renderFraction.call(t,e.currentClass,e.totalClass):`<span class="${e.currentClass}"></span> / <span class="${e.totalClass}"></span>`,n.html(r)),"progressbar"===e.type&&(r=e.renderProgressbar?e.renderProgressbar.call(t,e.progressbarFillClass):`<span class="${e.progressbarFillClass}"></span>`,n.html(r)),"custom"!==e.type&&s("paginationRender",t.pagination.$el[0])}function p(){t.params.pagination=Vs(t,t.originalParams.pagination,t.params.pagination,{el:"swiper-pagination"});const e=t.params.pagination;if(!e.el)return;let i=os(e.el);0!==i.length&&(t.params.uniqueNavElements&&"string"==typeof e.el&&i.length>1&&(i=t.$el.find(e.el),i.length>1&&(i=i.filter((e=>os(e).parents(".swiper")[0]===t.el)))),"bullets"===e.type&&e.clickable&&i.addClass(e.clickableClass),i.addClass(e.modifierClass+e.type),i.addClass(t.isHorizontal()?e.horizontalClass:e.verticalClass),"bullets"===e.type&&e.dynamicBullets&&(i.addClass(`${e.modifierClass}${e.type}-dynamic`),a=0,e.dynamicMainBullets<1&&(e.dynamicMainBullets=1)),"progressbar"===e.type&&e.progressbarOpposite&&i.addClass(e.progressbarOppositeClass),e.clickable&&i.on("click",Xs(e.bulletClass),(function(e){e.preventDefault();let i=os(this).index()*t.params.slidesPerGroup;t.params.loop&&(i+=t.loopedSlides),t.slideTo(i)})),Object.assign(t.pagination,{$el:i,el:i[0]}),t.enabled||i.addClass(e.lockClass))}function h(){const e=t.params.pagination;if(l())return;const i=t.pagination.$el;i.removeClass(e.hiddenClass),i.removeClass(e.modifierClass+e.type),i.removeClass(t.isHorizontal()?e.horizontalClass:e.verticalClass),t.pagination.bullets&&t.pagination.bullets.removeClass&&t.pagination.bullets.removeClass(e.bulletActiveClass),e.clickable&&i.off("click",Xs(e.bulletClass))}n("init",(()=>{!1===t.params.pagination.enabled?f():(p(),u(),d())})),n("activeIndexChange",(()=>{(t.params.loop||void 0===t.snapIndex)&&d()})),n("snapIndexChange",(()=>{t.params.loop||d()})),n("slidesLengthChange",(()=>{t.params.loop&&(u(),d())})),n("snapGridLengthChange",(()=>{t.params.loop||(u(),d())})),n("destroy",(()=>{h()})),n("enable disable",(()=>{const{$el:e}=t.pagination;e&&e[t.enabled?"removeClass":"addClass"](t.params.pagination.lockClass)})),n("lock unlock",(()=>{d()})),n("click",((e,i)=>{const n=i.target,{$el:r}=t.pagination;if(t.params.pagination.el&&t.params.pagination.hideOnClick&&r.length>0&&!os(n).hasClass(t.params.pagination.bulletClass)){if(t.navigation&&(t.navigation.nextEl&&n===t.navigation.nextEl||t.navigation.prevEl&&n===t.navigation.prevEl))return;const e=r.hasClass(t.params.pagination.hiddenClass);s(!0===e?"paginationShow":"paginationHide"),r.toggleClass(t.params.pagination.hiddenClass)}}));const f=()=>{t.$el.addClass(t.params.pagination.paginationDisabledClass),t.pagination.$el&&t.pagination.$el.addClass(t.params.pagination.paginationDisabledClass),h()};Object.assign(t.pagination,{enable:()=>{t.$el.removeClass(t.params.pagination.paginationDisabledClass),t.pagination.$el&&t.pagination.$el.removeClass(t.params.pagination.paginationDisabledClass),p(),u(),d()},disable:f,render:u,update:d,init:p,destroy:h})}function Us(e){let{swiper:t,extendParams:i,on:n}=e;i({thumbs:{swiper:null,multipleActiveThumbs:!0,autoScrollOffset:0,slideThumbActiveClass:"swiper-slide-thumb-active",thumbsContainerClass:"swiper-thumbs"}});let s=!1,r=!1;function o(){const e=t.thumbs.swiper;if(!e||e.destroyed)return;const i=e.clickedIndex,n=e.clickedSlide;if(n&&os(n).hasClass(t.params.thumbs.slideThumbActiveClass))return;if(null==i)return;let s;if(s=e.params.loop?parseInt(os(e.clickedSlide).attr("data-swiper-slide-index"),10):i,t.params.loop){let e=t.activeIndex;t.slides.eq(e).hasClass(t.params.slideDuplicateClass)&&(t.loopFix(),t._clientLeft=t.$wrapperEl[0].clientLeft,e=t.activeIndex);const i=t.slides.eq(e).prevAll(`[data-swiper-slide-index="${s}"]`).eq(0).index(),n=t.slides.eq(e).nextAll(`[data-swiper-slide-index="${s}"]`).eq(0).index();s=void 0===i?n:void 0===n?i:n-e<e-i?n:i}t.slideTo(s)}function a(){const{thumbs:e}=t.params;if(s)return!1;s=!0;const i=t.constructor;if(e.swiper instanceof i)t.thumbs.swiper=e.swiper,Object.assign(t.thumbs.swiper.originalParams,{watchSlidesProgress:!0,slideToClickedSlide:!1}),Object.assign(t.thumbs.swiper.params,{watchSlidesProgress:!0,slideToClickedSlide:!1});else if(ds(e.swiper)){const n=Object.assign({},e.swiper);Object.assign(n,{watchSlidesProgress:!0,slideToClickedSlide:!1}),t.thumbs.swiper=new i(n),r=!0}return t.thumbs.swiper.$el.addClass(t.params.thumbs.thumbsContainerClass),t.thumbs.swiper.on("tap",o),!0}function l(e){const i=t.thumbs.swiper;if(!i||i.destroyed)return;const n="auto"===i.params.slidesPerView?i.slidesPerViewDynamic():i.params.slidesPerView,s=t.params.thumbs.autoScrollOffset,r=s&&!i.params.loop;if(t.realIndex!==i.realIndex||r){let o,a,l=i.activeIndex;if(i.params.loop){i.slides.eq(l).hasClass(i.params.slideDuplicateClass)&&(i.loopFix(),i._clientLeft=i.$wrapperEl[0].clientLeft,l=i.activeIndex);const e=i.slides.eq(l).prevAll(`[data-swiper-slide-index="${t.realIndex}"]`).eq(0).index(),n=i.slides.eq(l).nextAll(`[data-swiper-slide-index="${t.realIndex}"]`).eq(0).index();o=void 0===e?n:void 0===n?e:n-l==l-e?i.params.slidesPerGroup>1?n:l:n-l<l-e?n:e,a=t.activeIndex>t.previousIndex?"next":"prev"}else o=t.realIndex,a=o>t.previousIndex?"next":"prev";r&&(o+="next"===a?s:-1*s),i.visibleSlidesIndexes&&i.visibleSlidesIndexes.indexOf(o)<0&&(i.params.centeredSlides?o=o>l?o-Math.floor(n/2)+1:o+Math.floor(n/2)-1:o>l&&i.params.slidesPerGroup,i.slideTo(o,e?0:void 0))}let o=1;const a=t.params.thumbs.slideThumbActiveClass;if(t.params.slidesPerView>1&&!t.params.centeredSlides&&(o=t.params.slidesPerView),t.params.thumbs.multipleActiveThumbs||(o=1),o=Math.floor(o),i.slides.removeClass(a),i.params.loop||i.params.virtual&&i.params.virtual.enabled)for(let e=0;e<o;e+=1)i.$wrapperEl.children(`[data-swiper-slide-index="${t.realIndex+e}"]`).addClass(a);else for(let e=0;e<o;e+=1)i.slides.eq(t.realIndex+e).addClass(a)}t.thumbs={swiper:null},n("beforeInit",(()=>{const{thumbs:e}=t.params;e&&e.swiper&&(a(),l(!0))})),n("slideChange update resize observerUpdate",(()=>{l()})),n("setTransition",((e,i)=>{const n=t.thumbs.swiper;n&&!n.destroyed&&n.setTransition(i)})),n("beforeDestroy",(()=>{const e=t.thumbs.swiper;e&&!e.destroyed&&r&&e.destroy()})),Object.assign(t.thumbs,{init:a,update:l})}new(function(){function e(){t(this,e),this.initModules()}return s(e,[{key:"initModules",value:function(){var e;Vn(),e=new Rs(".ppage-slider-thumbs",{loop:!0,spaceBetween:10,slidesPerView:4,freeMode:!0,watchSlidesProgress:!0,touchRatio:.2,slideToClickedSlide:!0}),new Rs(".ppage-slider-main",{modules:[Ys,Ks,Us],loop:!0,spaceBetween:10,navigation:{nextEl:".swiper-button-next",prevEl:".swiper-button-prev"},thumbs:{swiper:e},on:{slideChange:function(){var e=this.activeIndex+1,t=document.querySelector(".ppage-slider-thumbs .swiper-slide:nth-child(".concat(e+1,")")),i=document.querySelector(".ppage-slider-thumbs .swiper-slide:nth-child(".concat(e-1,")"));t&&!t.classList.contains("swiper-slide-visible")?this.params.thumbs.swiper.slideNext():i&&!i.classList.contains("swiper-slide-visible")&&this.params.thumbs.swiper.slidePrev()}}}),$(".p-inp-num").each((function(){var e=$(this);e.find(".plus").on("click",(function(){e.parent().find("input").val(+e.parent().find("input").val()+1),e.parent().find("input").change()})),e.find(".minus").on("click",(function(){e.parent().find("input").val(+e.parent().find("input").val()-1),e.parent().find("input").change(),+e.parent().find("input").val()<1&&e.parent().find("input").val(1)}))})),$(".variable_inp").on("click",(function(){var e=$(this).attr("data-price");$("#price").val(e)}))}}]),e}())}()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,