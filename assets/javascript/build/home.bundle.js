!function(){var t={732:function(t){t.exports=function(){"use strict";function t(){return t=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&(t[i]=n[i])}return t},t.apply(this,arguments)}var e="undefined"!=typeof window,n=e&&!("onscroll"in window)||"undefined"!=typeof navigator&&/(gle|ing|ro)bot|crawl|spider/i.test(navigator.userAgent),i=e&&"IntersectionObserver"in window,s=e&&"classList"in document.createElement("p"),o=e&&window.devicePixelRatio>1,r={elements_selector:".lazy",container:n||e?document:null,threshold:300,thresholds:null,data_src:"src",data_srcset:"srcset",data_sizes:"sizes",data_bg:"bg",data_bg_hidpi:"bg-hidpi",data_bg_multi:"bg-multi",data_bg_multi_hidpi:"bg-multi-hidpi",data_bg_set:"bg-set",data_poster:"poster",class_applied:"applied",class_loading:"loading",class_loaded:"loaded",class_error:"error",class_entered:"entered",class_exited:"exited",unobserve_completed:!0,unobserve_entered:!1,cancel_on_exit:!0,callback_enter:null,callback_exit:null,callback_applied:null,callback_loading:null,callback_loaded:null,callback_error:null,callback_finish:null,callback_cancel:null,use_native:!1,restore_on_error:!1},a=function(e){return t({},r,e)},l=function(t,e){var n,i="LazyLoad::Initialized",s=new t(e);try{n=new CustomEvent(i,{detail:{instance:s}})}catch(t){(n=document.createEvent("CustomEvent")).initCustomEvent(i,!1,!1,{instance:s})}window.dispatchEvent(n)},c="src",u="srcset",d="sizes",h="poster",f="llOriginalAttrs",p="data",g="loading",m="loaded",_="applied",b="error",v="native",y="data-",w="ll-status",E=function(t,e){return t.getAttribute(y+e)},A=function(t){return E(t,w)},C=function(t,e){return function(t,e,n){var i="data-ll-status";null!==n?t.setAttribute(i,n):t.removeAttribute(i)}(t,0,e)},T=function(t){return C(t,null)},k=function(t){return null===A(t)},O=function(t){return A(t)===v},x=[g,m,_,b],L=function(t,e,n,i){t&&(void 0===i?void 0===n?t(e):t(e,n):t(e,n,i))},I=function(t,e){s?t.classList.add(e):t.className+=(t.className?" ":"")+e},S=function(t,e){s?t.classList.remove(e):t.className=t.className.replace(new RegExp("(^|\\s+)"+e+"(\\s+|$)")," ").replace(/^\s+/,"").replace(/\s+$/,"")},D=function(t){return t.llTempImage},N=function(t,e){if(e){var n=e._observer;n&&n.unobserve(t)}},P=function(t,e){t&&(t.loadingCount+=e)},M=function(t,e){t&&(t.toLoadCount=e)},j=function(t){for(var e,n=[],i=0;e=t.children[i];i+=1)"SOURCE"===e.tagName&&n.push(e);return n},H=function(t,e){var n=t.parentNode;n&&"PICTURE"===n.tagName&&j(n).forEach(e)},$=function(t,e){j(t).forEach(e)},B=[c],z=[c,h],F=[c,u,d],R=[p],W=function(t){return!!t[f]},q=function(t){return t[f]},V=function(t){return delete t[f]},K=function(t,e){if(!W(t)){var n={};e.forEach((function(e){n[e]=t.getAttribute(e)})),t[f]=n}},Y=function(t,e){if(W(t)){var n=q(t);e.forEach((function(e){!function(t,e,n){n?t.setAttribute(e,n):t.removeAttribute(e)}(t,e,n[e])}))}},Q=function(t,e,n){I(t,e.class_applied),C(t,_),n&&(e.unobserve_completed&&N(t,e),L(e.callback_applied,t,n))},X=function(t,e,n){I(t,e.class_loading),C(t,g),n&&(P(n,1),L(e.callback_loading,t,n))},U=function(t,e,n){n&&t.setAttribute(e,n)},G=function(t,e){U(t,d,E(t,e.data_sizes)),U(t,u,E(t,e.data_srcset)),U(t,c,E(t,e.data_src))},J={IMG:function(t,e){H(t,(function(t){K(t,F),G(t,e)})),K(t,F),G(t,e)},IFRAME:function(t,e){K(t,B),U(t,c,E(t,e.data_src))},VIDEO:function(t,e){$(t,(function(t){K(t,B),U(t,c,E(t,e.data_src))})),K(t,z),U(t,h,E(t,e.data_poster)),U(t,c,E(t,e.data_src)),t.load()},OBJECT:function(t,e){K(t,R),U(t,p,E(t,e.data_src))}},Z=["IMG","IFRAME","VIDEO","OBJECT"],tt=function(t,e){!e||function(t){return t.loadingCount>0}(e)||function(t){return t.toLoadCount>0}(e)||L(t.callback_finish,e)},et=function(t,e,n){t.addEventListener(e,n),t.llEvLisnrs[e]=n},nt=function(t,e,n){t.removeEventListener(e,n)},it=function(t){return!!t.llEvLisnrs},st=function(t){if(it(t)){var e=t.llEvLisnrs;for(var n in e){var i=e[n];nt(t,n,i)}delete t.llEvLisnrs}},ot=function(t,e,n){!function(t){delete t.llTempImage}(t),P(n,-1),function(t){t&&(t.toLoadCount-=1)}(n),S(t,e.class_loading),e.unobserve_completed&&N(t,n)},rt=function(t,e,n){var i=D(t)||t;it(i)||function(t,e,n){it(t)||(t.llEvLisnrs={});var i="VIDEO"===t.tagName?"loadeddata":"load";et(t,i,e),et(t,"error",n)}(i,(function(s){!function(t,e,n,i){var s=O(e);ot(e,n,i),I(e,n.class_loaded),C(e,m),L(n.callback_loaded,e,i),s||tt(n,i)}(0,t,e,n),st(i)}),(function(s){!function(t,e,n,i){var s=O(e);ot(e,n,i),I(e,n.class_error),C(e,b),L(n.callback_error,e,i),n.restore_on_error&&Y(e,F),s||tt(n,i)}(0,t,e,n),st(i)}))},at=function(t,e,n){!function(t){return Z.indexOf(t.tagName)>-1}(t)?function(t,e,n){!function(t){t.llTempImage=document.createElement("IMG")}(t),rt(t,e,n),function(t){W(t)||(t[f]={backgroundImage:t.style.backgroundImage})}(t),function(t,e,n){var i=E(t,e.data_bg),s=E(t,e.data_bg_hidpi),r=o&&s?s:i;r&&(t.style.backgroundImage='url("'.concat(r,'")'),D(t).setAttribute(c,r),X(t,e,n))}(t,e,n),function(t,e,n){var i=E(t,e.data_bg_multi),s=E(t,e.data_bg_multi_hidpi),r=o&&s?s:i;r&&(t.style.backgroundImage=r,Q(t,e,n))}(t,e,n),function(t,e,n){var i=E(t,e.data_bg_set);if(i){var s=i.split("|"),o=s.map((function(t){return"image-set(".concat(t,")")}));t.style.backgroundImage=o.join(),""===t.style.backgroundImage&&(o=s.map((function(t){return"-webkit-image-set(".concat(t,")")})),t.style.backgroundImage=o.join()),Q(t,e,n)}}(t,e,n)}(t,e,n):function(t,e,n){rt(t,e,n),function(t,e,n){var i=J[t.tagName];i&&(i(t,e),X(t,e,n))}(t,e,n)}(t,e,n)},lt=function(t){t.removeAttribute(c),t.removeAttribute(u),t.removeAttribute(d)},ct=function(t){H(t,(function(t){Y(t,F)})),Y(t,F)},ut={IMG:ct,IFRAME:function(t){Y(t,B)},VIDEO:function(t){$(t,(function(t){Y(t,B)})),Y(t,z),t.load()},OBJECT:function(t){Y(t,R)}},dt=function(t,e){(function(t){var e=ut[t.tagName];e?e(t):function(t){if(W(t)){var e=q(t);t.style.backgroundImage=e.backgroundImage}}(t)})(t),function(t,e){k(t)||O(t)||(S(t,e.class_entered),S(t,e.class_exited),S(t,e.class_applied),S(t,e.class_loading),S(t,e.class_loaded),S(t,e.class_error))}(t,e),T(t),V(t)},ht=["IMG","IFRAME","VIDEO"],ft=function(t){return t.use_native&&"loading"in HTMLImageElement.prototype},pt=function(t,e,n){t.forEach((function(t){return function(t){return t.isIntersecting||t.intersectionRatio>0}(t)?function(t,e,n,i){var s=function(t){return x.indexOf(A(t))>=0}(t);C(t,"entered"),I(t,n.class_entered),S(t,n.class_exited),function(t,e,n){e.unobserve_entered&&N(t,n)}(t,n,i),L(n.callback_enter,t,e,i),s||at(t,n,i)}(t.target,t,e,n):function(t,e,n,i){k(t)||(I(t,n.class_exited),function(t,e,n,i){n.cancel_on_exit&&function(t){return A(t)===g}(t)&&"IMG"===t.tagName&&(st(t),function(t){H(t,(function(t){lt(t)})),lt(t)}(t),ct(t),S(t,n.class_loading),P(i,-1),T(t),L(n.callback_cancel,t,e,i))}(t,e,n,i),L(n.callback_exit,t,e,i))}(t.target,t,e,n)}))},gt=function(t){return Array.prototype.slice.call(t)},mt=function(t){return t.container.querySelectorAll(t.elements_selector)},_t=function(t){return function(t){return A(t)===b}(t)},bt=function(t,e){return function(t){return gt(t).filter(k)}(t||mt(e))},vt=function(t,n){var s=a(t);this._settings=s,this.loadingCount=0,function(t,e){i&&!ft(t)&&(e._observer=new IntersectionObserver((function(n){pt(n,t,e)}),function(t){return{root:t.container===document?null:t.container,rootMargin:t.thresholds||t.threshold+"px"}}(t)))}(s,this),function(t,n){e&&(n._onlineHandler=function(){!function(t,e){var n;(n=mt(t),gt(n).filter(_t)).forEach((function(e){S(e,t.class_error),T(e)})),e.update()}(t,n)},window.addEventListener("online",n._onlineHandler))}(s,this),this.update(n)};return vt.prototype={update:function(t){var e,s,o=this._settings,r=bt(t,o);M(this,r.length),!n&&i?ft(o)?function(t,e,n){t.forEach((function(t){-1!==ht.indexOf(t.tagName)&&function(t,e,n){t.setAttribute("loading","lazy"),rt(t,e,n),function(t,e){var n=J[t.tagName];n&&n(t,e)}(t,e),C(t,v)}(t,e,n)})),M(n,0)}(r,o,this):(s=r,function(t){t.disconnect()}(e=this._observer),function(t,e){e.forEach((function(e){t.observe(e)}))}(e,s)):this.loadAll(r)},destroy:function(){this._observer&&this._observer.disconnect(),e&&window.removeEventListener("online",this._onlineHandler),mt(this._settings).forEach((function(t){V(t)})),delete this._observer,delete this._settings,delete this._onlineHandler,delete this.loadingCount,delete this.toLoadCount},loadAll:function(t){var e=this,n=this._settings;bt(t,n).forEach((function(t){N(t,e),at(t,n,e)}))},restoreAll:function(){var t=this._settings;mt(t).forEach((function(e){dt(e,t)}))}},vt.load=function(t,e){var n=a(e);at(t,n)},vt.resetStatus=function(t){T(t)},e&&function(t,e){if(e)if(e.length)for(var n,i=0;n=e[i];i+=1)l(t,n);else l(t,e)}(vt,window.lazyLoadOptions),vt}()}},e={};function n(i){var s=e[i];if(void 0!==s)return s.exports;var o=e[i]={exports:{}};return t[i].call(o.exports,o,o.exports,n),o.exports}n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,{a:e}),e},n.d=function(t,e){for(var i in e)n.o(e,i)&&!n.o(t,i)&&Object.defineProperty(t,i,{enumerable:!0,get:e[i]})},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},function(){"use strict";var t={};function e(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function i(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}function s(t,e,n){return e&&i(t.prototype,e),n&&i(t,n),Object.defineProperty(t,"prototype",{writable:!1}),t}n.r(t),n.d(t,{afterMain:function(){return C},afterRead:function(){return w},afterWrite:function(){return O},applyStyles:function(){return P},arrow:function(){return Z},auto:function(){return c},basePlacements:function(){return u},beforeMain:function(){return E},beforeRead:function(){return v},beforeWrite:function(){return T},bottom:function(){return r},clippingParents:function(){return f},computeStyles:function(){return it},createPopper:function(){return Nt},createPopperBase:function(){return Dt},createPopperLite:function(){return Pt},detectOverflow:function(){return vt},end:function(){return h},eventListeners:function(){return ot},flip:function(){return yt},hide:function(){return At},left:function(){return l},main:function(){return A},modifierPhases:function(){return x},offset:function(){return Ct},placements:function(){return b},popper:function(){return g},popperGenerator:function(){return St},popperOffsets:function(){return Tt},preventOverflow:function(){return kt},read:function(){return y},reference:function(){return m},right:function(){return a},start:function(){return d},top:function(){return o},variationPlacements:function(){return _},viewport:function(){return p},write:function(){return k}});var o="top",r="bottom",a="right",l="left",c="auto",u=[o,r,a,l],d="start",h="end",f="clippingParents",p="viewport",g="popper",m="reference",_=u.reduce((function(t,e){return t.concat([e+"-"+d,e+"-"+h])}),[]),b=[].concat(u,[c]).reduce((function(t,e){return t.concat([e,e+"-"+d,e+"-"+h])}),[]),v="beforeRead",y="read",w="afterRead",E="beforeMain",A="main",C="afterMain",T="beforeWrite",k="write",O="afterWrite",x=[v,y,w,E,A,C,T,k,O];function L(t){return t?(t.nodeName||"").toLowerCase():null}function I(t){if(null==t)return window;if("[object Window]"!==t.toString()){var e=t.ownerDocument;return e&&e.defaultView||window}return t}function S(t){return t instanceof I(t).Element||t instanceof Element}function D(t){return t instanceof I(t).HTMLElement||t instanceof HTMLElement}function N(t){return"undefined"!=typeof ShadowRoot&&(t instanceof I(t).ShadowRoot||t instanceof ShadowRoot)}var P={name:"applyStyles",enabled:!0,phase:"write",fn:function(t){var e=t.state;Object.keys(e.elements).forEach((function(t){var n=e.styles[t]||{},i=e.attributes[t]||{},s=e.elements[t];D(s)&&L(s)&&(Object.assign(s.style,n),Object.keys(i).forEach((function(t){var e=i[t];!1===e?s.removeAttribute(t):s.setAttribute(t,!0===e?"":e)})))}))},effect:function(t){var e=t.state,n={popper:{position:e.options.strategy,left:"0",top:"0",margin:"0"},arrow:{position:"absolute"},reference:{}};return Object.assign(e.elements.popper.style,n.popper),e.styles=n,e.elements.arrow&&Object.assign(e.elements.arrow.style,n.arrow),function(){Object.keys(e.elements).forEach((function(t){var i=e.elements[t],s=e.attributes[t]||{},o=Object.keys(e.styles.hasOwnProperty(t)?e.styles[t]:n[t]).reduce((function(t,e){return t[e]="",t}),{});D(i)&&L(i)&&(Object.assign(i.style,o),Object.keys(s).forEach((function(t){i.removeAttribute(t)})))}))}},requires:["computeStyles"]};function M(t){return t.split("-")[0]}var j=Math.max,H=Math.min,B=Math.round;function z(t,e){void 0===e&&(e=!1);var n=t.getBoundingClientRect(),i=1,s=1;if(D(t)&&e){var o=t.offsetHeight,r=t.offsetWidth;r>0&&(i=B(n.width)/r||1),o>0&&(s=B(n.height)/o||1)}return{width:n.width/i,height:n.height/s,top:n.top/s,right:n.right/i,bottom:n.bottom/s,left:n.left/i,x:n.left/i,y:n.top/s}}function F(t){var e=z(t),n=t.offsetWidth,i=t.offsetHeight;return Math.abs(e.width-n)<=1&&(n=e.width),Math.abs(e.height-i)<=1&&(i=e.height),{x:t.offsetLeft,y:t.offsetTop,width:n,height:i}}function R(t,e){var n=e.getRootNode&&e.getRootNode();if(t.contains(e))return!0;if(n&&N(n)){var i=e;do{if(i&&t.isSameNode(i))return!0;i=i.parentNode||i.host}while(i)}return!1}function W(t){return I(t).getComputedStyle(t)}function q(t){return["table","td","th"].indexOf(L(t))>=0}function V(t){return((S(t)?t.ownerDocument:t.document)||window.document).documentElement}function K(t){return"html"===L(t)?t:t.assignedSlot||t.parentNode||(N(t)?t.host:null)||V(t)}function Y(t){return D(t)&&"fixed"!==W(t).position?t.offsetParent:null}function Q(t){for(var e=I(t),n=Y(t);n&&q(n)&&"static"===W(n).position;)n=Y(n);return n&&("html"===L(n)||"body"===L(n)&&"static"===W(n).position)?e:n||function(t){var e=-1!==navigator.userAgent.toLowerCase().indexOf("firefox");if(-1!==navigator.userAgent.indexOf("Trident")&&D(t)&&"fixed"===W(t).position)return null;var n=K(t);for(N(n)&&(n=n.host);D(n)&&["html","body"].indexOf(L(n))<0;){var i=W(n);if("none"!==i.transform||"none"!==i.perspective||"paint"===i.contain||-1!==["transform","perspective"].indexOf(i.willChange)||e&&"filter"===i.willChange||e&&i.filter&&"none"!==i.filter)return n;n=n.parentNode}return null}(t)||e}function X(t){return["top","bottom"].indexOf(t)>=0?"x":"y"}function U(t,e,n){return j(t,H(e,n))}function G(t){return Object.assign({},{top:0,right:0,bottom:0,left:0},t)}function J(t,e){return e.reduce((function(e,n){return e[n]=t,e}),{})}var Z={name:"arrow",enabled:!0,phase:"main",fn:function(t){var e,n=t.state,i=t.name,s=t.options,c=n.elements.arrow,d=n.modifiersData.popperOffsets,h=M(n.placement),f=X(h),p=[l,a].indexOf(h)>=0?"height":"width";if(c&&d){var g=function(t,e){return G("number"!=typeof(t="function"==typeof t?t(Object.assign({},e.rects,{placement:e.placement})):t)?t:J(t,u))}(s.padding,n),m=F(c),_="y"===f?o:l,b="y"===f?r:a,v=n.rects.reference[p]+n.rects.reference[f]-d[f]-n.rects.popper[p],y=d[f]-n.rects.reference[f],w=Q(c),E=w?"y"===f?w.clientHeight||0:w.clientWidth||0:0,A=v/2-y/2,C=g[_],T=E-m[p]-g[b],k=E/2-m[p]/2+A,O=U(C,k,T),x=f;n.modifiersData[i]=((e={})[x]=O,e.centerOffset=O-k,e)}},effect:function(t){var e=t.state,n=t.options.element,i=void 0===n?"[data-popper-arrow]":n;null!=i&&("string"!=typeof i||(i=e.elements.popper.querySelector(i)))&&R(e.elements.popper,i)&&(e.elements.arrow=i)},requires:["popperOffsets"],requiresIfExists:["preventOverflow"]};function tt(t){return t.split("-")[1]}var et={top:"auto",right:"auto",bottom:"auto",left:"auto"};function nt(t){var e,n=t.popper,i=t.popperRect,s=t.placement,c=t.variation,u=t.offsets,d=t.position,f=t.gpuAcceleration,p=t.adaptive,g=t.roundOffsets,m=t.isFixed,_=u.x,b=void 0===_?0:_,v=u.y,y=void 0===v?0:v,w="function"==typeof g?g({x:b,y}):{x:b,y};b=w.x,y=w.y;var E=u.hasOwnProperty("x"),A=u.hasOwnProperty("y"),C=l,T=o,k=window;if(p){var O=Q(n),x="clientHeight",L="clientWidth";if(O===I(n)&&"static"!==W(O=V(n)).position&&"absolute"===d&&(x="scrollHeight",L="scrollWidth"),s===o||(s===l||s===a)&&c===h)T=r,y-=(m&&O===k&&k.visualViewport?k.visualViewport.height:O[x])-i.height,y*=f?1:-1;if(s===l||(s===o||s===r)&&c===h)C=a,b-=(m&&O===k&&k.visualViewport?k.visualViewport.width:O[L])-i.width,b*=f?1:-1}var S,D=Object.assign({position:d},p&&et),N=!0===g?function(t){var e=t.x,n=t.y,i=window.devicePixelRatio||1;return{x:B(e*i)/i||0,y:B(n*i)/i||0}}({x:b,y}):{x:b,y};return b=N.x,y=N.y,f?Object.assign({},D,((S={})[T]=A?"0":"",S[C]=E?"0":"",S.transform=(k.devicePixelRatio||1)<=1?"translate("+b+"px, "+y+"px)":"translate3d("+b+"px, "+y+"px, 0)",S)):Object.assign({},D,((e={})[T]=A?y+"px":"",e[C]=E?b+"px":"",e.transform="",e))}var it={name:"computeStyles",enabled:!0,phase:"beforeWrite",fn:function(t){var e=t.state,n=t.options,i=n.gpuAcceleration,s=void 0===i||i,o=n.adaptive,r=void 0===o||o,a=n.roundOffsets,l=void 0===a||a,c={placement:M(e.placement),variation:tt(e.placement),popper:e.elements.popper,popperRect:e.rects.popper,gpuAcceleration:s,isFixed:"fixed"===e.options.strategy};null!=e.modifiersData.popperOffsets&&(e.styles.popper=Object.assign({},e.styles.popper,nt(Object.assign({},c,{offsets:e.modifiersData.popperOffsets,position:e.options.strategy,adaptive:r,roundOffsets:l})))),null!=e.modifiersData.arrow&&(e.styles.arrow=Object.assign({},e.styles.arrow,nt(Object.assign({},c,{offsets:e.modifiersData.arrow,position:"absolute",adaptive:!1,roundOffsets:l})))),e.attributes.popper=Object.assign({},e.attributes.popper,{"data-popper-placement":e.placement})},data:{}},st={passive:!0};var ot={name:"eventListeners",enabled:!0,phase:"write",fn:function(){},effect:function(t){var e=t.state,n=t.instance,i=t.options,s=i.scroll,o=void 0===s||s,r=i.resize,a=void 0===r||r,l=I(e.elements.popper),c=[].concat(e.scrollParents.reference,e.scrollParents.popper);return o&&c.forEach((function(t){t.addEventListener("scroll",n.update,st)})),a&&l.addEventListener("resize",n.update,st),function(){o&&c.forEach((function(t){t.removeEventListener("scroll",n.update,st)})),a&&l.removeEventListener("resize",n.update,st)}},data:{}},rt={left:"right",right:"left",bottom:"top",top:"bottom"};function at(t){return t.replace(/left|right|bottom|top/g,(function(t){return rt[t]}))}var lt={start:"end",end:"start"};function ct(t){return t.replace(/start|end/g,(function(t){return lt[t]}))}function ut(t){var e=I(t);return{scrollLeft:e.pageXOffset,scrollTop:e.pageYOffset}}function dt(t){return z(V(t)).left+ut(t).scrollLeft}function ht(t){var e=W(t),n=e.overflow,i=e.overflowX,s=e.overflowY;return/auto|scroll|overlay|hidden/.test(n+s+i)}function ft(t){return["html","body","#document"].indexOf(L(t))>=0?t.ownerDocument.body:D(t)&&ht(t)?t:ft(K(t))}function pt(t,e){var n;void 0===e&&(e=[]);var i=ft(t),s=i===(null==(n=t.ownerDocument)?void 0:n.body),o=I(i),r=s?[o].concat(o.visualViewport||[],ht(i)?i:[]):i,a=e.concat(r);return s?a:a.concat(pt(K(r)))}function gt(t){return Object.assign({},t,{left:t.x,top:t.y,right:t.x+t.width,bottom:t.y+t.height})}function mt(t,e){return e===p?gt(function(t){var e=I(t),n=V(t),i=e.visualViewport,s=n.clientWidth,o=n.clientHeight,r=0,a=0;return i&&(s=i.width,o=i.height,/^((?!chrome|android).)*safari/i.test(navigator.userAgent)||(r=i.offsetLeft,a=i.offsetTop)),{width:s,height:o,x:r+dt(t),y:a}}(t)):S(e)?function(t){var e=z(t);return e.top=e.top+t.clientTop,e.left=e.left+t.clientLeft,e.bottom=e.top+t.clientHeight,e.right=e.left+t.clientWidth,e.width=t.clientWidth,e.height=t.clientHeight,e.x=e.left,e.y=e.top,e}(e):gt(function(t){var e,n=V(t),i=ut(t),s=null==(e=t.ownerDocument)?void 0:e.body,o=j(n.scrollWidth,n.clientWidth,s?s.scrollWidth:0,s?s.clientWidth:0),r=j(n.scrollHeight,n.clientHeight,s?s.scrollHeight:0,s?s.clientHeight:0),a=-i.scrollLeft+dt(t),l=-i.scrollTop;return"rtl"===W(s||n).direction&&(a+=j(n.clientWidth,s?s.clientWidth:0)-o),{width:o,height:r,x:a,y:l}}(V(t)))}function _t(t,e,n){var i="clippingParents"===e?function(t){var e=pt(K(t)),n=["absolute","fixed"].indexOf(W(t).position)>=0&&D(t)?Q(t):t;return S(n)?e.filter((function(t){return S(t)&&R(t,n)&&"body"!==L(t)})):[]}(t):[].concat(e),s=[].concat(i,[n]),o=s[0],r=s.reduce((function(e,n){var i=mt(t,n);return e.top=j(i.top,e.top),e.right=H(i.right,e.right),e.bottom=H(i.bottom,e.bottom),e.left=j(i.left,e.left),e}),mt(t,o));return r.width=r.right-r.left,r.height=r.bottom-r.top,r.x=r.left,r.y=r.top,r}function bt(t){var e,n=t.reference,i=t.element,s=t.placement,c=s?M(s):null,u=s?tt(s):null,f=n.x+n.width/2-i.width/2,p=n.y+n.height/2-i.height/2;switch(c){case o:e={x:f,y:n.y-i.height};break;case r:e={x:f,y:n.y+n.height};break;case a:e={x:n.x+n.width,y:p};break;case l:e={x:n.x-i.width,y:p};break;default:e={x:n.x,y:n.y}}var g=c?X(c):null;if(null!=g){var m="y"===g?"height":"width";switch(u){case d:e[g]=e[g]-(n[m]/2-i[m]/2);break;case h:e[g]=e[g]+(n[m]/2-i[m]/2)}}return e}function vt(t,e){void 0===e&&(e={});var n=e,i=n.placement,s=void 0===i?t.placement:i,l=n.boundary,c=void 0===l?f:l,d=n.rootBoundary,h=void 0===d?p:d,_=n.elementContext,b=void 0===_?g:_,v=n.altBoundary,y=void 0!==v&&v,w=n.padding,E=void 0===w?0:w,A=G("number"!=typeof E?E:J(E,u)),C=b===g?m:g,T=t.rects.popper,k=t.elements[y?C:b],O=_t(S(k)?k:k.contextElement||V(t.elements.popper),c,h),x=z(t.elements.reference),L=bt({reference:x,element:T,strategy:"absolute",placement:s}),I=gt(Object.assign({},T,L)),D=b===g?I:x,N={top:O.top-D.top+A.top,bottom:D.bottom-O.bottom+A.bottom,left:O.left-D.left+A.left,right:D.right-O.right+A.right},P=t.modifiersData.offset;if(b===g&&P){var M=P[s];Object.keys(N).forEach((function(t){var e=[a,r].indexOf(t)>=0?1:-1,n=[o,r].indexOf(t)>=0?"y":"x";N[t]+=M[n]*e}))}return N}var yt={name:"flip",enabled:!0,phase:"main",fn:function(t){var e=t.state,n=t.options,i=t.name;if(!e.modifiersData[i]._skip){for(var s=n.mainAxis,h=void 0===s||s,f=n.altAxis,p=void 0===f||f,g=n.fallbackPlacements,m=n.padding,v=n.boundary,y=n.rootBoundary,w=n.altBoundary,E=n.flipVariations,A=void 0===E||E,C=n.allowedAutoPlacements,T=e.options.placement,k=M(T),O=g||(k===T||!A?[at(T)]:function(t){if(M(t)===c)return[];var e=at(t);return[ct(t),e,ct(e)]}(T)),x=[T].concat(O).reduce((function(t,n){return t.concat(M(n)===c?function(t,e){void 0===e&&(e={});var n=e,i=n.placement,s=n.boundary,o=n.rootBoundary,r=n.padding,a=n.flipVariations,l=n.allowedAutoPlacements,c=void 0===l?b:l,d=tt(i),h=d?a?_:_.filter((function(t){return tt(t)===d})):u,f=h.filter((function(t){return c.indexOf(t)>=0}));0===f.length&&(f=h);var p=f.reduce((function(e,n){return e[n]=vt(t,{placement:n,boundary:s,rootBoundary:o,padding:r})[M(n)],e}),{});return Object.keys(p).sort((function(t,e){return p[t]-p[e]}))}(e,{placement:n,boundary:v,rootBoundary:y,padding:m,flipVariations:A,allowedAutoPlacements:C}):n)}),[]),L=e.rects.reference,I=e.rects.popper,S=new Map,D=!0,N=x[0],P=0;P<x.length;P++){var j=x[P],H=M(j),$=tt(j)===d,B=[o,r].indexOf(H)>=0,z=B?"width":"height",F=vt(e,{placement:j,boundary:v,rootBoundary:y,altBoundary:w,padding:m}),R=B?$?a:l:$?r:o;L[z]>I[z]&&(R=at(R));var W=at(R),q=[];if(h&&q.push(F[H]<=0),p&&q.push(F[R]<=0,F[W]<=0),q.every((function(t){return t}))){N=j,D=!1;break}S.set(j,q)}if(D)for(var V=function(t){var e=x.find((function(e){var n=S.get(e);if(n)return n.slice(0,t).every((function(t){return t}))}));if(e)return N=e,"break"},K=A?3:1;K>0;K--){if("break"===V(K))break}e.placement!==N&&(e.modifiersData[i]._skip=!0,e.placement=N,e.reset=!0)}},requiresIfExists:["offset"],data:{_skip:!1}};function wt(t,e,n){return void 0===n&&(n={x:0,y:0}),{top:t.top-e.height-n.y,right:t.right-e.width+n.x,bottom:t.bottom-e.height+n.y,left:t.left-e.width-n.x}}function Et(t){return[o,a,r,l].some((function(e){return t[e]>=0}))}var At={name:"hide",enabled:!0,phase:"main",requiresIfExists:["preventOverflow"],fn:function(t){var e=t.state,n=t.name,i=e.rects.reference,s=e.rects.popper,o=e.modifiersData.preventOverflow,r=vt(e,{elementContext:"reference"}),a=vt(e,{altBoundary:!0}),l=wt(r,i),c=wt(a,s,o),u=Et(l),d=Et(c);e.modifiersData[n]={referenceClippingOffsets:l,popperEscapeOffsets:c,isReferenceHidden:u,hasPopperEscaped:d},e.attributes.popper=Object.assign({},e.attributes.popper,{"data-popper-reference-hidden":u,"data-popper-escaped":d})}};var Ct={name:"offset",enabled:!0,phase:"main",requires:["popperOffsets"],fn:function(t){var e=t.state,n=t.options,i=t.name,s=n.offset,r=void 0===s?[0,0]:s,c=b.reduce((function(t,n){return t[n]=function(t,e,n){var i=M(t),s=[l,o].indexOf(i)>=0?-1:1,r="function"==typeof n?n(Object.assign({},e,{placement:t})):n,c=r[0],u=r[1];return c=c||0,u=(u||0)*s,[l,a].indexOf(i)>=0?{x:u,y:c}:{x:c,y:u}}(n,e.rects,r),t}),{}),u=c[e.placement],d=u.x,h=u.y;null!=e.modifiersData.popperOffsets&&(e.modifiersData.popperOffsets.x+=d,e.modifiersData.popperOffsets.y+=h),e.modifiersData[i]=c}};var Tt={name:"popperOffsets",enabled:!0,phase:"read",fn:function(t){var e=t.state,n=t.name;e.modifiersData[n]=bt({reference:e.rects.reference,element:e.rects.popper,strategy:"absolute",placement:e.placement})},data:{}};var kt={name:"preventOverflow",enabled:!0,phase:"main",fn:function(t){var e=t.state,n=t.options,i=t.name,s=n.mainAxis,c=void 0===s||s,u=n.altAxis,h=void 0!==u&&u,f=n.boundary,p=n.rootBoundary,g=n.altBoundary,m=n.padding,_=n.tether,b=void 0===_||_,v=n.tetherOffset,y=void 0===v?0:v,w=vt(e,{boundary:f,rootBoundary:p,padding:m,altBoundary:g}),E=M(e.placement),A=tt(e.placement),C=!A,T=X(E),k="x"===T?"y":"x",O=e.modifiersData.popperOffsets,x=e.rects.reference,L=e.rects.popper,I="function"==typeof y?y(Object.assign({},e.rects,{placement:e.placement})):y,S="number"==typeof I?{mainAxis:I,altAxis:I}:Object.assign({mainAxis:0,altAxis:0},I),D=e.modifiersData.offset?e.modifiersData.offset[e.placement]:null,N={x:0,y:0};if(O){if(c){var P,$="y"===T?o:l,B="y"===T?r:a,z="y"===T?"height":"width",R=O[T],W=R+w[$],q=R-w[B],V=b?-L[z]/2:0,K=A===d?x[z]:L[z],Y=A===d?-L[z]:-x[z],G=e.elements.arrow,J=b&&G?F(G):{width:0,height:0},Z=e.modifiersData["arrow#persistent"]?e.modifiersData["arrow#persistent"].padding:{top:0,right:0,bottom:0,left:0},et=Z[$],nt=Z[B],it=U(0,x[z],J[z]),st=C?x[z]/2-V-it-et-S.mainAxis:K-it-et-S.mainAxis,ot=C?-x[z]/2+V+it+nt+S.mainAxis:Y+it+nt+S.mainAxis,rt=e.elements.arrow&&Q(e.elements.arrow),at=rt?"y"===T?rt.clientTop||0:rt.clientLeft||0:0,lt=null!=(P=null==D?void 0:D[T])?P:0,ct=R+ot-lt,ut=U(b?H(W,R+st-lt-at):W,R,b?j(q,ct):q);O[T]=ut,N[T]=ut-R}if(h){var dt,ht="x"===T?o:l,ft="x"===T?r:a,pt=O[k],gt="y"===k?"height":"width",mt=pt+w[ht],_t=pt-w[ft],bt=-1!==[o,l].indexOf(E),yt=null!=(dt=null==D?void 0:D[k])?dt:0,wt=bt?mt:pt-x[gt]-L[gt]-yt+S.altAxis,Et=bt?pt+x[gt]+L[gt]-yt-S.altAxis:_t,At=b&&bt?function(t,e,n){var i=U(t,e,n);return i>n?n:i}(wt,pt,Et):U(b?wt:mt,pt,b?Et:_t);O[k]=At,N[k]=At-pt}e.modifiersData[i]=N}},requiresIfExists:["offset"]};function Ot(t,e,n){void 0===n&&(n=!1);var i,s,o=D(e),r=D(e)&&function(t){var e=t.getBoundingClientRect(),n=B(e.width)/t.offsetWidth||1,i=B(e.height)/t.offsetHeight||1;return 1!==n||1!==i}(e),a=V(e),l=z(t,r),c={scrollLeft:0,scrollTop:0},u={x:0,y:0};return(o||!o&&!n)&&(("body"!==L(e)||ht(a))&&(c=(i=e)!==I(i)&&D(i)?{scrollLeft:(s=i).scrollLeft,scrollTop:s.scrollTop}:ut(i)),D(e)?((u=z(e,!0)).x+=e.clientLeft,u.y+=e.clientTop):a&&(u.x=dt(a))),{x:l.left+c.scrollLeft-u.x,y:l.top+c.scrollTop-u.y,width:l.width,height:l.height}}function xt(t){var e=new Map,n=new Set,i=[];function s(t){n.add(t.name),[].concat(t.requires||[],t.requiresIfExists||[]).forEach((function(t){if(!n.has(t)){var i=e.get(t);i&&s(i)}})),i.push(t)}return t.forEach((function(t){e.set(t.name,t)})),t.forEach((function(t){n.has(t.name)||s(t)})),i}var Lt={placement:"bottom",modifiers:[],strategy:"absolute"};function It(){for(var t=arguments.length,e=new Array(t),n=0;n<t;n++)e[n]=arguments[n];return!e.some((function(t){return!(t&&"function"==typeof t.getBoundingClientRect)}))}function St(t){void 0===t&&(t={});var e=t,n=e.defaultModifiers,i=void 0===n?[]:n,s=e.defaultOptions,o=void 0===s?Lt:s;return function(t,e,n){void 0===n&&(n=o);var s,r,a={placement:"bottom",orderedModifiers:[],options:Object.assign({},Lt,o),modifiersData:{},elements:{reference:t,popper:e},attributes:{},styles:{}},l=[],c=!1,u={state:a,setOptions:function(n){var s="function"==typeof n?n(a.options):n;d(),a.options=Object.assign({},o,a.options,s),a.scrollParents={reference:S(t)?pt(t):t.contextElement?pt(t.contextElement):[],popper:pt(e)};var r=function(t){var e=xt(t);return x.reduce((function(t,n){return t.concat(e.filter((function(t){return t.phase===n})))}),[])}(function(t){var e=t.reduce((function(t,e){var n=t[e.name];return t[e.name]=n?Object.assign({},n,e,{options:Object.assign({},n.options,e.options),data:Object.assign({},n.data,e.data)}):e,t}),{});return Object.keys(e).map((function(t){return e[t]}))}([].concat(i,a.options.modifiers)));return a.orderedModifiers=r.filter((function(t){return t.enabled})),a.orderedModifiers.forEach((function(t){var e=t.name,n=t.options,i=void 0===n?{}:n,s=t.effect;if("function"==typeof s){var o=s({state:a,name:e,instance:u,options:i}),r=function(){};l.push(o||r)}})),u.update()},forceUpdate:function(){if(!c){var t=a.elements,e=t.reference,n=t.popper;if(It(e,n)){a.rects={reference:Ot(e,Q(n),"fixed"===a.options.strategy),popper:F(n)},a.reset=!1,a.placement=a.options.placement,a.orderedModifiers.forEach((function(t){return a.modifiersData[t.name]=Object.assign({},t.data)}));for(var i=0;i<a.orderedModifiers.length;i++)if(!0!==a.reset){var s=a.orderedModifiers[i],o=s.fn,r=s.options,l=void 0===r?{}:r,d=s.name;"function"==typeof o&&(a=o({state:a,options:l,name:d,instance:u})||a)}else a.reset=!1,i=-1}}},update:(s=function(){return new Promise((function(t){u.forceUpdate(),t(a)}))},function(){return r||(r=new Promise((function(t){Promise.resolve().then((function(){r=void 0,t(s())}))}))),r}),destroy:function(){d(),c=!0}};if(!It(t,e))return u;function d(){l.forEach((function(t){return t()})),l=[]}return u.setOptions(n).then((function(t){!c&&n.onFirstUpdate&&n.onFirstUpdate(t)})),u}}var Dt=St(),Nt=St({defaultModifiers:[ot,Tt,it,P,Ct,yt,kt,Z,At]}),Pt=St({defaultModifiers:[ot,Tt,it,P]});
/*!
  * Bootstrap v5.2.0-beta1 (https://getbootstrap.com/)
  * Copyright 2011-2022 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)
  * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
  */
const Mt="transitionend",jt=t=>{let e=t.getAttribute("data-bs-target");if(!e||"#"===e){let n=t.getAttribute("href");if(!n||!n.includes("#")&&!n.startsWith("."))return null;n.includes("#")&&!n.startsWith("#")&&(n=`#${n.split("#")[1]}`),e=n&&"#"!==n?n.trim():null}return e},Ht=t=>{const e=jt(t);return e&&document.querySelector(e)?e:null},$t=t=>{const e=jt(t);return e?document.querySelector(e):null},Bt=t=>{t.dispatchEvent(new Event(Mt))},zt=t=>!(!t||"object"!=typeof t)&&(void 0!==t.jquery&&(t=t[0]),void 0!==t.nodeType),Ft=t=>zt(t)?t.jquery?t[0]:t:"string"==typeof t&&t.length>0?document.querySelector(t):null,Rt=t=>{if(!zt(t)||0===t.getClientRects().length)return!1;const e="visible"===getComputedStyle(t).getPropertyValue("visibility"),n=t.closest("details:not([open])");if(!n)return e;if(n!==t){const e=t.closest("summary");if(e&&e.parentNode!==n)return!1;if(null===e)return!1}return e},Wt=t=>!t||t.nodeType!==Node.ELEMENT_NODE||(!!t.classList.contains("disabled")||(void 0!==t.disabled?t.disabled:t.hasAttribute("disabled")&&"false"!==t.getAttribute("disabled"))),qt=t=>{if(!document.documentElement.attachShadow)return null;if("function"==typeof t.getRootNode){const e=t.getRootNode();return e instanceof ShadowRoot?e:null}return t instanceof ShadowRoot?t:t.parentNode?qt(t.parentNode):null},Vt=()=>{},Kt=t=>{t.offsetHeight},Yt=()=>window.jQuery&&!document.body.hasAttribute("data-bs-no-jquery")?window.jQuery:null,Qt=[],Xt=()=>"rtl"===document.documentElement.dir,Ut=t=>{var e;e=()=>{const e=Yt();if(e){const n=t.NAME,i=e.fn[n];e.fn[n]=t.jQueryInterface,e.fn[n].Constructor=t,e.fn[n].noConflict=()=>(e.fn[n]=i,t.jQueryInterface)}},"loading"===document.readyState?(Qt.length||document.addEventListener("DOMContentLoaded",(()=>{for(const t of Qt)t()})),Qt.push(e)):e()},Gt=t=>{"function"==typeof t&&t()},Jt=(t,e,n=!0)=>{if(!n)return void Gt(t);const i=(t=>{if(!t)return 0;let{transitionDuration:e,transitionDelay:n}=window.getComputedStyle(t);const i=Number.parseFloat(e),s=Number.parseFloat(n);return i||s?(e=e.split(",")[0],n=n.split(",")[0],1e3*(Number.parseFloat(e)+Number.parseFloat(n))):0})(e)+5;let s=!1;const o=({target:n})=>{n===e&&(s=!0,e.removeEventListener(Mt,o),Gt(t))};e.addEventListener(Mt,o),setTimeout((()=>{s||Bt(e)}),i)},Zt=(t,e,n,i)=>{const s=t.length;let o=t.indexOf(e);return-1===o?!n&&i?t[s-1]:t[0]:(o+=n?1:-1,i&&(o=(o+s)%s),t[Math.max(0,Math.min(o,s-1))])},te=/[^.]*(?=\..*)\.|.*/,ee=/\..*/,ne=/::\d+$/,ie={};let se=1;const oe={mouseenter:"mouseover",mouseleave:"mouseout"},re=new Set(["click","dblclick","mouseup","mousedown","contextmenu","mousewheel","DOMMouseScroll","mouseover","mouseout","mousemove","selectstart","selectend","keydown","keypress","keyup","orientationchange","touchstart","touchmove","touchend","touchcancel","pointerdown","pointermove","pointerup","pointerleave","pointercancel","gesturestart","gesturechange","gestureend","focus","blur","change","reset","select","submit","focusin","focusout","load","unload","beforeunload","resize","move","DOMContentLoaded","readystatechange","error","abort","scroll"]);function ae(t,e){return e&&`${e}::${se++}`||t.uidEvent||se++}function le(t){const e=ae(t);return t.uidEvent=e,ie[e]=ie[e]||{},ie[e]}function ce(t,e,n=null){return Object.values(t).find((t=>t.originalHandler===e&&t.delegationSelector===n))}function ue(t,e,n){const i="string"==typeof e,s=i?n:e;let o=pe(t);return re.has(o)||(o=t),[i,s,o]}function de(t,e,n,i,s){if("string"!=typeof e||!t)return;if(n||(n=i,i=null),e in oe){const t=t=>function(e){if(!e.relatedTarget||e.relatedTarget!==e.delegateTarget&&!e.delegateTarget.contains(e.relatedTarget))return t.call(this,e)};i?i=t(i):n=t(n)}const[o,r,a]=ue(e,n,i),l=le(t),c=l[a]||(l[a]={}),u=ce(c,r,o?n:null);if(u)return void(u.oneOff=u.oneOff&&s);const d=ae(r,e.replace(te,"")),h=o?function(t,e,n){return function i(s){const o=t.querySelectorAll(e);for(let{target:r}=s;r&&r!==this;r=r.parentNode)for(const a of o)if(a===r)return s.delegateTarget=r,i.oneOff&&ge.off(t,s.type,e,n),n.apply(r,[s])}}(t,n,i):function(t,e){return function n(i){return i.delegateTarget=t,n.oneOff&&ge.off(t,i.type,e),e.apply(t,[i])}}(t,n);h.delegationSelector=o?n:null,h.originalHandler=r,h.oneOff=s,h.uidEvent=d,c[d]=h,t.addEventListener(a,h,o)}function he(t,e,n,i,s){const o=ce(e[n],i,s);o&&(t.removeEventListener(n,o,Boolean(s)),delete e[n][o.uidEvent])}function fe(t,e,n,i){const s=e[n]||{};for(const o of Object.keys(s))if(o.includes(i)){const i=s[o];he(t,e,n,i.originalHandler,i.delegationSelector)}}function pe(t){return t=t.replace(ee,""),oe[t]||t}const ge={on(t,e,n,i){de(t,e,n,i,!1)},one(t,e,n,i){de(t,e,n,i,!0)},off(t,e,n,i){if("string"!=typeof e||!t)return;const[s,o,r]=ue(e,n,i),a=r!==e,l=le(t),c=e.startsWith(".");if(void 0!==o){if(!l||!l[r])return;return void he(t,l,r,o,s?n:null)}if(c)for(const n of Object.keys(l))fe(t,l,n,e.slice(1));const u=l[r]||{};for(const n of Object.keys(u)){const i=n.replace(ne,"");if(!a||e.includes(i)){const e=u[n];he(t,l,r,e.originalHandler,e.delegationSelector)}}},trigger(t,e,n){if("string"!=typeof e||!t)return null;const i=Yt();let s=null,o=!0,r=!0,a=!1;e!==pe(e)&&i&&(s=i.Event(e,n),i(t).trigger(s),o=!s.isPropagationStopped(),r=!s.isImmediatePropagationStopped(),a=s.isDefaultPrevented());const l=new Event(e,{bubbles:o,cancelable:!0});if(void 0!==n)for(const t of Object.keys(n))Object.defineProperty(l,t,{get:()=>n[t]});return a&&l.preventDefault(),r&&t.dispatchEvent(l),l.defaultPrevented&&s&&s.preventDefault(),l}},me=new Map,_e={set(t,e,n){me.has(t)||me.set(t,new Map);const i=me.get(t);i.has(e)||0===i.size?i.set(e,n):console.error(`Bootstrap doesn't allow more than one instance per element. Bound instance: ${Array.from(i.keys())[0]}.`)},get:(t,e)=>me.has(t)&&me.get(t).get(e)||null,remove(t,e){if(!me.has(t))return;const n=me.get(t);n.delete(e),0===n.size&&me.delete(t)}};function be(t){if("true"===t)return!0;if("false"===t)return!1;if(t===Number(t).toString())return Number(t);if(""===t||"null"===t)return null;if("string"!=typeof t)return t;try{return JSON.parse(decodeURIComponent(t))}catch(e){return t}}function ve(t){return t.replace(/[A-Z]/g,(t=>`-${t.toLowerCase()}`))}const ye={setDataAttribute(t,e,n){t.setAttribute(`data-bs-${ve(e)}`,n)},removeDataAttribute(t,e){t.removeAttribute(`data-bs-${ve(e)}`)},getDataAttributes(t){if(!t)return{};const e={},n=Object.keys(t.dataset).filter((t=>t.startsWith("bs")&&!t.startsWith("bsConfig")));for(const i of n){let n=i.replace(/^bs/,"");n=n.charAt(0).toLowerCase()+n.slice(1,n.length),e[n]=be(t.dataset[i])}return e},getDataAttribute:(t,e)=>be(t.getAttribute(`data-bs-${ve(e)}`))};class we{static get Default(){return{}}static get DefaultType(){return{}}static get NAME(){throw new Error('You have to implement the static method "NAME", for each component!')}_getConfig(t){return t=this._mergeConfigObj(t),t=this._configAfterMerge(t),this._typeCheckConfig(t),t}_configAfterMerge(t){return t}_mergeConfigObj(t,e){const n=zt(e)?ye.getDataAttribute(e,"config"):{};return{...this.constructor.Default,..."object"==typeof n?n:{},...zt(e)?ye.getDataAttributes(e):{},..."object"==typeof t?t:{}}}_typeCheckConfig(t,e=this.constructor.DefaultType){for(const i of Object.keys(e)){const s=e[i],o=t[i],r=zt(o)?"element":null==(n=o)?`${n}`:Object.prototype.toString.call(n).match(/\s([a-z]+)/i)[1].toLowerCase();if(!new RegExp(s).test(r))throw new TypeError(`${this.constructor.NAME.toUpperCase()}: Option "${i}" provided type "${r}" but expected type "${s}".`)}var n}}class Ee extends we{constructor(t,e){super(),(t=Ft(t))&&(this._element=t,this._config=this._getConfig(e),_e.set(this._element,this.constructor.DATA_KEY,this))}dispose(){_e.remove(this._element,this.constructor.DATA_KEY),ge.off(this._element,this.constructor.EVENT_KEY);for(const t of Object.getOwnPropertyNames(this))this[t]=null}_queueCallback(t,e,n=!0){Jt(t,e,n)}_getConfig(t){return t=this._mergeConfigObj(t,this._element),t=this._configAfterMerge(t),this._typeCheckConfig(t),t}static getInstance(t){return _e.get(Ft(t),this.DATA_KEY)}static getOrCreateInstance(t,e={}){return this.getInstance(t)||new this(t,"object"==typeof e?e:null)}static get VERSION(){return"5.2.0-beta1"}static get DATA_KEY(){return`bs.${this.NAME}`}static get EVENT_KEY(){return`.${this.DATA_KEY}`}static eventName(t){return`${t}${this.EVENT_KEY}`}}const Ae=(t,e="hide")=>{const n=`click.dismiss${t.EVENT_KEY}`,i=t.NAME;ge.on(document,n,`[data-bs-dismiss="${i}"]`,(function(n){if(["A","AREA"].includes(this.tagName)&&n.preventDefault(),Wt(this))return;const s=$t(this)||this.closest(`.${i}`);t.getOrCreateInstance(s)[e]()}))};class Ce extends Ee{static get NAME(){return"alert"}close(){if(ge.trigger(this._element,"close.bs.alert").defaultPrevented)return;this._element.classList.remove("show");const t=this._element.classList.contains("fade");this._queueCallback((()=>this._destroyElement()),this._element,t)}_destroyElement(){this._element.remove(),ge.trigger(this._element,"closed.bs.alert"),this.dispose()}static jQueryInterface(t){return this.each((function(){const e=Ce.getOrCreateInstance(this);if("string"==typeof t){if(void 0===e[t]||t.startsWith("_")||"constructor"===t)throw new TypeError(`No method named "${t}"`);e[t](this)}}))}}Ae(Ce,"close"),Ut(Ce);const Te='[data-bs-toggle="button"]';class ke extends Ee{static get NAME(){return"button"}toggle(){this._element.setAttribute("aria-pressed",this._element.classList.toggle("active"))}static jQueryInterface(t){return this.each((function(){const e=ke.getOrCreateInstance(this);"toggle"===t&&e[t]()}))}}ge.on(document,"click.bs.button.data-api",Te,(t=>{t.preventDefault();const e=t.target.closest(Te);ke.getOrCreateInstance(e).toggle()})),Ut(ke);const Oe={find:(t,e=document.documentElement)=>[].concat(...Element.prototype.querySelectorAll.call(e,t)),findOne:(t,e=document.documentElement)=>Element.prototype.querySelector.call(e,t),children:(t,e)=>[].concat(...t.children).filter((t=>t.matches(e))),parents(t,e){const n=[];let i=t.parentNode.closest(e);for(;i;)n.push(i),i=i.parentNode.closest(e);return n},prev(t,e){let n=t.previousElementSibling;for(;n;){if(n.matches(e))return[n];n=n.previousElementSibling}return[]},next(t,e){let n=t.nextElementSibling;for(;n;){if(n.matches(e))return[n];n=n.nextElementSibling}return[]},focusableChildren(t){const e=["a","button","input","textarea","select","details","[tabindex]",'[contenteditable="true"]'].map((t=>`${t}:not([tabindex^="-"])`)).join(",");return this.find(e,t).filter((t=>!Wt(t)&&Rt(t)))}},xe=".bs.swipe",Le={leftCallback:null,rightCallback:null,endCallback:null},Ie={leftCallback:"(function|null)",rightCallback:"(function|null)",endCallback:"(function|null)"};class Se extends we{constructor(t,e){super(),this._element=t,t&&Se.isSupported()&&(this._config=this._getConfig(e),this._deltaX=0,this._supportPointerEvents=Boolean(window.PointerEvent),this._initEvents())}static get Default(){return Le}static get DefaultType(){return Ie}static get NAME(){return"swipe"}dispose(){ge.off(this._element,xe)}_start(t){this._supportPointerEvents?this._eventIsPointerPenTouch(t)&&(this._deltaX=t.clientX):this._deltaX=t.touches[0].clientX}_end(t){this._eventIsPointerPenTouch(t)&&(this._deltaX=t.clientX-this._deltaX),this._handleSwipe(),Gt(this._config.endCallback)}_move(t){this._deltaX=t.touches&&t.touches.length>1?0:t.touches[0].clientX-this._deltaX}_handleSwipe(){const t=Math.abs(this._deltaX);if(t<=40)return;const e=t/this._deltaX;this._deltaX=0,e&&Gt(e>0?this._config.rightCallback:this._config.leftCallback)}_initEvents(){this._supportPointerEvents?(ge.on(this._element,"pointerdown.bs.swipe",(t=>this._start(t))),ge.on(this._element,"pointerup.bs.swipe",(t=>this._end(t))),this._element.classList.add("pointer-event")):(ge.on(this._element,"touchstart.bs.swipe",(t=>this._start(t))),ge.on(this._element,"touchmove.bs.swipe",(t=>this._move(t))),ge.on(this._element,"touchend.bs.swipe",(t=>this._end(t))))}_eventIsPointerPenTouch(t){return this._supportPointerEvents&&("pen"===t.pointerType||"touch"===t.pointerType)}static isSupported(){return"ontouchstart"in document.documentElement||navigator.maxTouchPoints>0}}const De="next",Ne="prev",Pe="left",Me="right",je="slid.bs.carousel",He="carousel",$e="active",Be=".active",ze=".carousel-item",Fe={ArrowLeft:Me,ArrowRight:Pe},Re={interval:5e3,keyboard:!0,pause:"hover",ride:!1,touch:!0,wrap:!0},We={interval:"(number|boolean)",keyboard:"boolean",ride:"(boolean|string)",pause:"(string|boolean)",touch:"boolean",wrap:"boolean"};class qe extends Ee{constructor(t,e){super(t,e),this._interval=null,this._activeElement=null,this._isSliding=!1,this.touchTimeout=null,this._swipeHelper=null,this._indicatorsElement=Oe.findOne(".carousel-indicators",this._element),this._addEventListeners(),this._config.ride===He&&this.cycle()}static get Default(){return Re}static get DefaultType(){return We}static get NAME(){return"carousel"}next(){this._slide(De)}nextWhenVisible(){!document.hidden&&Rt(this._element)&&this.next()}prev(){this._slide(Ne)}pause(){this._isSliding&&Bt(this._element),this._clearInterval()}cycle(){this._clearInterval(),this._updateInterval(),this._interval=setInterval((()=>this.nextWhenVisible()),this._config.interval)}_maybeEnableCycle(){this._config.ride&&(this._isSliding?ge.one(this._element,je,(()=>this.cycle())):this.cycle())}to(t){const e=this._getItems();if(t>e.length-1||t<0)return;if(this._isSliding)return void ge.one(this._element,je,(()=>this.to(t)));const n=this._getItemIndex(this._getActive());if(n===t)return;const i=t>n?De:Ne;this._slide(i,e[t])}dispose(){this._swipeHelper&&this._swipeHelper.dispose(),super.dispose()}_configAfterMerge(t){return t.defaultInterval=t.interval,t}_addEventListeners(){this._config.keyboard&&ge.on(this._element,"keydown.bs.carousel",(t=>this._keydown(t))),"hover"===this._config.pause&&(ge.on(this._element,"mouseenter.bs.carousel",(()=>this.pause())),ge.on(this._element,"mouseleave.bs.carousel",(()=>this._maybeEnableCycle()))),this._config.touch&&Se.isSupported()&&this._addTouchEventListeners()}_addTouchEventListeners(){for(const t of Oe.find(".carousel-item img",this._element))ge.on(t,"dragstart.bs.carousel",(t=>t.preventDefault()));const t={leftCallback:()=>this._slide(this._directionToOrder(Pe)),rightCallback:()=>this._slide(this._directionToOrder(Me)),endCallback:()=>{"hover"===this._config.pause&&(this.pause(),this.touchTimeout&&clearTimeout(this.touchTimeout),this.touchTimeout=setTimeout((()=>this._maybeEnableCycle()),500+this._config.interval))}};this._swipeHelper=new Se(this._element,t)}_keydown(t){if(/input|textarea/i.test(t.target.tagName))return;const e=Fe[t.key];e&&(t.preventDefault(),this._slide(this._directionToOrder(e)))}_getItemIndex(t){return this._getItems().indexOf(t)}_setActiveIndicatorElement(t){if(!this._indicatorsElement)return;const e=Oe.findOne(Be,this._indicatorsElement);e.classList.remove($e),e.removeAttribute("aria-current");const n=Oe.findOne(`[data-bs-slide-to="${t}"]`,this._indicatorsElement);n&&(n.classList.add($e),n.setAttribute("aria-current","true"))}_updateInterval(){const t=this._activeElement||this._getActive();if(!t)return;const e=Number.parseInt(t.getAttribute("data-bs-interval"),10);this._config.interval=e||this._config.defaultInterval}_slide(t,e=null){if(this._isSliding)return;const n=this._getActive(),i=t===De,s=e||Zt(this._getItems(),n,i,this._config.wrap);if(s===n)return;const o=this._getItemIndex(s),r=e=>ge.trigger(this._element,e,{relatedTarget:s,direction:this._orderToDirection(t),from:this._getItemIndex(n),to:o});if(r("slide.bs.carousel").defaultPrevented)return;if(!n||!s)return;const a=Boolean(this._interval);this.pause(),this._isSliding=!0,this._setActiveIndicatorElement(o),this._activeElement=s;const l=i?"carousel-item-start":"carousel-item-end",c=i?"carousel-item-next":"carousel-item-prev";s.classList.add(c),Kt(s),n.classList.add(l),s.classList.add(l);this._queueCallback((()=>{s.classList.remove(l,c),s.classList.add($e),n.classList.remove($e,c,l),this._isSliding=!1,r(je)}),n,this._isAnimated()),a&&this.cycle()}_isAnimated(){return this._element.classList.contains("slide")}_getActive(){return Oe.findOne(".active.carousel-item",this._element)}_getItems(){return Oe.find(ze,this._element)}_clearInterval(){this._interval&&(clearInterval(this._interval),this._interval=null)}_directionToOrder(t){return Xt()?t===Pe?Ne:De:t===Pe?De:Ne}_orderToDirection(t){return Xt()?t===Ne?Pe:Me:t===Ne?Me:Pe}static jQueryInterface(t){return this.each((function(){const e=qe.getOrCreateInstance(this,t);if("number"!=typeof t){if("string"==typeof t){if(void 0===e[t]||t.startsWith("_")||"constructor"===t)throw new TypeError(`No method named "${t}"`);e[t]()}}else e.to(t)}))}}ge.on(document,"click.bs.carousel.data-api","[data-bs-slide], [data-bs-slide-to]",(function(t){const e=$t(this);if(!e||!e.classList.contains(He))return;t.preventDefault();const n=qe.getOrCreateInstance(e),i=this.getAttribute("data-bs-slide-to");return i?(n.to(i),void n._maybeEnableCycle()):"next"===ye.getDataAttribute(this,"slide")?(n.next(),void n._maybeEnableCycle()):(n.prev(),void n._maybeEnableCycle())})),ge.on(window,"load.bs.carousel.data-api",(()=>{const t=Oe.find('[data-bs-ride="carousel"]');for(const e of t)qe.getOrCreateInstance(e)})),Ut(qe);const Ve="show",Ke="collapse",Ye="collapsing",Qe='[data-bs-toggle="collapse"]',Xe={toggle:!0,parent:null},Ue={toggle:"boolean",parent:"(null|element)"};class Ge extends Ee{constructor(t,e){super(t,e),this._isTransitioning=!1,this._triggerArray=[];const n=Oe.find(Qe);for(const t of n){const e=Ht(t),n=Oe.find(e).filter((t=>t===this._element));null!==e&&n.length&&this._triggerArray.push(t)}this._initializeChildren(),this._config.parent||this._addAriaAndCollapsedClass(this._triggerArray,this._isShown()),this._config.toggle&&this.toggle()}static get Default(){return Xe}static get DefaultType(){return Ue}static get NAME(){return"collapse"}toggle(){this._isShown()?this.hide():this.show()}show(){if(this._isTransitioning||this._isShown())return;let t=[];if(this._config.parent&&(t=this._getFirstLevelChildren(".collapse.show, .collapse.collapsing").filter((t=>t!==this._element)).map((t=>Ge.getOrCreateInstance(t,{toggle:!1})))),t.length&&t[0]._isTransitioning)return;if(ge.trigger(this._element,"show.bs.collapse").defaultPrevented)return;for(const e of t)e.hide();const e=this._getDimension();this._element.classList.remove(Ke),this._element.classList.add(Ye),this._element.style[e]=0,this._addAriaAndCollapsedClass(this._triggerArray,!0),this._isTransitioning=!0;const n=`scroll${e[0].toUpperCase()+e.slice(1)}`;this._queueCallback((()=>{this._isTransitioning=!1,this._element.classList.remove(Ye),this._element.classList.add(Ke,Ve),this._element.style[e]="",ge.trigger(this._element,"shown.bs.collapse")}),this._element,!0),this._element.style[e]=`${this._element[n]}px`}hide(){if(this._isTransitioning||!this._isShown())return;if(ge.trigger(this._element,"hide.bs.collapse").defaultPrevented)return;const t=this._getDimension();this._element.style[t]=`${this._element.getBoundingClientRect()[t]}px`,Kt(this._element),this._element.classList.add(Ye),this._element.classList.remove(Ke,Ve);for(const t of this._triggerArray){const e=$t(t);e&&!this._isShown(e)&&this._addAriaAndCollapsedClass([t],!1)}this._isTransitioning=!0;this._element.style[t]="",this._queueCallback((()=>{this._isTransitioning=!1,this._element.classList.remove(Ye),this._element.classList.add(Ke),ge.trigger(this._element,"hidden.bs.collapse")}),this._element,!0)}_isShown(t=this._element){return t.classList.contains(Ve)}_configAfterMerge(t){return t.toggle=Boolean(t.toggle),t.parent=Ft(t.parent),t}_getDimension(){return this._element.classList.contains("collapse-horizontal")?"width":"height"}_initializeChildren(){if(!this._config.parent)return;const t=this._getFirstLevelChildren(Qe);for(const e of t){const t=$t(e);t&&this._addAriaAndCollapsedClass([e],this._isShown(t))}}_getFirstLevelChildren(t){const e=Oe.find(":scope .collapse .collapse",this._config.parent);return Oe.find(t,this._config.parent).filter((t=>!e.includes(t)))}_addAriaAndCollapsedClass(t,e){if(t.length)for(const n of t)n.classList.toggle("collapsed",!e),n.setAttribute("aria-expanded",e)}static jQueryInterface(t){const e={};return"string"==typeof t&&/show|hide/.test(t)&&(e.toggle=!1),this.each((function(){const n=Ge.getOrCreateInstance(this,e);if("string"==typeof t){if(void 0===n[t])throw new TypeError(`No method named "${t}"`);n[t]()}}))}}ge.on(document,"click.bs.collapse.data-api",Qe,(function(t){("A"===t.target.tagName||t.delegateTarget&&"A"===t.delegateTarget.tagName)&&t.preventDefault();const e=Ht(this),n=Oe.find(e);for(const t of n)Ge.getOrCreateInstance(t,{toggle:!1}).toggle()})),Ut(Ge);const Je="dropdown",Ze="ArrowUp",tn="ArrowDown",en="click.bs.dropdown.data-api",nn="keydown.bs.dropdown.data-api",sn="show",on='[data-bs-toggle="dropdown"]:not(.disabled):not(:disabled)',rn=`${on}.show`,an=".dropdown-menu",ln=Xt()?"top-end":"top-start",cn=Xt()?"top-start":"top-end",un=Xt()?"bottom-end":"bottom-start",dn=Xt()?"bottom-start":"bottom-end",hn=Xt()?"left-start":"right-start",fn=Xt()?"right-start":"left-start",pn={offset:[0,2],boundary:"clippingParents",reference:"toggle",display:"dynamic",popperConfig:null,autoClose:!0},gn={offset:"(array|string|function)",boundary:"(string|element)",reference:"(string|element|object)",display:"string",popperConfig:"(null|object|function)",autoClose:"(boolean|string)"};class mn extends Ee{constructor(t,e){super(t,e),this._popper=null,this._parent=this._element.parentNode,this._menu=Oe.findOne(an,this._parent),this._inNavbar=this._detectNavbar()}static get Default(){return pn}static get DefaultType(){return gn}static get NAME(){return Je}toggle(){return this._isShown()?this.hide():this.show()}show(){if(Wt(this._element)||this._isShown())return;const t={relatedTarget:this._element};if(!ge.trigger(this._element,"show.bs.dropdown",t).defaultPrevented){if(this._createPopper(),"ontouchstart"in document.documentElement&&!this._parent.closest(".navbar-nav"))for(const t of[].concat(...document.body.children))ge.on(t,"mouseover",Vt);this._element.focus(),this._element.setAttribute("aria-expanded",!0),this._menu.classList.add(sn),this._element.classList.add(sn),ge.trigger(this._element,"shown.bs.dropdown",t)}}hide(){if(Wt(this._element)||!this._isShown())return;const t={relatedTarget:this._element};this._completeHide(t)}dispose(){this._popper&&this._popper.destroy(),super.dispose()}update(){this._inNavbar=this._detectNavbar(),this._popper&&this._popper.update()}_completeHide(t){if(!ge.trigger(this._element,"hide.bs.dropdown",t).defaultPrevented){if("ontouchstart"in document.documentElement)for(const t of[].concat(...document.body.children))ge.off(t,"mouseover",Vt);this._popper&&this._popper.destroy(),this._menu.classList.remove(sn),this._element.classList.remove(sn),this._element.setAttribute("aria-expanded","false"),ye.removeDataAttribute(this._menu,"popper"),ge.trigger(this._element,"hidden.bs.dropdown",t)}}_getConfig(t){if("object"==typeof(t=super._getConfig(t)).reference&&!zt(t.reference)&&"function"!=typeof t.reference.getBoundingClientRect)throw new TypeError(`${Je.toUpperCase()}: Option "reference" provided type "object" without a required "getBoundingClientRect" method.`);return t}_createPopper(){if(void 0===t)throw new TypeError("Bootstrap's dropdowns require Popper (https://popper.js.org)");let e=this._element;"parent"===this._config.reference?e=this._parent:zt(this._config.reference)?e=Ft(this._config.reference):"object"==typeof this._config.reference&&(e=this._config.reference);const n=this._getPopperConfig();this._popper=Nt(e,this._menu,n)}_isShown(){return this._menu.classList.contains(sn)}_getPlacement(){const t=this._parent;if(t.classList.contains("dropend"))return hn;if(t.classList.contains("dropstart"))return fn;if(t.classList.contains("dropup-center"))return"top";if(t.classList.contains("dropdown-center"))return"bottom";const e="end"===getComputedStyle(this._menu).getPropertyValue("--bs-position").trim();return t.classList.contains("dropup")?e?cn:ln:e?dn:un}_detectNavbar(){return null!==this._element.closest(".navbar")}_getOffset(){const{offset:t}=this._config;return"string"==typeof t?t.split(",").map((t=>Number.parseInt(t,10))):"function"==typeof t?e=>t(e,this._element):t}_getPopperConfig(){const t={placement:this._getPlacement(),modifiers:[{name:"preventOverflow",options:{boundary:this._config.boundary}},{name:"offset",options:{offset:this._getOffset()}}]};return(this._inNavbar||"static"===this._config.display)&&(ye.setDataAttribute(this._menu,"popper","static"),t.modifiers=[{name:"applyStyles",enabled:!1}]),{...t,..."function"==typeof this._config.popperConfig?this._config.popperConfig(t):this._config.popperConfig}}_selectMenuItem({key:t,target:e}){const n=Oe.find(".dropdown-menu .dropdown-item:not(.disabled):not(:disabled)",this._menu).filter((t=>Rt(t)));n.length&&Zt(n,e,t===tn,!n.includes(e)).focus()}static jQueryInterface(t){return this.each((function(){const e=mn.getOrCreateInstance(this,t);if("string"==typeof t){if(void 0===e[t])throw new TypeError(`No method named "${t}"`);e[t]()}}))}static clearMenus(t){if(2===t.button||"keyup"===t.type&&"Tab"!==t.key)return;const e=Oe.find(rn);for(const n of e){const e=mn.getInstance(n);if(!e||!1===e._config.autoClose)continue;const i=t.composedPath(),s=i.includes(e._menu);if(i.includes(e._element)||"inside"===e._config.autoClose&&!s||"outside"===e._config.autoClose&&s)continue;if(e._menu.contains(t.target)&&("keyup"===t.type&&"Tab"===t.key||/input|select|option|textarea|form/i.test(t.target.tagName)))continue;const o={relatedTarget:e._element};"click"===t.type&&(o.clickEvent=t),e._completeHide(o)}}static dataApiKeydownHandler(t){const e=/input|textarea/i.test(t.target.tagName),n="Escape"===t.key,i=[Ze,tn].includes(t.key);if(!i&&!n)return;if(e&&!n)return;t.preventDefault();const s=Oe.findOne(on,t.delegateTarget.parentNode),o=mn.getOrCreateInstance(s);if(i)return t.stopPropagation(),o.show(),void o._selectMenuItem(t);o._isShown()&&(t.stopPropagation(),o.hide(),s.focus())}}ge.on(document,nn,on,mn.dataApiKeydownHandler),ge.on(document,nn,an,mn.dataApiKeydownHandler),ge.on(document,en,mn.clearMenus),ge.on(document,"keyup.bs.dropdown.data-api",mn.clearMenus),ge.on(document,en,on,(function(t){t.preventDefault(),mn.getOrCreateInstance(this).toggle()})),Ut(mn);const _n=".fixed-top, .fixed-bottom, .is-fixed, .sticky-top",bn=".sticky-top",vn="padding-right",yn="margin-right";class wn{constructor(){this._element=document.body}getWidth(){const t=document.documentElement.clientWidth;return Math.abs(window.innerWidth-t)}hide(){const t=this.getWidth();this._disableOverFlow(),this._setElementAttributes(this._element,vn,(e=>e+t)),this._setElementAttributes(_n,vn,(e=>e+t)),this._setElementAttributes(bn,yn,(e=>e-t))}reset(){this._resetElementAttributes(this._element,"overflow"),this._resetElementAttributes(this._element,vn),this._resetElementAttributes(_n,vn),this._resetElementAttributes(bn,yn)}isOverflowing(){return this.getWidth()>0}_disableOverFlow(){this._saveInitialAttribute(this._element,"overflow"),this._element.style.overflow="hidden"}_setElementAttributes(t,e,n){const i=this.getWidth();this._applyManipulationCallback(t,(t=>{if(t!==this._element&&window.innerWidth>t.clientWidth+i)return;this._saveInitialAttribute(t,e);const s=window.getComputedStyle(t).getPropertyValue(e);t.style.setProperty(e,`${n(Number.parseFloat(s))}px`)}))}_saveInitialAttribute(t,e){const n=t.style.getPropertyValue(e);n&&ye.setDataAttribute(t,e,n)}_resetElementAttributes(t,e){this._applyManipulationCallback(t,(t=>{const n=ye.getDataAttribute(t,e);null!==n?(ye.removeDataAttribute(t,e),t.style.setProperty(e,n)):t.style.removeProperty(e)}))}_applyManipulationCallback(t,e){if(zt(t))e(t);else for(const n of Oe.find(t,this._element))e(n)}}const En="backdrop",An="show",Cn="mousedown.bs.backdrop",Tn={className:"modal-backdrop",isVisible:!0,isAnimated:!1,rootElement:"body",clickCallback:null},kn={className:"string",isVisible:"boolean",isAnimated:"boolean",rootElement:"(element|string)",clickCallback:"(function|null)"};class On extends we{constructor(t){super(),this._config=this._getConfig(t),this._isAppended=!1,this._element=null}static get Default(){return Tn}static get DefaultType(){return kn}static get NAME(){return En}show(t){if(!this._config.isVisible)return void Gt(t);this._append();const e=this._getElement();this._config.isAnimated&&Kt(e),e.classList.add(An),this._emulateAnimation((()=>{Gt(t)}))}hide(t){this._config.isVisible?(this._getElement().classList.remove(An),this._emulateAnimation((()=>{this.dispose(),Gt(t)}))):Gt(t)}dispose(){this._isAppended&&(ge.off(this._element,Cn),this._element.remove(),this._isAppended=!1)}_getElement(){if(!this._element){const t=document.createElement("div");t.className=this._config.className,this._config.isAnimated&&t.classList.add("fade"),this._element=t}return this._element}_configAfterMerge(t){return t.rootElement=Ft(t.rootElement),t}_append(){if(this._isAppended)return;const t=this._getElement();this._config.rootElement.append(t),ge.on(t,Cn,(()=>{Gt(this._config.clickCallback)})),this._isAppended=!0}_emulateAnimation(t){Jt(t,this._getElement(),this._config.isAnimated)}}const xn=".bs.focustrap",Ln="backward",In={trapElement:null,autofocus:!0},Sn={trapElement:"element",autofocus:"boolean"};class Dn extends we{constructor(t){super(),this._config=this._getConfig(t),this._isActive=!1,this._lastTabNavDirection=null}static get Default(){return In}static get DefaultType(){return Sn}static get NAME(){return"focustrap"}activate(){this._isActive||(this._config.autofocus&&this._config.trapElement.focus(),ge.off(document,xn),ge.on(document,"focusin.bs.focustrap",(t=>this._handleFocusin(t))),ge.on(document,"keydown.tab.bs.focustrap",(t=>this._handleKeydown(t))),this._isActive=!0)}deactivate(){this._isActive&&(this._isActive=!1,ge.off(document,xn))}_handleFocusin(t){const{trapElement:e}=this._config;if(t.target===document||t.target===e||e.contains(t.target))return;const n=Oe.focusableChildren(e);0===n.length?e.focus():this._lastTabNavDirection===Ln?n[n.length-1].focus():n[0].focus()}_handleKeydown(t){"Tab"===t.key&&(this._lastTabNavDirection=t.shiftKey?Ln:"forward")}}const Nn=".bs.modal",Pn="hidden.bs.modal",Mn="show.bs.modal",jn="modal-open",Hn="show",$n="modal-static",Bn={backdrop:!0,keyboard:!0,focus:!0},zn={backdrop:"(boolean|string)",keyboard:"boolean",focus:"boolean"};class Fn extends Ee{constructor(t,e){super(t,e),this._dialog=Oe.findOne(".modal-dialog",this._element),this._backdrop=this._initializeBackDrop(),this._focustrap=this._initializeFocusTrap(),this._isShown=!1,this._isTransitioning=!1,this._scrollBar=new wn,this._addEventListeners()}static get Default(){return Bn}static get DefaultType(){return zn}static get NAME(){return"modal"}toggle(t){return this._isShown?this.hide():this.show(t)}show(t){if(this._isShown||this._isTransitioning)return;ge.trigger(this._element,Mn,{relatedTarget:t}).defaultPrevented||(this._isShown=!0,this._isTransitioning=!0,this._scrollBar.hide(),document.body.classList.add(jn),this._adjustDialog(),this._backdrop.show((()=>this._showElement(t))))}hide(){if(!this._isShown||this._isTransitioning)return;ge.trigger(this._element,"hide.bs.modal").defaultPrevented||(this._isShown=!1,this._isTransitioning=!0,this._focustrap.deactivate(),this._element.classList.remove(Hn),this._queueCallback((()=>this._hideModal()),this._element,this._isAnimated()))}dispose(){for(const t of[window,this._dialog])ge.off(t,Nn);this._backdrop.dispose(),this._focustrap.deactivate(),super.dispose()}handleUpdate(){this._adjustDialog()}_initializeBackDrop(){return new On({isVisible:Boolean(this._config.backdrop),isAnimated:this._isAnimated()})}_initializeFocusTrap(){return new Dn({trapElement:this._element})}_showElement(t){document.body.contains(this._element)||document.body.append(this._element),this._element.style.display="block",this._element.removeAttribute("aria-hidden"),this._element.setAttribute("aria-modal",!0),this._element.setAttribute("role","dialog"),this._element.scrollTop=0;const e=Oe.findOne(".modal-body",this._dialog);e&&(e.scrollTop=0),Kt(this._element),this._element.classList.add(Hn);this._queueCallback((()=>{this._config.focus&&this._focustrap.activate(),this._isTransitioning=!1,ge.trigger(this._element,"shown.bs.modal",{relatedTarget:t})}),this._dialog,this._isAnimated())}_addEventListeners(){ge.on(this._element,"keydown.dismiss.bs.modal",(t=>{if("Escape"===t.key)return this._config.keyboard?(t.preventDefault(),void this.hide()):void this._triggerBackdropTransition()})),ge.on(window,"resize.bs.modal",(()=>{this._isShown&&!this._isTransitioning&&this._adjustDialog()})),ge.on(this._element,"click.dismiss.bs.modal",(t=>{t.target===t.currentTarget&&("static"!==this._config.backdrop?this._config.backdrop&&this.hide():this._triggerBackdropTransition())}))}_hideModal(){this._element.style.display="none",this._element.setAttribute("aria-hidden",!0),this._element.removeAttribute("aria-modal"),this._element.removeAttribute("role"),this._isTransitioning=!1,this._backdrop.hide((()=>{document.body.classList.remove(jn),this._resetAdjustments(),this._scrollBar.reset(),ge.trigger(this._element,Pn)}))}_isAnimated(){return this._element.classList.contains("fade")}_triggerBackdropTransition(){if(ge.trigger(this._element,"hidePrevented.bs.modal").defaultPrevented)return;const t=this._element.scrollHeight>document.documentElement.clientHeight,e=this._element.style.overflowY;"hidden"===e||this._element.classList.contains($n)||(t||(this._element.style.overflowY="hidden"),this._element.classList.add($n),this._queueCallback((()=>{this._element.classList.remove($n),this._queueCallback((()=>{this._element.style.overflowY=e}),this._dialog)}),this._dialog),this._element.focus())}_adjustDialog(){const t=this._element.scrollHeight>document.documentElement.clientHeight,e=this._scrollBar.getWidth(),n=e>0;if(n&&!t){const t=Xt()?"paddingLeft":"paddingRight";this._element.style[t]=`${e}px`}if(!n&&t){const t=Xt()?"paddingRight":"paddingLeft";this._element.style[t]=`${e}px`}}_resetAdjustments(){this._element.style.paddingLeft="",this._element.style.paddingRight=""}static jQueryInterface(t,e){return this.each((function(){const n=Fn.getOrCreateInstance(this,t);if("string"==typeof t){if(void 0===n[t])throw new TypeError(`No method named "${t}"`);n[t](e)}}))}}ge.on(document,"click.bs.modal.data-api",'[data-bs-toggle="modal"]',(function(t){const e=$t(this);["A","AREA"].includes(this.tagName)&&t.preventDefault(),ge.one(e,Mn,(t=>{t.defaultPrevented||ge.one(e,Pn,(()=>{Rt(this)&&this.focus()}))}));const n=Oe.findOne(".modal.show");n&&Fn.getInstance(n).hide();Fn.getOrCreateInstance(e).toggle(this)})),Ae(Fn),Ut(Fn);const Rn="show",Wn="showing",qn="hiding",Vn=".offcanvas.show",Kn="hidePrevented.bs.offcanvas",Yn="hidden.bs.offcanvas",Qn={backdrop:!0,keyboard:!0,scroll:!1},Xn={backdrop:"(boolean|string)",keyboard:"boolean",scroll:"boolean"};class Un extends Ee{constructor(t,e){super(t,e),this._isShown=!1,this._backdrop=this._initializeBackDrop(),this._focustrap=this._initializeFocusTrap(),this._addEventListeners()}static get Default(){return Qn}static get DefaultType(){return Xn}static get NAME(){return"offcanvas"}toggle(t){return this._isShown?this.hide():this.show(t)}show(t){if(this._isShown)return;if(ge.trigger(this._element,"show.bs.offcanvas",{relatedTarget:t}).defaultPrevented)return;this._isShown=!0,this._backdrop.show(),this._config.scroll||(new wn).hide(),this._element.setAttribute("aria-modal",!0),this._element.setAttribute("role","dialog"),this._element.classList.add(Wn);this._queueCallback((()=>{this._config.scroll||this._focustrap.activate(),this._element.classList.add(Rn),this._element.classList.remove(Wn),ge.trigger(this._element,"shown.bs.offcanvas",{relatedTarget:t})}),this._element,!0)}hide(){if(!this._isShown)return;if(ge.trigger(this._element,"hide.bs.offcanvas").defaultPrevented)return;this._focustrap.deactivate(),this._element.blur(),this._isShown=!1,this._element.classList.add(qn),this._backdrop.hide();this._queueCallback((()=>{this._element.classList.remove(Rn,qn),this._element.removeAttribute("aria-modal"),this._element.removeAttribute("role"),this._config.scroll||(new wn).reset(),ge.trigger(this._element,Yn)}),this._element,!0)}dispose(){this._backdrop.dispose(),this._focustrap.deactivate(),super.dispose()}_initializeBackDrop(){const t=Boolean(this._config.backdrop);return new On({className:"offcanvas-backdrop",isVisible:t,isAnimated:!0,rootElement:this._element.parentNode,clickCallback:t?()=>{"static"!==this._config.backdrop?this.hide():ge.trigger(this._element,Kn)}:null})}_initializeFocusTrap(){return new Dn({trapElement:this._element})}_addEventListeners(){ge.on(this._element,"keydown.dismiss.bs.offcanvas",(t=>{"Escape"===t.key&&(this._config.keyboard?this.hide():ge.trigger(this._element,Kn))}))}static jQueryInterface(t){return this.each((function(){const e=Un.getOrCreateInstance(this,t);if("string"==typeof t){if(void 0===e[t]||t.startsWith("_")||"constructor"===t)throw new TypeError(`No method named "${t}"`);e[t](this)}}))}}ge.on(document,"click.bs.offcanvas.data-api",'[data-bs-toggle="offcanvas"]',(function(t){const e=$t(this);if(["A","AREA"].includes(this.tagName)&&t.preventDefault(),Wt(this))return;ge.one(e,Yn,(()=>{Rt(this)&&this.focus()}));const n=Oe.findOne(Vn);n&&n!==e&&Un.getInstance(n).hide();Un.getOrCreateInstance(e).toggle(this)})),ge.on(window,"load.bs.offcanvas.data-api",(()=>{for(const t of Oe.find(Vn))Un.getOrCreateInstance(t).show()})),ge.on(window,"resize.bs.offcanvas",(()=>{for(const t of Oe.find("[aria-modal][class*=show][class*=offcanvas-]"))"fixed"!==getComputedStyle(t).position&&Un.getOrCreateInstance(t).hide()})),Ae(Un),Ut(Un);const Gn=new Set(["background","cite","href","itemtype","longdesc","poster","src","xlink:href"]),Jn=/^(?:(?:https?|mailto|ftp|tel|file|sms):|[^#&/:?]*(?:[#/?]|$))/i,Zn=/^data:(?:image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\/(?:mpeg|mp4|ogg|webm)|audio\/(?:mp3|oga|ogg|opus));base64,[\d+/a-z]+=*$/i,ti=(t,e)=>{const n=t.nodeName.toLowerCase();return e.includes(n)?!Gn.has(n)||Boolean(Jn.test(t.nodeValue)||Zn.test(t.nodeValue)):e.filter((t=>t instanceof RegExp)).some((t=>t.test(n)))},ei={"*":["class","dir","id","lang","role",/^aria-[\w-]*$/i],a:["target","href","title","rel"],area:[],b:[],br:[],col:[],code:[],div:[],em:[],hr:[],h1:[],h2:[],h3:[],h4:[],h5:[],h6:[],i:[],img:["src","srcset","alt","title","width","height"],li:[],ol:[],p:[],pre:[],s:[],small:[],span:[],sub:[],sup:[],strong:[],u:[],ul:[]};const ni={extraClass:"",template:"<div></div>",content:{},html:!1,sanitize:!0,sanitizeFn:null,allowList:ei},ii={extraClass:"(string|function)",template:"string",content:"object",html:"boolean",sanitize:"boolean",sanitizeFn:"(null|function)",allowList:"object"},si={selector:"(string|element)",entry:"(string|element|function|null)"};class oi extends we{constructor(t){super(),this._config=this._getConfig(t)}static get Default(){return ni}static get DefaultType(){return ii}static get NAME(){return"TemplateFactory"}getContent(){return Object.values(this._config.content).map((t=>this._resolvePossibleFunction(t))).filter(Boolean)}hasContent(){return this.getContent().length>0}changeContent(t){return this._checkContent(t),this._config.content={...this._config.content,...t},this}toHtml(){const t=document.createElement("div");t.innerHTML=this._maybeSanitize(this._config.template);for(const[e,n]of Object.entries(this._config.content))this._setContent(t,n,e);const e=t.children[0],n=this._resolvePossibleFunction(this._config.extraClass);return n&&e.classList.add(...n.split(" ")),e}_typeCheckConfig(t){super._typeCheckConfig(t),this._checkContent(t.content)}_checkContent(t){for(const[e,n]of Object.entries(t))super._typeCheckConfig({selector:e,entry:n},si)}_setContent(t,e,n){const i=Oe.findOne(n,t);i&&((e=this._resolvePossibleFunction(e))?zt(e)?this._putElementInTemplate(Ft(e),i):this._config.html?i.innerHTML=this._maybeSanitize(e):i.textContent=e:i.remove())}_maybeSanitize(t){return this._config.sanitize?function(t,e,n){if(!t.length)return t;if(n&&"function"==typeof n)return n(t);const i=(new window.DOMParser).parseFromString(t,"text/html"),s=[].concat(...i.body.querySelectorAll("*"));for(const t of s){const n=t.nodeName.toLowerCase();if(!Object.keys(e).includes(n)){t.remove();continue}const i=[].concat(...t.attributes),s=[].concat(e["*"]||[],e[n]||[]);for(const e of i)ti(e,s)||t.removeAttribute(e.nodeName)}return i.body.innerHTML}(t,this._config.allowList,this._config.sanitizeFn):t}_resolvePossibleFunction(t){return"function"==typeof t?t(this):t}_putElementInTemplate(t,e){if(this._config.html)return e.innerHTML="",void e.append(t);e.textContent=t.textContent}}const ri=new Set(["sanitize","allowList","sanitizeFn"]),ai="fade",li="show",ci=".modal",ui="hide.bs.modal",di="hover",hi="focus",fi={AUTO:"auto",TOP:"top",RIGHT:Xt()?"left":"right",BOTTOM:"bottom",LEFT:Xt()?"right":"left"},pi={animation:!0,template:'<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',trigger:"hover focus",title:"",delay:0,html:!1,selector:!1,placement:"top",offset:[0,0],container:!1,fallbackPlacements:["top","right","bottom","left"],boundary:"clippingParents",customClass:"",sanitize:!0,sanitizeFn:null,allowList:ei,popperConfig:null},gi={animation:"boolean",template:"string",title:"(string|element|function)",trigger:"string",delay:"(number|object)",html:"boolean",selector:"(string|boolean)",placement:"(string|function)",offset:"(array|string|function)",container:"(string|element|boolean)",fallbackPlacements:"array",boundary:"(string|element)",customClass:"(string|function)",sanitize:"boolean",sanitizeFn:"(null|function)",allowList:"object",popperConfig:"(null|object|function)"};class mi extends Ee{constructor(e,n){if(void 0===t)throw new TypeError("Bootstrap's tooltips require Popper (https://popper.js.org)");super(e,n),this._isEnabled=!0,this._timeout=0,this._isHovered=!1,this._activeTrigger={},this._popper=null,this._templateFactory=null,this.tip=null,this._setListeners()}static get Default(){return pi}static get DefaultType(){return gi}static get NAME(){return"tooltip"}enable(){this._isEnabled=!0}disable(){this._isEnabled=!1}toggleEnabled(){this._isEnabled=!this._isEnabled}toggle(t){if(this._isEnabled){if(t){const e=this._initializeOnDelegatedTarget(t);return e._activeTrigger.click=!e._activeTrigger.click,void(e._isWithActiveTrigger()?e._enter():e._leave())}this._isShown()?this._leave():this._enter()}}dispose(){clearTimeout(this._timeout),ge.off(this._element.closest(ci),ui,this._hideModalHandler),this.tip&&this.tip.remove(),this._disposePopper(),super.dispose()}show(){if("none"===this._element.style.display)throw new Error("Please use show on visible elements");if(!this._isWithContent()||!this._isEnabled)return;const t=ge.trigger(this._element,this.constructor.eventName("show")),e=(qt(this._element)||this._element.ownerDocument.documentElement).contains(this._element);if(t.defaultPrevented||!e)return;const n=this._getTipElement();this._element.setAttribute("aria-describedby",n.getAttribute("id"));const{container:i}=this._config;if(this._element.ownerDocument.documentElement.contains(this.tip)||(i.append(n),ge.trigger(this._element,this.constructor.eventName("inserted"))),this._popper?this._popper.update():this._createPopper(n),n.classList.add(li),"ontouchstart"in document.documentElement)for(const t of[].concat(...document.body.children))ge.on(t,"mouseover",Vt);this._queueCallback((()=>{const t=this._isHovered;this._isHovered=!1,ge.trigger(this._element,this.constructor.eventName("shown")),t&&this._leave()}),this.tip,this._isAnimated())}hide(){if(!this._isShown())return;if(ge.trigger(this._element,this.constructor.eventName("hide")).defaultPrevented)return;const t=this._getTipElement();if(t.classList.remove(li),"ontouchstart"in document.documentElement)for(const t of[].concat(...document.body.children))ge.off(t,"mouseover",Vt);this._activeTrigger.click=!1,this._activeTrigger.focus=!1,this._activeTrigger.hover=!1,this._isHovered=!1;this._queueCallback((()=>{this._isWithActiveTrigger()||(this._isHovered||t.remove(),this._element.removeAttribute("aria-describedby"),ge.trigger(this._element,this.constructor.eventName("hidden")),this._disposePopper())}),this.tip,this._isAnimated())}update(){this._popper&&this._popper.update()}_isWithContent(){return Boolean(this._getTitle())}_getTipElement(){return this.tip||(this.tip=this._createTipElement(this._getContentForTemplate())),this.tip}_createTipElement(t){const e=this._getTemplateFactory(t).toHtml();if(!e)return null;e.classList.remove(ai,li),e.classList.add(`bs-${this.constructor.NAME}-auto`);const n=(t=>{do{t+=Math.floor(1e6*Math.random())}while(document.getElementById(t));return t})(this.constructor.NAME).toString();return e.setAttribute("id",n),this._isAnimated()&&e.classList.add(ai),e}setContent(t){let e=!1;this.tip&&(e=this._isShown(),this.tip.remove(),this.tip=null),this._disposePopper(),this.tip=this._createTipElement(t),e&&this.show()}_getTemplateFactory(t){return this._templateFactory?this._templateFactory.changeContent(t):this._templateFactory=new oi({...this._config,content:t,extraClass:this._resolvePossibleFunction(this._config.customClass)}),this._templateFactory}_getContentForTemplate(){return{".tooltip-inner":this._getTitle()}}_getTitle(){return this._config.title}_initializeOnDelegatedTarget(t){return this.constructor.getOrCreateInstance(t.delegateTarget,this._getDelegateConfig())}_isAnimated(){return this._config.animation||this.tip&&this.tip.classList.contains(ai)}_isShown(){return this.tip&&this.tip.classList.contains(li)}_createPopper(t){const e="function"==typeof this._config.placement?this._config.placement.call(this,t,this._element):this._config.placement,n=fi[e.toUpperCase()];this._popper=Nt(this._element,t,this._getPopperConfig(n))}_getOffset(){const{offset:t}=this._config;return"string"==typeof t?t.split(",").map((t=>Number.parseInt(t,10))):"function"==typeof t?e=>t(e,this._element):t}_resolvePossibleFunction(t){return"function"==typeof t?t.call(this._element):t}_getPopperConfig(t){const e={placement:t,modifiers:[{name:"flip",options:{fallbackPlacements:this._config.fallbackPlacements}},{name:"offset",options:{offset:this._getOffset()}},{name:"preventOverflow",options:{boundary:this._config.boundary}},{name:"arrow",options:{element:`.${this.constructor.NAME}-arrow`}},{name:"preSetPlacement",enabled:!0,phase:"beforeMain",fn:t=>{this._getTipElement().setAttribute("data-popper-placement",t.state.placement)}}]};return{...e,..."function"==typeof this._config.popperConfig?this._config.popperConfig(e):this._config.popperConfig}}_setListeners(){const t=this._config.trigger.split(" ");for(const e of t)if("click"===e)ge.on(this._element,this.constructor.eventName("click"),this._config.selector,(t=>this.toggle(t)));else if("manual"!==e){const t=e===di?this.constructor.eventName("mouseenter"):this.constructor.eventName("focusin"),n=e===di?this.constructor.eventName("mouseleave"):this.constructor.eventName("focusout");ge.on(this._element,t,this._config.selector,(t=>{const e=this._initializeOnDelegatedTarget(t);e._activeTrigger["focusin"===t.type?hi:di]=!0,e._enter()})),ge.on(this._element,n,this._config.selector,(t=>{const e=this._initializeOnDelegatedTarget(t);e._activeTrigger["focusout"===t.type?hi:di]=e._element.contains(t.relatedTarget),e._leave()}))}this._hideModalHandler=()=>{this._element&&this.hide()},ge.on(this._element.closest(ci),ui,this._hideModalHandler),this._config.selector?this._config={...this._config,trigger:"manual",selector:""}:this._fixTitle()}_fixTitle(){const t=this._config.originalTitle;t&&(this._element.getAttribute("aria-label")||this._element.textContent||this._element.setAttribute("aria-label",t),this._element.removeAttribute("title"))}_enter(){this._isShown()||this._isHovered?this._isHovered=!0:(this._isHovered=!0,this._setTimeout((()=>{this._isHovered&&this.show()}),this._config.delay.show))}_leave(){this._isWithActiveTrigger()||(this._isHovered=!1,this._setTimeout((()=>{this._isHovered||this.hide()}),this._config.delay.hide))}_setTimeout(t,e){clearTimeout(this._timeout),this._timeout=setTimeout(t,e)}_isWithActiveTrigger(){return Object.values(this._activeTrigger).includes(!0)}_getConfig(t){const e=ye.getDataAttributes(this._element);for(const t of Object.keys(e))ri.has(t)&&delete e[t];return t={...e,..."object"==typeof t&&t?t:{}},t=this._mergeConfigObj(t),t=this._configAfterMerge(t),this._typeCheckConfig(t),t}_configAfterMerge(t){return t.container=!1===t.container?document.body:Ft(t.container),"number"==typeof t.delay&&(t.delay={show:t.delay,hide:t.delay}),t.originalTitle=this._element.getAttribute("title")||"",t.title=this._resolvePossibleFunction(t.title)||t.originalTitle,"number"==typeof t.title&&(t.title=t.title.toString()),"number"==typeof t.content&&(t.content=t.content.toString()),t}_getDelegateConfig(){const t={};for(const e in this._config)this.constructor.Default[e]!==this._config[e]&&(t[e]=this._config[e]);return t}_disposePopper(){this._popper&&(this._popper.destroy(),this._popper=null)}static jQueryInterface(t){return this.each((function(){const e=mi.getOrCreateInstance(this,t);if("string"==typeof t){if(void 0===e[t])throw new TypeError(`No method named "${t}"`);e[t]()}}))}}Ut(mi);const _i={...mi.Default,placement:"right",offset:[0,8],trigger:"click",content:"",template:'<div class="popover" role="tooltip"><div class="popover-arrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>'},bi={...mi.DefaultType,content:"(null|string|element|function)"};class vi extends mi{static get Default(){return _i}static get DefaultType(){return bi}static get NAME(){return"popover"}_isWithContent(){return this._getTitle()||this._getContent()}_getContentForTemplate(){return{".popover-header":this._getTitle(),".popover-body":this._getContent()}}_getContent(){return this._resolvePossibleFunction(this._config.content)}static jQueryInterface(t){return this.each((function(){const e=vi.getOrCreateInstance(this,t);if("string"==typeof t){if(void 0===e[t])throw new TypeError(`No method named "${t}"`);e[t]()}}))}}Ut(vi);const yi="click.bs.scrollspy",wi="active",Ei="[href]",Ai={offset:null,rootMargin:"0px 0px -25%",smoothScroll:!1,target:null},Ci={offset:"(number|null)",rootMargin:"string",smoothScroll:"boolean",target:"element"};class Ti extends Ee{constructor(t,e){super(t,e),this._targetLinks=new Map,this._observableSections=new Map,this._rootElement="visible"===getComputedStyle(this._element).overflowY?null:this._element,this._activeTarget=null,this._observer=null,this._previousScrollData={visibleEntryTop:0,parentScrollTop:0},this.refresh()}static get Default(){return Ai}static get DefaultType(){return Ci}static get NAME(){return"scrollspy"}refresh(){this._initializeTargetsAndObservables(),this._maybeEnableSmoothScroll(),this._observer?this._observer.disconnect():this._observer=this._getNewObserver();for(const t of this._observableSections.values())this._observer.observe(t)}dispose(){this._observer.disconnect(),super.dispose()}_configAfterMerge(t){return t.target=Ft(t.target)||document.body,t}_maybeEnableSmoothScroll(){this._config.smoothScroll&&(ge.off(this._config.target,yi),ge.on(this._config.target,yi,Ei,(t=>{const e=this._observableSections.get(t.target.hash);if(e){t.preventDefault();const n=this._rootElement||window,i=e.offsetTop-this._element.offsetTop;if(n.scrollTo)return void n.scrollTo({top:i});n.scrollTop=i}})))}_getNewObserver(){const t={root:this._rootElement,threshold:[.1,.5,1],rootMargin:this._getRootMargin()};return new IntersectionObserver((t=>this._observerCallback(t)),t)}_observerCallback(t){const e=t=>this._targetLinks.get(`#${t.target.id}`),n=t=>{this._previousScrollData.visibleEntryTop=t.target.offsetTop,this._process(e(t))},i=(this._rootElement||document.documentElement).scrollTop,s=i>=this._previousScrollData.parentScrollTop;this._previousScrollData.parentScrollTop=i;for(const o of t){if(!o.isIntersecting){this._activeTarget=null,this._clearActiveClass(e(o));continue}const t=o.target.offsetTop>=this._previousScrollData.visibleEntryTop;if(s&&t){if(n(o),!i)return}else s||t||n(o)}}_getRootMargin(){return this._config.offset?`${this._config.offset}px 0px -30%`:this._config.rootMargin}_initializeTargetsAndObservables(){this._targetLinks=new Map,this._observableSections=new Map;const t=Oe.find(Ei,this._config.target);for(const e of t){if(!e.hash||Wt(e))continue;const t=Oe.findOne(e.hash,this._element);Rt(t)&&(this._targetLinks.set(e.hash,e),this._observableSections.set(e.hash,t))}}_process(t){this._activeTarget!==t&&(this._clearActiveClass(this._config.target),this._activeTarget=t,t.classList.add(wi),this._activateParents(t),ge.trigger(this._element,"activate.bs.scrollspy",{relatedTarget:t}))}_activateParents(t){if(t.classList.contains("dropdown-item"))Oe.findOne(".dropdown-toggle",t.closest(".dropdown")).classList.add(wi);else for(const e of Oe.parents(t,".nav, .list-group"))for(const t of Oe.prev(e,".nav-link, .nav-item > .nav-link, .list-group-item"))t.classList.add(wi)}_clearActiveClass(t){t.classList.remove(wi);const e=Oe.find("[href].active",t);for(const t of e)t.classList.remove(wi)}static jQueryInterface(t){return this.each((function(){const e=Ti.getOrCreateInstance(this,t);if("string"==typeof t){if(void 0===e[t]||t.startsWith("_")||"constructor"===t)throw new TypeError(`No method named "${t}"`);e[t]()}}))}}ge.on(window,"load.bs.scrollspy.data-api",(()=>{for(const t of Oe.find('[data-bs-spy="scroll"]'))Ti.getOrCreateInstance(t)})),Ut(Ti);const ki="ArrowLeft",Oi="ArrowRight",xi="ArrowUp",Li="ArrowDown",Ii="active",Si="fade",Di="show",Ni='[data-bs-toggle="tab"], [data-bs-toggle="pill"], [data-bs-toggle="list"]',Pi=`.nav-link:not(.dropdown-toggle), .list-group-item:not(.dropdown-toggle), [role="tab"]:not(.dropdown-toggle), ${Ni}`;class Mi extends Ee{constructor(t){super(t),this._parent=this._element.closest('.list-group, .nav, [role="tablist"]'),this._parent&&(this._setInitialAttributes(this._parent,this._getChildren()),ge.on(this._element,"keydown.bs.tab",(t=>this._keydown(t))))}static get NAME(){return"tab"}show(){const t=this._element;if(this._elemIsActive(t))return;const e=this._getActiveElem(),n=e?ge.trigger(e,"hide.bs.tab",{relatedTarget:t}):null;ge.trigger(t,"show.bs.tab",{relatedTarget:e}).defaultPrevented||n&&n.defaultPrevented||(this._deactivate(e,t),this._activate(t,e))}_activate(t,e){if(!t)return;t.classList.add(Ii),this._activate($t(t));const n=t.classList.contains(Si);this._queueCallback((()=>{n&&t.classList.add(Di),"tab"===t.getAttribute("role")&&(t.focus(),t.removeAttribute("tabindex"),t.setAttribute("aria-selected",!0),this._toggleDropDown(t,!0),ge.trigger(t,"shown.bs.tab",{relatedTarget:e}))}),t,n)}_deactivate(t,e){if(!t)return;t.classList.remove(Ii),t.blur(),this._deactivate($t(t));const n=t.classList.contains(Si);this._queueCallback((()=>{n&&t.classList.remove(Di),"tab"===t.getAttribute("role")&&(t.setAttribute("aria-selected",!1),t.setAttribute("tabindex","-1"),this._toggleDropDown(t,!1),ge.trigger(t,"hidden.bs.tab",{relatedTarget:e}))}),t,n)}_keydown(t){if(![ki,Oi,xi,Li].includes(t.key))return;t.stopPropagation(),t.preventDefault();const e=[Oi,Li].includes(t.key),n=Zt(this._getChildren().filter((t=>!Wt(t))),t.target,e,!0);n&&Mi.getOrCreateInstance(n).show()}_getChildren(){return Oe.find(Pi,this._parent)}_getActiveElem(){return this._getChildren().find((t=>this._elemIsActive(t)))||null}_setInitialAttributes(t,e){this._setAttributeIfNotExists(t,"role","tablist");for(const t of e)this._setInitialAttributesOnChild(t)}_setInitialAttributesOnChild(t){t=this._getInnerElement(t);const e=this._elemIsActive(t),n=this._getOuterElement(t);t.setAttribute("aria-selected",e),n!==t&&this._setAttributeIfNotExists(n,"role","presentation"),e||t.setAttribute("tabindex","-1"),this._setAttributeIfNotExists(t,"role","tab"),this._setInitialAttributesOnTargetPanel(t)}_setInitialAttributesOnTargetPanel(t){const e=$t(t);e&&(this._setAttributeIfNotExists(e,"role","tabpanel"),t.id&&this._setAttributeIfNotExists(e,"aria-labelledby",`#${t.id}`))}_toggleDropDown(t,e){const n=this._getOuterElement(t);if(!n.classList.contains("dropdown"))return;const i=(t,i)=>{const s=Oe.findOne(t,n);s&&s.classList.toggle(i,e)};i(".dropdown-toggle",Ii),i(".dropdown-menu",Di),i(".dropdown-item",Ii),n.setAttribute("aria-expanded",e)}_setAttributeIfNotExists(t,e,n){t.hasAttribute(e)||t.setAttribute(e,n)}_elemIsActive(t){return t.classList.contains(Ii)}_getInnerElement(t){return t.matches(Pi)?t:Oe.findOne(Pi,t)}_getOuterElement(t){return t.closest(".nav-item, .list-group-item")||t}static jQueryInterface(t){return this.each((function(){const e=Mi.getOrCreateInstance(this);if("string"==typeof t){if(void 0===e[t]||t.startsWith("_")||"constructor"===t)throw new TypeError(`No method named "${t}"`);e[t]()}}))}}ge.on(document,"click.bs.tab",Ni,(function(t){["A","AREA"].includes(this.tagName)&&t.preventDefault(),Wt(this)||Mi.getOrCreateInstance(this).show()})),ge.on(window,"load.bs.tab",(()=>{for(const t of Oe.find('.active[data-bs-toggle="tab"], .active[data-bs-toggle="pill"], .active[data-bs-toggle="list"]'))Mi.getOrCreateInstance(t)})),Ut(Mi);const ji="hide",Hi="show",$i="showing",Bi={animation:"boolean",autohide:"boolean",delay:"number"},zi={animation:!0,autohide:!0,delay:5e3};class Fi extends Ee{constructor(t,e){super(t,e),this._timeout=null,this._hasMouseInteraction=!1,this._hasKeyboardInteraction=!1,this._setListeners()}static get Default(){return zi}static get DefaultType(){return Bi}static get NAME(){return"toast"}show(){if(ge.trigger(this._element,"show.bs.toast").defaultPrevented)return;this._clearTimeout(),this._config.animation&&this._element.classList.add("fade");this._element.classList.remove(ji),Kt(this._element),this._element.classList.add(Hi,$i),this._queueCallback((()=>{this._element.classList.remove($i),ge.trigger(this._element,"shown.bs.toast"),this._maybeScheduleHide()}),this._element,this._config.animation)}hide(){if(!this.isShown())return;if(ge.trigger(this._element,"hide.bs.toast").defaultPrevented)return;this._element.classList.add($i),this._queueCallback((()=>{this._element.classList.add(ji),this._element.classList.remove($i,Hi),ge.trigger(this._element,"hidden.bs.toast")}),this._element,this._config.animation)}dispose(){this._clearTimeout(),this.isShown()&&this._element.classList.remove(Hi),super.dispose()}isShown(){return this._element.classList.contains(Hi)}_maybeScheduleHide(){this._config.autohide&&(this._hasMouseInteraction||this._hasKeyboardInteraction||(this._timeout=setTimeout((()=>{this.hide()}),this._config.delay)))}_onInteraction(t,e){switch(t.type){case"mouseover":case"mouseout":this._hasMouseInteraction=e;break;case"focusin":case"focusout":this._hasKeyboardInteraction=e}if(e)return void this._clearTimeout();const n=t.relatedTarget;this._element===n||this._element.contains(n)||this._maybeScheduleHide()}_setListeners(){ge.on(this._element,"mouseover.bs.toast",(t=>this._onInteraction(t,!0))),ge.on(this._element,"mouseout.bs.toast",(t=>this._onInteraction(t,!1))),ge.on(this._element,"focusin.bs.toast",(t=>this._onInteraction(t,!0))),ge.on(this._element,"focusout.bs.toast",(t=>this._onInteraction(t,!1)))}_clearTimeout(){clearTimeout(this._timeout),this._timeout=null}static jQueryInterface(t){return this.each((function(){const e=Fi.getOrCreateInstance(this,t);if("string"==typeof t){if(void 0===e[t])throw new TypeError(`No method named "${t}"`);e[t](this)}}))}}Ae(Fi),Ut(Fi);var Ri=function(){function t(){e(this,t),this.settings(),this.bindEvents()}return s(t,[{key:"settings",value:function(){this.videoBanner=document.querySelector(".banner-video")}},{key:"bindEvents",value:function(){var t=this;this.videoBanner&&(this.videoPlay=this.videoBanner.querySelector(".play"),this.video=this.videoBanner.querySelector("video"),this.videoPlay.addEventListener("click",(function(){t.video.play(),t.video.style.display="block"})))}}]),t}(),Wi=n(732),qi=n.n(Wi);var Vi=function(){function t(){e(this,t),this.settings(),this.bindEvents()}return s(t,[{key:"settings",value:function(){this.btnSearchHeader=document.getElementById("btnSearchHeader"),this.inputSearchHeader=document.getElementById("inputSearchHeader"),this.containerSearchHeader=document.getElementById("containerSearchHeader"),this.closeSearchHeader=document.getElementById("closeSearchHeader")}},{key:"bindEvents",value:function(){var t=this;this.btnSearchHeader.addEventListener("click",(function(e){t.openSearch(e)})),this.closeSearchHeader.addEventListener("click",(function(){t.closeSearch()}))}},{key:"openSearch",value:function(t){"false"===this.btnSearchHeader.getAttribute("data-expended")&&(t.preventDefault(),t.stopPropagation(),this.btnSearchHeader.setAttribute("data-expended",!0),this.inputSearchHeader.focus(),this.containerSearchHeader.classList.add("show"))}},{key:"closeSearch",value:function(){this.btnSearchHeader.setAttribute("data-expended",!1),this.containerSearchHeader.classList.remove("show"),this.inputSearchHeader.value=""}}]),t}();function Ki(){var t,e,n;$("a").each((function(){$(this).hasClass("online-mss-btn")&&($(this).addClass("btn"),$(this).addClass("btn_accreditation")),-1!==$(this).html().indexOf("<img")&&$(this).addClass("inside-photo")})),$(".editor-content a").each((function(){"_blank"!==$(this).attr("target")||$(this).hasClass("inside-photo")||$(this).hasClass("npa-page_pdf-link")||$(this).html("<span>".concat($(this).html(),'</span><span class="icon"></span>'))})),new Ri,new(qi())({elements_selector:".lazy",load_delay:300,callback_load:function(t){t.classList.add("is-loaded")},callback_error:function(t){t.classList.add("is-error")}}),t=$(".main-nav--nav").find(".current-lang").find("a").html(),$("#currLang").text(t),new Vi,e=document.getElementById("navbar"),n="sticky",window.addEventListener("scroll",(function(){window.pageYOffset>200?e.classList.add(n):e.classList.remove(n)})),window.addEventListener("error",(function(t){var e=t.message,n=t.filename,i=t.lineno,s=t.colno,o=t.error;console.log([e,n,i,s,o])}))}new(function(){function t(){e(this,t),this.initModules()}return s(t,[{key:"initModules",value:function(){Ki()}}]),t}())}()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,